/* hvm_pcie_driver.c | HanoiVM PCIe Linux Driver (v0.9.3)
 *
 * This driver provides PCIe access to the HanoiVM accelerator, supporting T81/T243/T729 opcodes,
 * type-aware operands, session-aware entropy logging, and GPU synchronization.
 * It integrates with `hanoivm_fsm.v` via PCIe/M.2, `axion-ai.cweb` via debugfs,
 * `hanoivm-core.cweb` and `hanoivm-runtime.cweb` via FFI, `hanoivm_vm.cweb’`s execution core,
 * `hanoivm_firmware.cweb’`s firmware, `axion-gaia-interface.cweb’`s GPU dispatch,
 * `axion_api.cweb’`s recursion optimization, `axion_gpu_serializer.cweb’`s GPU serialization,
 * `bootstrap.cweb’`s bootstrap sequence, `config.cweb’`s configuration,
 * `cuda_handle_request.cweb’`s CUDA backend, `gaia_handle_request.cweb’`s ROCm backend,
 * `disasm_hvm.cweb’`s type-aware disassembly, `disassembler.cweb’`s advanced disassembly,
 * `emit_hvm.cweb’`s bytecode emission, `entropy_monitor.cweb’`s entropy monitoring,
 * `ghidra_hvm_plugin.cweb’`s Ghidra integration, `hanoivm-test.cweb’`s unit testing,
 * `hanoivm.cweb’`s CLI execution, `hvm_assembler.cweb’`s bytecode assembly,
 * `t81lang_interpreter.cweb’`s interpretation, `hvm_loader.cweb’`s bytecode loading,
 * and `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.
 *
 * Enhancements:
 * - Support for T81/T243/T729 opcodes (`T81_MATMUL`, `RECURSE_FACT`).
 * - Type-aware operand handling (`T81_TAG_VECTOR`, `T81_TAG_TENSOR`).
 * - Session management via `axion-ai.cweb’`s `axion_session_t`.
 * - Entropy logging via `axion-ai.cweb’`s debugfs and `entropy_monitor.cweb`.
 * - GPU synchronization with `axion-gaia-interface.cweb`.
 * - FFI interface to `hanoivm-core.cweb` (Rust) and `hanoivm-runtime.cweb` (C).
 * - Secure validation for opcodes, operands, and MMIO accesses.
 * - Debugfs entries for device state visualization.
 * - Support for `.hvm` test bytecode (`T81_MATMUL` + `TNN_ACCUM`).
 * - Optimized for kernel-space PCIe access.
 */

#include <linux/module.h>
#include <linux/init.h>
#include <linux/pci.h>
#include <linux/fs.h>
#include <linux/uaccess.h>
#include <linux/cdev.h>
#include <linux/io.h>
#include <linux/ioctl.h>
#include <linux/mutex.h>
#include <linux/debugfs.h>
#include "axion-ai.h"
#include "hanoivm_core.h"
#include "hanoivm_runtime.h"
#include "axion-gaia-interface.h"

#define VENDOR_ID 0x1ABC
#define DEVICE_ID 0x1DEF
#define HVM_BAR 0
#define T81_TAG_BIGINT 0x01
#define T81_TAG_MATRIX 0x04
#define T81_TAG_VECTOR 0x05

/* IOCTL commands */
#define HVM_IOCTL_RESET   _IO('h', 1)
#define HVM_IOCTL_STATUS  _IOR('h', 2, uint8_t)
#define HVM_IOCTL_EXEC    _IOW('h', 3, struct hvm_exec_cmd)

struct hvm_exec_cmd {
    uint8_t opcode;
    uint8_t tag;
    uint32_t operand;
};

static void __iomem *bar_addr;
static struct pci_dev *pdev;
static struct cdev hvm_cdev;
static dev_t dev_num;
static struct class *hvm_class;
static DEFINE_MUTEX(hvm_mutex);
static struct dentry *debugfs_dir;
static char session_id[32];

static struct pci_device_id hvm_ids[] = {
    { PCI_DEVICE(VENDOR_ID, DEVICE_ID), },
    { 0, }
};
MODULE_DEVICE_TABLE(pci, hvm_ids);

/* Opcode Validation Table */
static struct {
    uint8_t opcode;
    const char* name;
    uint8_t operand_count;
    uint8_t operand_type;
} opcodes[] = {
    { 0x01, "PUSH", 1, T81_TAG_BIGINT },
    { 0x21, "T81_MATMUL", 2, T81_TAG_MATRIX },
    { 0x30, "RECURSE_FACT", 1, T81_TAG_BIGINT },
    { 0xFF, "HALT", 0, 0 },
    { 0x00, NULL, 0, 0 }
};

static int validate_opcode(uint8_t opcode, uint8_t tag) {
    extern int rust_validate_opcode(uint8_t opcode);
    for (int i = 0; opcodes[i].name; i++) {
        if (opcodes[i].opcode == opcode) {
            if (opcodes[i].operand_type && tag != opcodes[i].operand_type) {
                axion_log_entropy("INVALID_TAG", tag);
                return 0;
            }
            return 1;
        }
    }
    if (rust_validate_opcode(opcode)) {
        axion_log_entropy("RUST_VALID_OPCODE", opcode);
        return 1;
    }
    axion_log_entropy("UNKNOWN_OPCODE", opcode);
    return 0;
}

static int hvm_probe(struct pci_dev *dev, const struct pci_device_id *id) {
    int err;
    pdev = dev;
    err = pci_enable_device(dev);
    if (err) {
        dev_err(&dev->dev, "Failed to enable PCI device\n");
        return err;
    }

    err = pci_request_region(dev, HVM_BAR, "hvm_bar");
    if (err) {
        dev_err(&dev->dev, "Failed to request BAR region\n");
        pci_disable_device(dev);
        return err;
    }

    bar_addr = pci_iomap(dev, HVM_BAR, pci_resource_len(dev, HVM_BAR));
    if (!bar_addr) {
        dev_err(&dev->dev, "Failed to iomap BAR region\n");
        pci_release_region(dev, HVM_BAR);
        pci_disable_device(dev);
        return -ENOMEM;
    }

    err = alloc_chrdev_region(&dev_num, 0, 1, "hvmdev");
    if (err < 0) {
        dev_err(&dev->dev, "Failed to allocate chrdev region\n");
        pci_iounmap(dev, bar_addr);
        pci_release_region(dev, HVM_BAR);
        pci_disable_device(dev);
        return err;
    }

    cdev_init(&hvm_cdev, &fops);
    err = cdev_add(&hvm_cdev, dev_num, 1);
    if (err < 0) {
        dev_err(&dev->dev, "Failed to add cdev\n");
        unregister_chrdev_region(dev_num, 1);
        pci_iounmap(dev, bar_addr);
        pci_release_region(dev, HVM_BAR);
        pci_disable_device(dev);
        return err;
    }

    hvm_class = class_create(THIS_MODULE, "hvm");
    if (IS_ERR(hvm_class)) {
        dev_err(&dev->dev, "Failed to create device class\n");
        cdev_del(&hvm_cdev);
        unregister_chrdev_region(dev_num, 1);
        pci_iounmap(dev, bar_addr);
        pci_release_region(dev, HVM_BAR);
        pci_disable_device(dev);
        return PTR_ERR(hvm_class);
    }

    device_create(hvm_class, NULL, dev_num, NULL, "hvm0");
    debugfs_dir = debugfs_create_dir("hvm", NULL);
    axion_log_entropy("PROBE_SUCCESS", 0);
    dev_info(&dev->dev, "HanoiVM accelerator detected and registered\n");
    return 0;
}

static void hvm_remove(struct pci_dev *dev) {
    debugfs_remove_recursive(debugfs_dir);
    device_destroy(hvm_class, dev_num);
    class_destroy(hvm_class);
    cdev_del(&hvm_cdev);
    unregister_chrdev_region(dev_num, 1);
    pci_iounmap(dev, bar_addr);
    pci_release_region(dev, HVM_BAR);
    pci_disable_device(dev);
    axion_log_entropy("REMOVE_DEVICE", 0);
    dev_info(&dev->dev, "HanoiVM accelerator removed\n");
}

static int hvm_open(struct inode *inode, struct file *file) {
    if (!mutex_trylock(&hvm_mutex)) {
        pr_err("hvm: Device busy\n");
        return -EBUSY;
    }
    snprintf(session_id, sizeof(session_id), "HVM-%016lx", (uint64_t)file);
    axion_register_session(session_id);
    axion_log_entropy("DEVICE_OPEN", 0);
    pr_info("hvm: Device opened\n");
    return 0;
}

static int hvm_release(struct inode *inode, struct file *file) {
    axion_log_entropy("DEVICE_CLOSE", 0);
    pr_info("hvm: Device closed\n");
    mutex_unlock(&hvm_mutex);
    return 0;
}

static ssize_t hvm_write(struct file *file, const char __user *buf, size_t count, loff_t *ppos) {
    struct hvm_exec_cmd cmd;
    if (count < sizeof(cmd)) {
        axion_log_entropy("WRITE_INVALID_SIZE", count);
        return -EINVAL;
    }
    if (copy_from_user(&cmd, buf, sizeof(cmd))) {
        axion_log_entropy("WRITE_COPY_FAIL", 0);
        return -EFAULT;
    }
    if (!validate_opcode(cmd.opcode, cmd.tag)) {
        axion_log_entropy("WRITE_INVALID_OPCODE", cmd.opcode);
        return -EINVAL;
    }
    iowrite8(cmd.opcode, bar_addr + 0x0000);
    iowrite8(cmd.tag, bar_addr + 0x0001);
    memcpy_toio(bar_addr + 0x1000, &cmd.operand, sizeof(cmd.operand));
    iowrite8(1, bar_addr + 0x3000);
    if (cmd.opcode == 0x21) { // T81_MATMUL
        GaiaRequest req = { .tbin = (uint8_t*)&cmd.operand, .tbin_len = sizeof(cmd.operand), .intent = GAIA_T729_DOT };
        GaiaResponse res = gaia_handle_request(req);
        memcpy_toio(bar_addr + 0x2000, res.updated_macro, sizeof(uint32_t));
        axion_log_entropy("WRITE_T81_MATMUL", res.entropy_delta);
    }
    axion_log_entropy("WRITE_SUCCESS", cmd.opcode);
    pr_info("hvm: Write completed (opcode: 0x%02X)\n", cmd.opcode);
    return count;
}

static ssize_t hvm_read(struct file *file, char __user *buf, size_t count, loff_t *ppos) {
    uint8_t status = ioread8(bar_addr + 0x3001);
    if (status != 1) {
        axion_log_entropy("READ_NOT_READY", status);
        return -EAGAIN;
    }
    uint32_t result;
    memcpy_fromio(&result, bar_addr + 0x2000, sizeof(result));
    if (copy_to_user(buf, &result, sizeof(result))) {
        axion_log_entropy("READ_COPY_FAIL", 0);
        return -EFAULT;
    }
    axion_log_entropy("READ_SUCCESS", result & 0xFF);
    pr_info("hvm: Read result successful\n");
    return sizeof(result);
}

static long hvm_ioctl(struct file *file, unsigned int cmd, unsigned long arg) {
    uint8_t status;
    switch (cmd) {
    case HVM_IOCTL_RESET:
        iowrite8(0, bar_addr + 0x3000);
        axion_log_entropy("IOCTL_RESET", 0);
        pr_info("hvm: Device reset via IOCTL\n");
        break;
    case HVM_IOCTL_STATUS:
        status = ioread8(bar_addr + 0x3001);
        if (copy_to_user((uint8_t __user *)arg, &status, sizeof(status))) {
            axion_log_entropy("IOCTL_STATUS_FAIL", 0);
            return -EFAULT;
        }
        axion_log_entropy("IOCTL_STATUS", status);
        pr_info("hvm: IOCTL status query, status: %d\n", status);
        break;
    case HVM_IOCTL_EXEC:
        return hvm_write(file, (const char __user *)arg, sizeof(struct hvm_exec_cmd), NULL);
    default:
        axion_log_entropy("IOCTL_UNKNOWN", cmd);
        pr_err("hvm: Unknown IOCTL command\n");
        return -EINVAL;
    }
    return 0;
}

static struct file_operations fops = {
    .owner = THIS_MODULE,
    .open = hvm_open,
    .release = hvm_release,
    .read = hvm_read,
    .write = hvm_write,
    .unlocked_ioctl = hvm_ioctl,
};

static u32 debugfs_state_read(void *data, u64 *val) {
    *val = ioread8(bar_addr + 0x3001);
    axion_log_entropy("DEBUGFS_STATE_READ", *val);
    return 0;
}
DEFINE_DEBUGFS_ATTRIBUTE(debugfs_state_fops, debugfs_state_read, NULL, "%llu\n");

static struct pci_driver hvm_driver = {
    .name = "hanoivm",
    .id_table = hvm_ids,
    .probe = hvm_probe,
    .remove = hvm_remove,
};

static int __init hvm_init(void) {
    int ret = pci_register_driver(&hvm_driver);
    if (ret < 0) {
        pr_err("hvm: PCI driver registration failed\n");
        axion_log_entropy("INIT_FAIL", ret);
    } else {
        debugfs_create_file("state", 0444, debugfs_dir, NULL, &debugfs_state_fops);
        axion_log_entropy("INIT_SUCCESS", 0);
        pr_info("hvm: PCI driver registered successfully\n");
    }
    return ret;
}

static void __exit hvm_exit(void) {
    debugfs_remove_recursive(debugfs_dir);
    pci_unregister_driver(&hvm_driver);
    axion_log_entropy("EXIT_DRIVER", 0);
    pr_info("hvm: PCI driver unregistered\n");
}

module_init(hvm_init);
module_exit(hvm_exit);
MODULE_LICENSE("MIT");
MODULE_AUTHOR("copyl-sys");
MODULE_DESCRIPTION("HanoiVM PCIe Ternary Accelerator Driver with IOCTL Support");
