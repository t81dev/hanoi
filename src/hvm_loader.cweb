@* hvm_loader.cweb | Bytecode Loader for HanoiVM — Enhanced with Config, Safety, and Axion Awareness (v0.9.3)

This module loads `.hvm` binary files into memory, validates T81/T243/T729 opcodes, checks type-aware operands,
computes metadata hashes, generates AI session fingerprints, and supports ternary tag validation.
It integrates with `hanoivm_fsm.v` via PCIe/M.2, `axion-ai.cweb` via ioctls/debugfs,
`hanoivm-core.cweb` and `hanoivm-runtime.cweb` via FFI, `hanoivm_vm.cweb’`s execution core,
`hanoivm_firmware.cweb’`s firmware, `axion-gaia-interface.cweb’`s GPU dispatch,
`axion_api.cweb’`s recursion optimization, `axion_gpu_serializer.cweb’`s GPU serialization,
`bootstrap.cweb’`s bootstrap sequence, `config.cweb’`s configuration, `cuda_handle_request.cweb’`s CUDA backend,
`gaia_handle_request.cweb’`s ROCm backend, `disasm_hvm.cweb’`s type-aware disassembly,
`disassembler.cweb’`s advanced disassembly, `emit_hvm.cweb’`s bytecode emission,
`entropy_monitor.cweb’`s entropy monitoring, `ghidra_hvm_plugin.cweb’`s Ghidra integration,
`hanoivm-test.cweb’`s unit testing, `hanoivm.cweb’`s CLI execution,
`hvm_assembler.cweb’`s bytecode assembly, `t81lang_interpreter.cweb’`s interpretation,
and `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Validation for T81/T243/T729 opcodes (`T81_MATMUL`, `RECURSE_FACT`).
- Type-aware operand checking (`T81_TAG_VECTOR`, `T81_TAG_TENSOR`).
- SHA-256 metadata hashing for bytecode integrity.
- AI session fingerprinting for Axion integration.
- Ternary tag validation (`T81_TAG_BIGINT`, `T81_TAG_MATRIX`).
- Entropy logging via `axion-ai.cweb’`s debugfs and `entropy_monitor.cweb`.
- Session memory integration with `axion-ai.cweb’`s `axion_session_t`.
- FFI interface to `hanoivm-core.cweb` (Rust) and `hanoivm-runtime.cweb` (C).
- Secure validation for bytecode integrity, opcodes, and operands.
- JSON visualization for loaded bytecode.
- Support for `.hvm` test bytecode (`T81_MATMUL` + `TNN_ACCUM`).
- Optimized for user-space loading.

@c
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <errno.h>
#include <openssl/sha.h>
#include "config.h"
#include "hvm_loader.h"
#include "axion-ai.h"
#include "hanoivm_core.h"
#include "hanoivm_runtime.h"
#include "disasm_hvm.h"

#define MAX_BYTECODE_SIZE 65536
#define T81_TAG_BIGINT 0x01
#define T81_TAG_MATRIX 0x04
#define T81_TAG_VECTOR 0x05

@<Global Variables@>=
uint8_t* hvm_code = NULL;
size_t hvm_code_size = 0;
static char session_id[32];

@<Opcode Validation Table@>=
typedef struct {
    uint8_t opcode;
    const char* name;
    uint8_t operand_count;
    uint8_t operand_type; // T81_TAG_* or 0
} OpcodeInfo;

static OpcodeInfo opcodes[] = {
    { 0x01, "PUSH", 1, T81_TAG_BIGINT },
    { 0x03, "ADD", 0, 0 },
    { 0x21, "T81_MATMUL", 2, T81_TAG_MATRIX },
    { 0x30, "RECURSE_FACT", 1, T81_TAG_BIGINT },
    { 0xFF, "HALT", 0, 0 },
    { 0x00, NULL, 0, 0 }
};

@<Metadata Structure@>=
typedef struct {
    uint8_t hash[SHA256_DIGEST_LENGTH];
    char fingerprint[64];
    uint32_t opcode_count;
    uint32_t tag_count;
} BytecodeMetadata;

static BytecodeMetadata metadata;

@<Validate Bytecode@>=
static int validate_bytecode(uint8_t* code, size_t size) {
    size_t i = 0;
    metadata.opcode_count = 0;
    metadata.tag_count = 0;
    while (i < size) {
        uint8_t opcode = code[i++];
        extern int rust_validate_opcode(uint8_t opcode);
        int valid = 0;
        for (int j = 0; opcodes[j].name; j++) {
            if (opcodes[j].opcode == opcode) {
                valid = 1;
                metadata.opcode_count++;
                if (opcodes[j].operand_count > 0) {
                    if (i + 1 > size) {
                        axion_log_entropy("INVALID_OPERAND", opcode);
                        return 0;
                    }
                    uint8_t tag = code[i++];
                    if (tag != opcodes[j].operand_type && opcodes[j].operand_type != 0) {
                        axion_log_entropy("INVALID_TAG", tag);
                        return 0;
                    }
                    metadata.tag_count++;
                    i += opcodes[j].operand_count * 4;
                }
                break;
            }
        }
        if (!valid && !rust_validate_opcode(opcode)) {
            axion_log_entropy("UNKNOWN_OPCODE", opcode);
            return 0;
        }
    }
    axion_log_entropy("VALIDATE_BYTECODE", metadata.opcode_count);
    return 1;
}

@<Compute Metadata Hash@>=
static void compute_metadata_hash(uint8_t* code, size_t size) {
    SHA256(code, size, metadata.hash);
    char hash_str[SHA256_DIGEST_LENGTH * 2 + 1];
    for (int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
        sprintf(hash_str + i * 2, "%02x", metadata.hash[i]);
    }
    snprintf(metadata.fingerprint, sizeof(metadata.fingerprint), "HVM-%s", hash_str);
    axion_log_entropy("COMPUTE_HASH", metadata.hash[0]);
}

@<Load Bytecode Function@>=
int load_hvm(const char* path, size_t* size_out) {
    FILE* f = fopen(path, "rb");
    if (!f) {
        perror("[ERROR] fopen");
        axion_log_entropy("FOPEN_FAIL", errno);
        return 0;
    }

    fseek(f, 0, SEEK_END);
    hvm_code_size = ftell(f);
    rewind(f);

    if (hvm_code_size > MAX_BYTECODE_SIZE) {
        fprintf(stderr, "[ERROR] Bytecode exceeds max size (%zu > %d)\n", hvm_code_size, MAX_BYTECODE_SIZE);
        axion_log_entropy("SIZE_EXCEEDED", hvm_code_size & 0xFF);
        fclose(f);
        return 0;
    }

    hvm_code = malloc(hvm_code_size);
    if (!hvm_code) {
        perror("[ERROR] malloc");
        axion_log_entropy("MALLOC_FAIL", errno);
        fclose(f);
        return 0;
    }

    if (fread(hvm_code, 1, hvm_code_size, f) != hvm_code_size) {
        perror("[ERROR] fread");
        axion_log_entropy("FREAD_FAIL", errno);
        free(hvm_code);
        hvm_code = NULL;
        hvm_code_size = 0;
        fclose(f);
        return 0;
    }
    fclose(f);

    if (!validate_bytecode(hvm_code, hvm_code_size)) {
        fprintf(stderr, "[ERROR] Bytecode validation failed\n");
        free(hvm_code);
        hvm_code = NULL;
        hvm_code_size = 0;
        return 0;
    }

    compute_metadata_hash(hvm_code, hvm_code_size);
    snprintf(session_id, sizeof(session_id), "%s-%016lx", metadata.fingerprint, (uint64_t)path);
    axion_register_session(session_id);

    if (size_out) *size_out = hvm_code_size;
#if ENABLE_DEBUG_MODE
    printf("[LOADER] Loaded %s (%zu bytes, hash: %s)\n", path, hvm_code_size, metadata.fingerprint);
#endif
    axion_log_entropy("LOAD_SUCCESS", hvm_code_size & 0xFF);
    return 1;
}

@<Cleanup Function@>=
void free_hvm(void) {
    if (hvm_code) {
        free(hvm_code);
        hvm_code = NULL;
        hvm_code_size = 0;
        memset(&metadata, 0, sizeof(metadata));
        axion_log_entropy("FREE_BYTECODE", 0);
    }
}

@<Visualization Hook@>=
void visualize_bytecode(char* out_json, size_t max_len) {
    size_t len = snprintf(out_json, max_len,
        "{\"session\": \"%s\", \"size\": %zu, \"hash\": \"", session_id, hvm_code_size);
    for (int i = 0; i < SHA256_DIGEST_LENGTH && len < max_len; i++) {
        len += snprintf(out_json + len, max_len - len, "%02x", metadata.hash[i]);
    }
    len += snprintf(out_json + len, max_len - len, "\", \"opcodes\": [");
    size_t i = 0;
    int first = 1;
    while (i < hvm_code_size && len < max_len) {
        if (!first) len += snprintf(out_json + len, max_len - len, ",");
        uint8_t opcode = hvm_code[i];
        for (int j = 0; opcodes[j].name; j++) {
            if (opcodes[j].opcode == opcode) {
                len += snprintf(out_json + len, max_len - len, "{\"name\": \"%s\", \"addr\": %zu}",
                                opcodes[j].name, i);
                i += 1 + (opcodes[j].operand_count * 5);
                first = 0;
                break;
            }
        }
        if (!opcodes[i].name) i++; // Skip unknown opcodes
    }
    len += snprintf(out_json + len, max_len - len, "]}");
    axion_log_entropy("VISUALIZE_BYTECODE", len & 0xFF);
}

@<Integration Hook@>=
void integrate_loader(void) {
    char json[512];
    visualize_bytecode(json, sizeof(json));
    GaiaRequest req = { .tbin = (uint8_t*)json, .tbin_len = strlen(json), .intent = GAIA_T729_DOT };
    GaiaResponse res = gaia_handle_request(req);
    axion_log_entropy("INTEGRATE_GAIA", res.symbolic_status);
#if AUTO_DISASSEMBLE_ON_LOAD
    GhidraContext gctx = { .base_addr = 0x1000 };
    FILE* f = fopen("/tmp/temp.hvm", "wb");
    fwrite(hvm_code, hvm_code_size, 1, f);
    fclose(f);
    disassemble_hvm_binary("/tmp/temp.hvm", &gctx);
#endif
}

@<Header for External Use@>=
#ifndef HVM_LOADER_H
#define HVM_LOADER_H

#include <stdint.h>
#include <stddef.h>

extern uint8_t* hvm_code;
extern size_t hvm_code_size;

int load_hvm(const char* path, size_t* size_out);
void free_hvm(void);
void visualize_bytecode(char* out_json, size_t max_len);
void integrate_loader(void);

#endif
