@* hvm_promotion.cweb | Recursive Stack Promotion/Demotion Logic for HanoiVM (v0.9.3)

This module handles stack promotion and demotion for HanoiVM, supporting T81/T243/T729 modes,
type-aware operands, session-aware entropy logging, and GPU synchronization.
It integrates with `hanoivm_fsm.v` via PCIe/M.2, `axion-ai.cweb` via debugfs,
`hanoivm-core.cweb` and `hanoivm-runtime.cweb` via FFI, `hanoivm_vm.cweb’`s execution core,
`hanoivm_firmware.cweb’`s firmware, `axion-gaia-interface.cweb’`s GPU dispatch,
`axion_api.cweb’`s recursion optimization, `axion_gpu_serializer.cweb’`s GPU serialization,
`bootstrap.cweb’`s bootstrap sequence, `config.cweb’`s configuration,
`cuda_handle_request.cweb’`s CUDA backend, `gaia_handle_request.cweb’`s ROCm backend,
`disasm_hvm.cweb’`s type-aware disassembly, `disassembler.cweb’`s advanced disassembly,
`emit_hvm.cweb’`s bytecode emission, `entropy_monitor.cweb’`s entropy monitoring,
`ghidra_hvm_plugin.cweb’`s Ghidra integration, `hanoivm-test.cweb’`s unit testing,
`hanoivm.cweb’`s CLI execution, `hvm_assembler.cweb’`s bytecode assembly,
`t81lang_interpreter.cweb’`s interpretation, `hvm_loader.cweb’`s bytecode loading,
`hvm_pcie_driver.c’`s PCIe access, and `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Support for T81/T243/T729 opcodes (`T81_MATMUL`, `RECURSE_FACT`).
- Type-aware operand handling (`T81_TAG_VECTOR`, `T81_TAG_TENSOR`).
- Session management via `axion-ai.cweb’`s `axion_session_t`.
- Entropy logging via `axion-ai.cweb’`s debugfs and `entropy_monitor.cweb`.
- GPU synchronization with `axion-gaia-interface.cweb` for T729 mode.
- FFI interface to `hanoivm-core.cweb` (Rust) and `hanoivm-runtime.cweb` (C).
- Secure validation for mode transitions and opcodes.
- JSON visualization for mode transitions.
- Support for `.hvm` test bytecode (`T81_MATMUL` + `TNN_ACCUM`).
- Optimized for recursive stack management.

@c
#include "hvm_context.h"
#include "axion_signal.h"
#include "log_trace.h"
#include "axion-ai.h"
#include "hanoivm_core.h"
#include "hanoivm_runtime.h"
#include "axion-gaia-interface.h"
#include "disasm_hvm.h"

#define OP_PROMOTE_T243   0xF0
#define OP_PROMOTE_T729   0xF1
#define OP_DEMOTE_T243    0xF2
#define OP_DEMOTE_T81     0xF3
#define THRESHOLD_T243    10
#define THRESHOLD_T729    20
#define T243_SAFE_ZONE    5
#define T81_SAFE_ZONE     2
#define T81_TAG_BIGINT    0x01
#define T81_TAG_MATRIX    0x04
#define T81_TAG_VECTOR    0x05

@<Global Variables@>=
static char session_id[32];

@<Mode Definitions@>=
typedef enum {
    MODE_T81 = 0,
    MODE_T243,
    MODE_T729
} StackMode;

@<Opcode Validation Table@>=
typedef struct {
    uint8_t opcode;
    const char* name;
    uint8_t mode; // Expected StackMode
} OpcodeInfo;

static OpcodeInfo opcodes[] = {
    { 0x01, "PUSH", MODE_T81 },
    { 0x21, "T81_MATMUL", MODE_T729 },
    { 0x30, "RECURSE_FACT", MODE_T243 },
    { OP_PROMOTE_T243, "PROMOTE_T243", MODE_T243 },
    { OP_PROMOTE_T729, "PROMOTE_T729", MODE_T729 },
    { OP_DEMOTE_T243, "DEMOTE_T243", MODE_T243 },
    { OP_DEMOTE_T81, "DEMOTE_T81", MODE_T81 },
    { 0xFF, "HALT", MODE_T81 },
    { 0x00, NULL, 0 }
};

@<Helper Functions@>=
static int tensor_op_detected(HVMContext* ctx) {
    extern int rust_check_tensor_op(uint8_t opcode);
    uint8_t opcode = ctx->code[ctx->ip];
    for (int i = 0; opcodes[i].name; i++) {
        if (opcodes[i].opcode == opcode && opcodes[i].mode == MODE_T729) {
            axion_log_entropy("TENSOR_OP_DETECTED", opcode);
            return 1;
        }
    }
    if (rust_check_tensor_op(opcode)) {
        axion_log_entropy("RUST_TENSOR_OP", opcode);
        return 1;
    }
    return 0;
}

@<Promotion Macros@>=
#define PROMOTE_T243(ctx) do { \
    if ((ctx)->mode == MODE_T81 && (ctx)->call_depth > THRESHOLD_T243) { \
        (ctx)->mode = MODE_T243; \
        (ctx)->mode_flags |= MODE_PROMOTABLE; \
        axion_signal(OP_PROMOTE_T243); \
        axion_log_entropy("PROMOTE_T243", (ctx)->call_depth); \
        log_trace("PROMOTE_T243: T81 → T243"); \
    } \
} while (0)

#define PROMOTE_T729(ctx) do { \
    if ((ctx)->mode == MODE_T243 && tensor_op_detected(ctx)) { \
        (ctx)->mode = MODE_T729; \
        GaiaRequest req = { .tbin = (ctx)->code + (ctx)->ip, .tbin_len = 1, .intent = GAIA_T729_DOT }; \
        GaiaResponse res = gaia_handle_request(req); \
        axion_signal(OP_PROMOTE_T729); \
        axion_log_entropy("PROMOTE_T729", res.entropy_delta); \
        log_trace("PROMOTE_T729: T243 → T729"); \
    } \
} while (0)

#define DEMOTE_STACK(ctx) do { \
    if ((ctx)->mode == MODE_T729 && (ctx)->call_depth < T243_SAFE_ZONE) { \
        (ctx)->mode = MODE_T243; \
        axion_signal(OP_DEMOTE_T243); \
        axion_log_entropy("DEMOTE_T243", (ctx)->call_depth); \
        log_trace("DEMOTE_T243: T729 → T243"); \
    } else if ((ctx)->mode == MODE_T243 && (ctx)->call_depth < T81_SAFE_ZONE) { \
        (ctx)->mode = MODE_T81; \
        axion_signal(OP_DEMOTE_T81); \
        axion_log_entropy("DEMOTE_T81", (ctx)->call_depth); \
        log_trace("DEMOTE_T81: T243 → T81"); \
    } \
} while (0)

@<Trace Macro@>=
#define TRACE_MODE(ctx) do { \
    log_trace("MODE: %s", get_mode_label((ctx)->mode)); \
    axion_log_mode(ctx); \
    axion_log_entropy("TRACE_MODE", (ctx)->mode); \
} while (0)

@<Promotion Functions@>=
void promote_to_t243(HVMContext* ctx) {
    PROMOTE_T243(ctx);
}

void promote_to_t729(HVMContext* ctx) {
    PROMOTE_T729(ctx);
}

void demote_stack(HVMContext* ctx) {
    DEMOTE_STACK(ctx);
}

const char* get_mode_label(StackMode mode) {
    switch (mode) {
        case MODE_T81: return "T81";
        case MODE_T243: return "T243";
        case MODE_T729: return "T729";
        default: return "UNKNOWN";
    }
}

@<Instruction Handler@>=
void execute_instruction(HVMContext* ctx, T81Opcode op) {
    TRACE_MODE(ctx);
    extern int rust_validate_opcode(uint8_t opcode);
    if (!rust_validate_opcode(op) && !validate_opcode(op)) {
        axion_log_entropy("INVALID_OPCODE", op);
        ctx->halted = 1;
        return;
    }

    switch (op) {
    case OP_PROMOTE_T243:
        promote_to_t243(ctx);
        break;
    case OP_PROMOTE_T729:
        promote_to_t729(ctx);
        break;
    case OP_DEMOTE_T243:
    case OP_DEMOTE_T81:
        demote_stack(ctx);
        break;
    default:
        execute_promotion(ctx);
        dispatch_opcode(ctx, op);
        break;
    }
    axion_log_entropy("EXECUTE_INSTRUCTION", op);
}

@<Opcode Validation@>=
static int validate_opcode(T81Opcode op) {
    for (int i = 0; opcodes[i].name; i++) {
        if (opcodes[i].opcode == op && opcodes[i].mode <= ctx.mode) {
            return 1;
        }
    }
    return 0;
}

@<Promotion Logic@>=
void execute_promotion(HVMContext* ctx) {
    PROMOTE_T243(ctx);
    PROMOTE_T729(ctx);
    DEMOTE_STACK(ctx);
    TRACE_MODE(ctx);
}

@<Visualization Hook@>=
void visualize_mode_transition(HVMContext* ctx, char* out_json, size_t max_len) {
    size_t len = snprintf(out_json, max_len,
        "{\"session\": \"%s\", \"mode\": \"%s\", \"call_depth\": %d, \"ip\": %zu}",
        session_id, get_mode_label(ctx->mode), ctx->call_depth, ctx->ip);
    axion_log_entropy("VISUALIZE_MODE", len & 0xFF);
}

@<Integration Hook@>=
void integrate_promotion(HVMContext* ctx) {
    char json[256];
    visualize_mode_transition(ctx, json, sizeof(json));
    GaiaRequest req = { .tbin = (uint8_t*)json, .tbin_len = strlen(json), .intent = GAIA_T729_DOT };
    GaiaResponse res = gaia_handle_request(req);
    axion_log_entropy("INTEGRATE_PROMOTION", res.symbolic_status);
}

@<Main Function@>=
void promotion_init(const char* hvm_file, HVMContext* ctx) {
    snprintf(session_id, sizeof(session_id), "PROMO-%016lx", (uint64_t)hvm_file);
    axion_register_session(session_id);
    ctx->mode = MODE_T81;
    ctx->call_depth = 0;
    axion_log_entropy("PROMOTION_INIT", 0);
}

@<Header for External Use@>=
#ifndef HVM_PROMOTION_H
#define HVM_PROMOTION_H

#include "hvm_context.h"

void promote_to_t243(HVMContext* ctx);
void promote_to_t729(HVMContext* ctx);
void demote_stack(HVMContext* ctx);
void execute_instruction(HVMContext* ctx, T81Opcode op);
void execute_promotion(HVMContext* ctx);
void trace_mode_change(HVMContext* ctx);
const char* get_mode_label(StackMode mode);
void promotion_init(const char* hvm_file, HVMContext* ctx);
void visualize_mode_transition(HVMContext* ctx, char* out_json, size_t max_len);
void integrate_promotion(HVMContext* ctx);

#endif
