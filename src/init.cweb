@* init.cweb | HanoiVM Initialization Module (v0.9.3)

This module initializes the HanoiVM runtime environment, loading configuration,
performing environment checks, and preparing stack, AI, GPU, and PCIe components.
It integrates with `hanoivm_fsm.v` via PCIe/M.2, `axion-ai.cweb` via debugfs,
`hanoivm-core.cweb` and `hanoivm-runtime.cweb` via FFI, `hanoivm_vm.cweb’`s execution core,
`hanoivm_firmware.cweb’`s firmware, `axion-gaia-interface.cweb’`s GPU dispatch,
`axion_api.cweb’`s recursion optimization, `axion_gpu_serializer.cweb’`s GPU serialization,
`bootstrap.cweb’`s bootstrap sequence, `config.cweb’`s configuration,
`cuda_handle_request.cweb’`s CUDA backend, `gaia_handle_request.cweb’`s ROCm backend,
`disasm_hvm.cweb’`s type-aware disassembly, `disassembler.cweb’`s advanced disassembly,
`emit_hvm.cweb’`s bytecode emission, `entropy_monitor.cweb’`s entropy monitoring,
`ghidra_hvm_plugin.cweb’`s Ghidra integration, `hanoivm-test.cweb’`s unit testing,
`hanoivm.cweb’`s CLI execution, `hvm_assembler.cweb’`s bytecode assembly,
`t81lang_interpreter.cweb’`s interpretation, `hvm_loader.cweb’`s bytecode loading,
`hvm_pcie_driver.c’`s PCIe access, `hvm_promotion.cweb’`s stack promotion,
and `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Initialization of T81/T243/T729 opcode tables and type-aware operands.
- Session management via `axion-ai.cweb’`s `axion_session_t`.
- Entropy logging via `axion-ai.cweb’`s debugfs and `entropy_monitor.cweb`.
- GPU and PCIe synchronization with `axion-gaia-interface.cweb` and `hvm_pcie_driver.c`.
- FFI interface to `hanoivm-core.cweb` (Rust) and `hanoivm-runtime.cweb` (C).
- Secure validation for configuration and hardware availability.
- JSON visualization for initialization status.
- Support for `.hvm` test bytecode (`T81_MATMUL` + `TNN_ACCUM`).
- Optimized for runtime initialization.

@c
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "config.h"
#include "t81_stack.h"
#include "axion_api.h"
#include "gpu_probe.h"
#include "log_trace.h"
#include "hanoivm_vm.h"
#include "axion-ai.h"
#include "hanoivm_core.h"
#include "hanoivm_runtime.h"
#include "axion-gaia-interface.h"
#include "hvm_promotion.h"
#include "hvm_loader.h"
#include "hvm_pcie_driver.h"

#define T81_TAG_BIGINT    0x01
#define T81_TAG_MATRIX    0x04
#define T81_TAG_VECTOR    0x05

@<Global Variables@>=
static char session_id[32];
static bool pcie_initialized = false;

@<Configuration Structure@>=
typedef struct {
    bool detect_gpu;
    bool enable_gpu_support;
    bool detect_pcie_accelerator;
    bool enable_pcie_support;
    bool enable_ai_log_feedback;
    int ai_optimization_mode;
    bool enable_stack_promotion;
} HanoiVMConfig;

@<Opcode Table@>=
typedef struct {
    uint8_t opcode;
    const char* name;
    uint8_t operand_type; // T81_TAG_* or 0
} OpcodeInfo;

static OpcodeInfo opcodes[] = {
    { 0x01, "PUSH", T81_TAG_BIGINT },
    { 0x21, "T81_MATMUL", T81_TAG_MATRIX },
    { 0x30, "RECURSE_FACT", T81_TAG_BIGINT },
    { 0xFF, "HALT", 0 },
    { 0x00, NULL, 0 }
};

@<Helper Functions@>=
static bool pcie_probe_available(void) {
    int fd = open("/dev/hvm0", O_RDWR);
    if (fd < 0) {
        axion_log_entropy("PCIE_PROBE_FAIL", errno);
        return false;
    }
    uint8_t status;
    if (ioctl(fd, HVM_IOCTL_STATUS, &status) < 0) {
        axion_log_entropy("PCIE_STATUS_FAIL", errno);
        close(fd);
        return false;
    }
    close(fd);
    axion_log_entropy("PCIE_PROBE_SUCCESS", status);
    return true;
}

static void init_opcode_table(void) {
    extern int rust_init_opcodes(void);
    if (rust_init_opcodes()) {
        axion_log_entropy("RUST_OPCODE_INIT", 0);
    }
    for (int i = 0; opcodes[i].name; i++) {
        log_trace("Initialized opcode: %s (0x%02X)", opcodes[i].name, opcodes[i].opcode);
    }
    axion_log_entropy("OPCODE_TABLE_INIT", 0);
}

@<Initialization Function@>=
void hanoi_init(HanoiVMConfig* cfg) {
    log_info("[HVM Init] Starting initialization sequence...");
    snprintf(session_id, sizeof(session_id), "INIT-%016lx", (uint64_t)cfg);
    axion_register_session(session_id);

    // Validate configuration
    if (!cfg) {
        log_error("[HVM Init] Invalid configuration provided.");
        axion_log_entropy("CONFIG_INVALID", 0);
        exit(1);
    }

    // Probe GPU
    if (cfg->detect_gpu) {
        if (!gpu_probe_available()) {
            log_warn("[HVM Init] No compatible GPU found. Disabling GPU support.");
            cfg->enable_gpu_support = false;
        } else {
            GaiaRequest req = { .tbin = NULL, .tbin_len = 0, .intent = GAIA_INIT };
            GaiaResponse res = gaia_handle_request(req);
            log_info("[HVM Init] Compatible GPU detected (status: %d).", res.symbolic_status);
            axion_log_entropy("GPU_PROBE_SUCCESS", res.entropy_delta);
        }
    }

    // Probe PCIe accelerator
    if (cfg->detect_pcie_accelerator) {
        if (!pcie_probe_available()) {
            log_warn("[HVM Init] No PCIe accelerator found. Disabling PCIe support.");
            cfg->enable_pcie_support = false;
        } else {
            pcie_initialized = true;
            log_info("[HVM Init] PCIe accelerator detected.");
            axion_log_entropy("PCIE_INIT_SUCCESS", 0);
        }
    }

    // Initialize Axion AI
    if (cfg->enable_ai_log_feedback) {
        axion_init(cfg->ai_optimization_mode);
        log_info("[HVM Init] Axion AI kernel initialized.");
        axion_log_entropy("AXION_INIT", cfg->ai_optimization_mode);
    }

    // Initialize ternary stack
    init_stack();
    log_info("[HVM Init] Ternary stack initialized.");
    axion_log_entropy("STACK_INIT", 0);

    // Initialize stack promotion
    if (cfg->enable_stack_promotion) {
        HVMContext ctx = {0};
        promotion_init("init", &ctx);
        log_info("[HVM Init] Stack promotion initialized.");
        axion_log_entropy("PROMOTION_INIT", 0);
    }

    // Initialize opcode table
    init_opcode_table();
}

@<Print Configuration@>=
void print_config(HanoiVMConfig* cfg) {
    log_info("[HVM Config] GPU Support: %s", cfg->enable_gpu_support ? "Enabled" : "Disabled");
    log_info("[HVM Config] PCIe Support: %s", cfg->enable_pcie_support ? "Enabled" : "Disabled");
    log_info("[HVM Config] AI Feedback: %s", cfg->enable_ai_log_feedback ? "Enabled" : "Disabled");
    log_info("[HVM Config] AI Mode: %d", cfg->ai_optimization_mode);
    log_info("[HVM Config] Stack Promotion: %s", cfg->enable_stack_promotion ? "Enabled" : "Disabled");
    axion_log_entropy("CONFIG_PRINT", 0);
}

@<Visualization Hook@>=
void visualize_init_state(HanoiVMConfig* cfg, char* out_json, size_t max_len) {
    size_t len = snprintf(out_json, max_len,
        "{\"session\": \"%s\", \"gpu_support\": %s, \"pcie_support\": %s, \"ai_feedback\": %s, \"ai_mode\": %d, \"stack_promotion\": %s}",
        session_id,
        cfg->enable_gpu_support ? "true" : "false",
        cfg->enable_pcie_support ? "true" : "false",
        cfg->enable_ai_log_feedback ? "true" : "false",
        cfg->ai_optimization_mode,
        cfg->enable_stack_promotion ? "true" : "false");
    axion_log_entropy("VISUALIZE_INIT", len & 0xFF);
}

@<Integration Hook@>=
void integrate_init(HanoiVMConfig* cfg) {
    char json[256];
    visualize_init_state(cfg, json, sizeof(json));
    GaiaRequest req = { .tbin = (uint8_t*)json, .tbin_len = strlen(json), .intent = GAIA_INIT };
    GaiaResponse res = gaia_handle_request(req);
    axion_log_entropy("INTEGRATE_INIT", res.symbolic_status);
    if (pcie_initialized) {
        struct hvm_exec_cmd cmd = { .opcode = 0xFF, .tag = 0, .operand = 0 }; // HALT for init
        hvm_write(NULL, (char*)&cmd, sizeof(cmd), NULL);
    }
}

@<Cleanup Function@>=
void hanoi_cleanup(void) {
    if (pcie_initialized) {
        int fd = open("/dev/hvm0", O_RDWR);
        if (fd >= 0) {
            ioctl(fd, HVM_IOCTL_RESET, NULL);
            close(fd);
            axion_log_entropy("PCIE_CLEANUP", 0);
        }
    }
    axion_cleanup();
    free_stack();
    axion_log_entropy("CLEANUP_COMPLETE", 0);
    log_info("[HVM Cleanup] Runtime environment cleaned up.");
}

@<Header Declarations@>=
@h
#ifndef HANOI_INIT_H
#define HANOI_INIT_H

#include "config.h"

void hanoi_init(HanoiVMConfig* cfg);
void print_config(HanoiVMConfig* cfg);
void visualize_init_state(HanoiVMConfig* cfg, char* out_json, size_t max_len);
void integrate_init(HanoiVMConfig* cfg);
void hanoi_cleanup(void);

#endif

@* End of init.cweb
