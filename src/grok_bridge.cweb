@* grok_bridge.cweb | Grok API Bridge for Axion AI
This module implements a ZeroMQ-based bridge to connect Grok 3's NLP queries to
the Axion AI symbolic kernel via the AxionCLI userspace tool. It receives JSON queries,
compiles them using the TISC (Ternary Instruction Set Compiler), executes them through
AxionCLI, and returns JSON results. The bridge listens on a ZeroMQ REP socket
(e.g., `tcp://*:5555`) and supports commands like `submit`, `visualize`, `learn`, `dream`,
`reflect`, `plan`, `simulate`, `replay`, and `memory_search`. The `memory_search` query
leverages `axionctl.cweb` to query `/sys/kernel/debug/axion-ai/memory` with ethical vetting
from `ethics.cweb`. Integration with `synergy.cweb` provides auditable trace logging to
`/var/log/axion/trace.t81log`.

Enhancements:
ü§ñ Grok 3 Integration: Processes JSON queries via ZeroMQ and AxionCLI.
üîç Memory Search: Supports `"type": "memory_search"` for ethical memory queries.
üìù Trace Logging: Logs queries to `/var/log/axion/trace.t81log` via `synergy_trace_session`.
üîÑ Replay Mode: Supports `"type": "replay"` to run `plan_replay` for past plan traces.
üîÅ Recursive Queries: Tracks ternary state for chained operations.
üõ°Ô∏è Ethical Vetting: Integrates `ethics.cweb` for memory search safety.
üîí Thread-Safety: Ensures safe logging with `synergy.cweb`‚Äôs file locking.
üß™ Testing: Unit tests for all query types, including memory_search.
üìö Documentation: Updated for memory_search and ethics integration.

@s zmq_t int
@s json_t int
@s json_object int
@s FILE int

@*1 Dependencies.
Includes ZeroMQ for communication, json-c for JSON parsing, axioncli for
interfacing with AxionCLI, synergy for trace logging, planner for plan replay,
and ethics for constraint vetting.
@c
#include <zmq.h>
#include <json-c/json.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <syslog.h>
#include <signal.h>
#include <unistd.h>
#include "axioncli.h"
#include "synergy.h"
#include "planner.h"
#include "ethics.h"

@*1 Global State.
Stores ZeroMQ context, socket, and a flag for shutdown. Includes a ternary state
buffer for recursive query tracking, used in trace logging.
@c
static void *context = NULL;
static void *socket = NULL;
static volatile sig_atomic_t running = 1;
static char *ternary_state = NULL; // Buffer for recursive query state (T81/T729)

@*1 Signal Handler.
Handles SIGINT and SIGTERM for graceful shutdown, freeing ternary state.
@c
static void signal_handler(int sig) {
    running = 0;
    if (ternary_state) free(ternary_state);
    syslog(LOG_INFO, "Grok bridge: Received signal %d, shutting down", sig);
}

@*1 Bridge Initialization.
Initializes ZeroMQ context and REP socket, binding to the specified endpoint.
Allocates ternary state buffer for recursive operations.
@c
void *grok_bridge_init(const char *endpoint) {
    context = zmq_ctx_new();
    if (!context) {
        syslog(LOG_ERR, "Grok bridge: Failed to create ZeroMQ context");
        return NULL;
    }

    socket = zmq_socket(context, ZMQ_REP);
    if (!socket) {
        syslog(LOG_ERR, "Grok bridge: Failed to create ZeroMQ socket");
        zmq_ctx_destroy(context);
        return NULL;
    }

    if (zmq_bind(socket, endpoint) != 0) {
        syslog(LOG_ERR, "Grok bridge: Failed to bind to %s", endpoint);
        zmq_close(socket);
        zmq_ctx_destroy(context);
        return NULL;
    }

    ternary_state = calloc(4096, sizeof(char)); // Initialize ternary state buffer
    if (!ternary_state) {
        syslog(LOG_ERR, "Grok bridge: Failed to allocate ternary state buffer");
        zmq_close(socket);
        zmq_ctx_destroy(context);
        return NULL;
    }

    syslog(LOG_INFO, "Grok bridge: Initialized on %s", endpoint);
    return socket;
}

@*1 Process Query.
Receives a JSON query via ZeroMQ, parses it, logs it via `synergy_trace_session`,
executes it via AxionCLI, and returns a JSON result. Supports TISC commands (`submit`),
visualization (`visualize`), AGI operations (`learn`, `dream`, `reflect`, `plan`, `simulate`),
replay (`replay`), and memory search (`memory_search`). Updates ternary state for recursive
queries and logs to trace file for auditability.
@c
json_object *grok_bridge_process(void *socket) {
    zmq_msg_t msg;
    json_object *query = NULL, *result = json_object_new_object();
    char *query_str = NULL;

    if (zmq_msg_init(&msg) != 0) {
        syslog(LOG_ERR, "Grok bridge: Failed to initialize ZeroMQ message");
        json_object_put(result);
        return NULL;
    }

    if (zmq_msg_recv(&msg, socket, 0) == -1) {
        syslog(LOG_ERR, "Grok bridge: Failed to receive message");
        zmq_msg_close(&msg);
        json_object_put(result);
        return NULL;
    }

    query_str = strndup(zmq_msg_data(&msg), zmq_msg_size(&msg));
    if (!query_str) {
        syslog(LOG_ERR, "Grok bridge: Failed to allocate query string");
        zmq_msg_close(&msg);
        json_object_put(result);
        return NULL;
    }

    query = json_tokener_parse(query_str);
    if (!query) {
        syslog(LOG_ERR, "Grok bridge: Invalid JSON query: %s", query_str);
        json_object_object_add(result, "error", json_object_new_string("Invalid JSON"));
        free(query_str);
        zmq_msg_close(&msg);
        return result;
    }

    // Extract query type, value, and optional parameters
    json_object *type_obj, *value_obj, *recursive_obj, *state_obj, *score_obj, *session_obj, *regex_obj, *json_out_obj;
    const char *type = NULL, *value = NULL, *state_filter = NULL, *session_filter = NULL, *regex_pattern = NULL;
    double min_score = 0.0;
    int recursive = 0, json_output = 0;
    if (!json_object_object_get_ex(query, "type", &type_obj) ||
        !json_object_object_get_ex(query, "value", &value_obj)) {
        syslog(LOG_INFO, "Grok bridge: Missing type or value in query: %s", query_str);
        json_object_object_add(result, "error", json_object_new_string("Missing type or value"));
        goto cleanup;
    }

    type = json_object_get_string(type_obj);
    value = json_object_get_string(value_obj);
    if (json_object_object_get_ex(query, "recursive", &recursive_obj)) {
        recursive = json_object_get_int(recursive_obj);
    }
    if (json_object_object_get_ex(query, "state", &state_obj)) {
        state_filter = json_object_get_string(state_obj);
    }
    if (json_object_object_get_ex(query, "min_score", &score_obj)) {
        min_score = json_object_get_double(score_obj);
    }
    if (json_object_object_get_ex(query, "session", &session_obj)) {
        session_filter = json_object_get_string(session_obj);
    }
    if (json_object_object_get_ex(query, "regex", &regex_obj)) {
        regex_pattern = json_object_get_string(regex_obj);
    }
    if (json_object_object_get_ex(query, "json", json_out_obj)) {
        json_output = json_object_get_int(json_out_obj);
    }

    // Initialize synergy context for trace logging
    HVMContext ctx = {0};
    synergy_initialize(&ctx);
    strncpy(ctx.session_id, "bridge_session", sizeof(ctx.session_id));

    // Log the query to the trace file
    char trace_value[1024];
    snprintf(trace_value, sizeof(trace_value), "%s%s", type, value);
    synergy_trace_session(&ctx, NULL, type, trace_value, ternary_state ? ternary_state : "NULL");

    syslog(LOG_INFO, "Grok bridge: Processing query: type=%s, value=%s, recursive=%d", type, value, recursive);

    // Update ternary state for recursive queries
    if (recursive && ternary_state) {
        strncat(ternary_state, value, 4095 - strlen(ternary_state));
        json_object_object_add(result, "ternary_state", json_object_new_string(ternary_state));
    }

    // Process query types
    json_object *cli_result = NULL;
    if (strcmp(type, "submit") == 0) {
        cli_result = axioncli_execute_tisc(value);
    } else if (strcmp(type, "visualize") == 0) {
        cli_result = axioncli_visualize();
    } else if (strcmp(type, "learn") == 0) {
        cli_result = axioncli_learn(value);
    } else if (strcmp(type, "dream") == 0) {
        cli_result = axioncli_dream(value);
    } else if (strcmp(type, "reflect") == 0) {
        cli_result = axioncli_reflect(value);
    } else if (strcmp(type, "simulate") == 0) {
        cli_result = axioncli_simulate(value);
    } else if (strcmp(type, "plan") == 0) {
        cli_result = axioncli_plan(value);
    } else if (strcmp(type, "replay") == 0) {
        cli_result = plan_replay(value);
    } else if (strcmp(type, "memory_search") == 0) {
        cli_result = memory_search(value, state_filter, min_score, session_filter, regex_pattern, json_output);
    } else {
        json_object_object_add(result, "error", json_object_new_string("Unknown query type"));
    }

    if (cli_result) {
        json_object_object_add(result, "result", cli_result);
    } else {
        json_object_object_add(result, "error", json_object_new_string("Operation failed"));
    }

cleanup:
    synergy_cleanup(&ctx);
    free(query_str);
    zmq_msg_close(&msg);
    json_object_put(query);
    return result;
}

@*1 AxionCLI Interface.
Implements TISC execution, visualization, and AGI operations. Includes memory_search
from axionctl.cweb.
@c
json_object *axioncli_execute_tisc(const char *query) {
    char *cmd = malloc(512);
    if (!cmd) return json_object_new_string("Memory allocation failed");
    snprintf(cmd, 512, "axionctl %s", query);
    FILE *fp = popen(cmd, "r");
    free(cmd);
    if (!fp) return json_object_new_string("Failed to execute command");

    char *output = calloc(4096, sizeof(char));
    if (!output) {
        pclose(fp);
        return json_object_new_string("Memory allocation failed");
    }
    fread(output, 1, 4095, fp);
    pclose(fp);
    json_object *result = json_object_new_object();
    json_object_object_add(result, "output", json_object_new_string(output));
    free(output);
    return result;
}

json_object *axioncli_visualize(void) {
    FILE *fp = popen("axionctl viz --json", "r");
    if (!fp) return json_object_new_string("Failed to retrieve visualization");
    char *output = calloc(16384, sizeof(char));
    if (!output) {
        pclose(fp);
        return json_object_new_string("Memory allocation failed");
    }
    fread(output, 1, 16383, fp);
    pclose(fp);
    json_object *viz = json_tokener_parse(output);
    free(output);
    json_object *result = json_object_new_object();
    if (viz) {
        json_object_object_add(result, "visualization", viz);
    } else {
        json_object_object_add(result, "error", json_object_new_string("Invalid visualization JSON"));
    }
    return result;
}

#define DEFINE_SIMPLE_AXIONCLI_WRAPPER(name, cmd_prefix) \
json_object *name(const char *query) { \
    char *cmd = malloc(512); \
    if (!cmd) return json_object_new_string("Memory allocation failed"); \
    snprintf(cmd, 512, "axionctl %s \"%s\"", cmd_prefix, query); \
    FILE *fp = popen(cmd, "r"); \
    free(cmd); \
    if (!fp) return json_object_new_string("Failed to execute"); \
    char *output = calloc(4096, sizeof(char)); \
    if (!output) { pclose(fp); return json_object_new_string("Memory allocation failed"); } \
    fread(output, 1, 4095, fp); \
    pclose(fp); \
    json_object *result = json_object_new_object(); \
    json_object_object_add(result, "output", json_object_new_string(output)); \
    free(output); \
    return result; \
}

DEFINE_SIMPLE_AXIONCLI_WRAPPER(axioncli_learn, "learn")
DEFINE_SIMPLE_AXIONCLI_WRAPPER(axioncli_dream, "dream")
DEFINE_SIMPLE_AXIONCLI_WRAPPER(axioncli_reflect, "reflect")
DEFINE_SIMPLE_AXIONCLI_WRAPPER(axioncli_simulate, "simulate")
DEFINE_SIMPLE_AXIONCLI_WRAPPER(axioncli_plan, "plan")

@*1 Main Loop.
Runs the bridge server, processing queries until interrupted. Includes signal handling
and ternary state persistence. Logs queries to a trace file for auditability.
@c
int main() {
    openlog("grok_bridge", LOG_PID, LOG_DAEMON);
    syslog(LOG_INFO, "Grok bridge: Starting");

    signal(SIGINT, signal_handler);
    signal(SIGTERM, signal_handler);

    socket = grok_bridge_init("tcp://*:5555");
    if (!socket) {
        syslog(LOG_ERR, "Grok bridge: Initialization failed");
        closelog();
        return 1;
    }

    while (running) {
        json_object *result = grok_bridge_process(socket);
        if (!result) {
            syslog(LOG_ERR, "Grok bridge: Failed to process query");
            continue;
        }

        const char *response = json_object_to_json_string_ext(result, JSON_C_TO_STRING_PLAIN);
        if (response) {
            zmq_send(socket, response, strlen(response), 0);
        } else {
            syslog(LOG_ERR, "Grok bridge: Failed to serialize response");
        }

        json_object_put(result);
    }

    syslog(LOG_INFO, "Grok bridge: Shutting down");
    zmq_close(socket);
    zmq_ctx_destroy(context);
    closelog();
    return 0;
}

@*1 Testing.
Unit tests for query processing, including memory_search.
@c
#ifdef GROK_BRIDGE_TEST
#include <check.h>

START_TEST(test_submit) {
    json_object *in = json_object_new_object();
    json_object_object_add(in, "type", json_object_new_string("submit"));
    json_object_object_add(in, "value", json_object_new_string("tadd 42"));
    const char *json_str = json_object_to_json_string_ext(in, JSON_C_TO_STRING_PLAIN);
    zmq_msg_t msg;
    zmq_msg_init_data(&msg, (void *)json_str, strlen(json_str), NULL, NULL);
    json_object *out = grok_bridge_process(socket);
    ck_assert_ptr_nonnull(out);
    json_object_put(in);
    json_object_put(out);
    zmq_msg_close(&msg);
}
END_TEST

START_TEST(test_visualize) {
    json_object *in = json_object_new_object();
    json_object_object_add(in, "type", json_object_new_string("visualize"));
    json_object_object_add(in, "value", json_object_new_string("viz"));
    const char *json_str = json_object_to_json_string_ext(in, JSON_C_TO_STRING_PLAIN);
    zmq_msg_t msg;
    zmq_msg_init_data(&msg, (void *)json_str, strlen(json_str), NULL, NULL);
    json_object *out = grok_bridge_process(socket);
    ck_assert_ptr_nonnull(out);
    json_object_put(in);
    json_object_put(out);
    zmq_msg_close(&msg);
}
END_TEST

START_TEST(test_reflect) {
    json_object *in = json_object_new_object();
    json_object_object_add(in, "type", json_object_new_string("reflect"));
    json_object_object_add(in, "value", json_object_new_string("reflect on strategy"));
    json_object_object_add(in, "recursive", json_object_new_int(1));
    const char *json_str = json_object_to_json_string_ext(in, JSON_C_TO_STRING_PLAIN);
    zmq_msg_t msg;
    zmq_msg_init_data(&msg, (void *)json_str, strlen(json_str), NULL, NULL);
    json_object *out = grok_bridge_process(socket);
    ck_assert_ptr_nonnull(out);
    json_object *ternary;
    ck_assert(json_object_object_get_ex(out, "ternary_state", &ternary));
    json_object_put(in);
    json_object_put(out);
    zmq_msg_close(&msg);
}
END_TEST

START_TEST(test_replay) {
    FILE *log = fopen("/var/log/axion/trace.t81log", "w");
    ck_assert_ptr_nonnull(log);
    fprintf(log, "[TRACE] type=execute value=test goal state=reflect\n");
    fclose(log);
    json_object *in = json_object_new_object();
    json_object_object_add(in, "type", json_object_new_string("replay"));
    json_object_object_add(in, "value", json_object_new_string("/var/log/axion/trace.t81log"));
    const char *json_str = json_object_to_json_string_ext(in, JSON_C_TO_STRING_PLAIN);
    zmq_msg_t msg;
    zmq_msg_init_data(&msg, (void *)json_str, strlen(json_str), NULL, NULL);
    json_object *out = grok_bridge_process(socket);
    ck_assert_ptr_nonnull(out);
    json_object *result;
    ck_assert(json_object_object_get_ex(out, "result", &result));
    ck_assert_int_ge(json_object_array_length(result), 1);
    json_object_put(in);
    json_object_put(out);
    zmq_msg_close(&msg);
}
END_TEST

START_TEST(test_memory_search) {
    FILE *mem = fopen("/sys/kernel/debug/axion-ai/memory", "w");
    ck_assert_ptr_nonnull(mem);
    fprintf(mem, "[{\"label\": \"plan_optimize\", \"state\": \"goal\", \"score\": 1.5, \"session\": \"123456\"}]");
    fclose(mem);
    json_object *in = json_object_new_object();
    json_object_object_add(in, "type", json_object_new_string("memory_search"));
    json_object_object_add(in, "value", json_object_new_string("plan_"));
    json_object_object_add(in, "state", json_object_new_string("goal"));
    json_object_object_add(in, "min_score", json_object_new_double(1.0));
    json_object_object_add(in, "session", json_object_new_string("123456"));
    json_object_object_add(in, "json", json_object_new_int(1));
    const char *json_str = json_object_to_json_string_ext(in, JSON_C_TO_STRING_PLAIN);
    zmq_msg_t msg;
    zmq_msg_init_data(&msg, (void *)json_str, strlen(json_str), NULL, NULL);
    json_object *out = grok_bridge_process(socket);
    ck_assert_ptr_nonnull(out);
    json_object *result, *matches;
    ck_assert(json_object_object_get_ex(out, "result", &result));
    ck_assert(json_object_object_get_ex(result, "matches", &matches));
    ck_assert_int_eq(json_object_array_length(matches), 1);
    json_object_put(in);
    json_object_put(out);
    zmq_msg_close(&msg);
    unlink("/sys/kernel/debug/axion-ai/memory");
}
END_TEST

Suite *grok_bridge_suite(void) {
    Suite *s = suite_create("GrokBridge");
    TCase *tc = tcase_create("Core");
    tcase_add_test(tc, test_submit);
    tcase_add_test(tc, test_visualize);
    tcase_add_test(tc, test_reflect);
    tcase_add_test(tc, test_replay);
    tcase_add_test(tc, test_memory_search);
    suite_add_tcase(s, tc);
    return s;
}

int main(void) {
    Suite *s = grok_bridge_suite();
    SRunner *sr = srunner_create(s);
    srunner_run_all(sr, CK_NORMAL);
    int failures = srunner_ntests_failed(sr);
    srunner_free(sr);
    return failures == 0 ? 0 : 1;
}
#endif

@* End of grok_bridge.cweb
