@* config.cweb | Centralized Configuration for HanoiVM *@

This file defines the global configuration settings for the HanoiVM project.
All components will read these settings to ensure consistent behavior across the system,
while enabling dynamic AI and hardware-driven optimizations.

---

@<Hardware Configuration@>=
## Hardware Configuration

// PCIe Integration
// Enables or disables PCIe hardware acceleration support in HanoiVM.
// Set to false to disable PCIe support.
#define ENABLE_PCIE_ACCELERATION   true

// GPU Support
// Enables or disables GPU hardware acceleration (if available).
// Set to false to disable GPU support.
#define ENABLE_GPU_SUPPORT         true

// Dynamic Resource Scaling
// Automatically adjusts memory, CPU, and GPU allocation based on detected hardware.
// This setting improves efficiency in resource-constrained or heterogeneous systems.
#define ENABLE_DYNAMIC_RESOURCE_SCALING true

---

@<AI Configuration@>=
## AI Configuration

// AI Optimization Mode
// Controls the optimization strategy used by HanoiVM's AI subsystems.
// Options:
//   "Basic"    - Enables conservative optimizations suitable for general-purpose computing.
//   "Advanced" - Enables aggressive heuristics, predictive execution, and speculative analysis.
#define AI_OPTIMIZATION_MODE       "Advanced"

// Anomaly Detection
// Enables the AI module to monitor execution patterns for anomalies or faults.
// These can include memory leaks, performance dips, or unpredicted behavior.
#define ENABLE_ANOMALY_DETECTION   true

// AI-Driven Log Feedback
// If enabled, the AI can dynamically elevate logging verbosity (e.g., from INFO to DEBUG)
// when unusual patterns or errors are detected, enhancing observability and traceability.
#define ENABLE_AI_LOG_FEEDBACK     true

---

@<Logging Configuration@>=
## Logging Configuration

// Log Level
// Sets the baseline verbosity for log output.
// Options:
//   "DEBUG" - All logs, including verbose diagnostics
//   "INFO"  - General operational info (default)
//   "WARN"  - Warnings only
//   "ERROR" - Only critical errors
#define LOG_LEVEL                  "INFO"

// Log Output Format
// Determines how logs are formatted and emitted.
// Options:
//   "TEXT" - Human-readable text logs
//   "JSON" - Structured logs suitable for parsing
#define LOG_OUTPUT_FORMAT          "TEXT"

// Secure Mode
// If enabled, sensitive runtime logs (e.g., memory addresses, private ops)
// will be redacted and external telemetry will be suppressed.
// Recommended when running in restricted or audit-critical environments.
#define ENABLE_SECURE_MODE         true

---

@<Resource Management@>=
## Resource Management

// Memory Allocation (in MB)
// Specifies the maximum memory HanoiVM is allowed to use.
// This can be overridden by ENABLE_DYNAMIC_RESOURCE_SCALING if needed.
#define MEMORY_ALLOCATION          4096

// CPU Affinity
// Designates which CPU cores are used by the HanoiVM runtime.
// This helps isolate workloads and tune for performance or power savings.
#define CPU_AFFINITY               "0,1,2,3"

// GPU Allocation (in MB)
// Determines how much GPU memory is reserved for HanoiVM GPU acceleration.
// Only applies if ENABLE_GPU_SUPPORT is true.
#define GPU_ALLOCATION             4096

// Runtime Overrides
// If enabled, HanoiVM can accept config overrides from CLI flags or environment variables.
// Example: `--log-level=DEBUG` or `HVM_MODE=T243`
#define ENABLE_RUNTIME_OVERRIDES   true

---

@<Environment Detection@>=
## Environment Detection

// Detect GPU
// Automatically scans for compatible GPU devices and flags ENABLE_GPU_SUPPORT if available.
#define DETECT_GPU                 true

// Detect PCIe Accelerator
// Checks for installed PCIe accelerator hardware and toggles ENABLE_PCIE_ACCELERATION if found.
#define DETECT_PCIE_ACCELERATOR    true

---

@<Global Settings@>=
## Global Settings

// Ternary Logic Mode
// Specifies the default execution mode for HanoiVM's ternary logic system.
// Options:
//   "T81"  - Basic ternary, radix-81 logic
//   "T243" - Intermediate, AI-ready logic with matrix/tensor support
//   "T729" - High-dimensional symbolic execution mode
#define TERNARY_LOGIC_MODE         "T81"

// Adaptive Mode Switching
// Enables automatic promotion/demotion between T81, T243, and T729 based on runtime demands.
// Requires both AI and hardware support. Useful for hybrid symbolic/numeric workflows.
#define ENABLE_ADAPTIVE_MODE_SWITCHING true

// Enable Debug Mode
// Enables verbose diagnostics and developer utilities in runtime and CLI tools.
// Should be disabled in production or secure environments.
#define ENABLE_DEBUG_MODE          true

---

@<Runtime Configuration Parser@>=
## Runtime Configuration Parser

@c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// Define configuration structure
typedef struct {
    bool enable_pcie_acceleration;
    bool enable_gpu_support;
    bool enable_dynamic_resource_scaling;

    char ai_optimization_mode[16];
    bool enable_anomaly_detection;
    bool enable_ai_log_feedback;

    char log_level[8];
    char log_output_format[8];
    bool enable_secure_mode;

    int memory_allocation;
    char cpu_affinity[32];
    int gpu_allocation;
    bool enable_runtime_overrides;

    bool detect_gpu;
    bool detect_pcie_accelerator;

    char ternary_logic_mode[8];
    bool enable_adaptive_mode_switching;
    bool enable_debug_mode;
} HanoiVMConfig;

// Initialize default configuration
HanoiVMConfig default_config() {
    HanoiVMConfig cfg = {
        .enable_pcie_acceleration = ENABLE_PCIE_ACCELERATION,
        .enable_gpu_support = ENABLE_GPU_SUPPORT,
        .enable_dynamic_resource_scaling = ENABLE_DYNAMIC_RESOURCE_SCALING,

        .ai_optimization_mode = AI_OPTIMIZATION_MODE,
        .enable_anomaly_detection = ENABLE_ANOMALY_DETECTION,
        .enable_ai_log_feedback = ENABLE_AI_LOG_FEEDBACK,

        .log_level = LOG_LEVEL,
        .log_output_format = LOG_OUTPUT_FORMAT,
        .enable_secure_mode = ENABLE_SECURE_MODE,

        .memory_allocation = MEMORY_ALLOCATION,
        .cpu_affinity = CPU_AFFINITY,
        .gpu_allocation = GPU_ALLOCATION,
        .enable_runtime_overrides = ENABLE_RUNTIME_OVERRIDES,

        .detect_gpu = DETECT_GPU,
        .detect_pcie_accelerator = DETECT_PCIE_ACCELERATOR,

        .ternary_logic_mode = TERNARY_LOGIC_MODE,
        .enable_adaptive_mode_switching = ENABLE_ADAPTIVE_MODE_SWITCHING,
        .enable_debug_mode = ENABLE_DEBUG_MODE
    };
    return cfg;
}

// Load overrides from environment variables (simple example)
void apply_env_overrides(HanoiVMConfig* cfg) {
    const char* mode = getenv("HVM_MODE");
    if (mode) strncpy(cfg->ternary_logic_mode, mode, sizeof(cfg->ternary_logic_mode));

    const char* log_level = getenv("HVM_LOG_LEVEL");
    if (log_level) strncpy(cfg->log_level, log_level, sizeof(cfg->log_level));

    const char* affinity = getenv("HVM_CPU_AFFINITY");
    if (affinity) strncpy(cfg->cpu_affinity, affinity, sizeof(cfg->cpu_affinity));
}

// Print current config state (for debugging)
void print_config(const HanoiVMConfig* cfg) {
    printf("=== HanoiVM Runtime Configuration ===\n");
    printf("PCIe Acceleration: %s\n", cfg->enable_pcie_acceleration ? "Enabled" : "Disabled");
    printf("GPU Support: %s\n", cfg->enable_gpu_support ? "Enabled" : "Disabled");
    printf("AI Optimization: %s\n", cfg->ai_optimization_mode);
    printf("Anomaly Detection: %s\n", cfg->enable_anomaly_detection ? "On" : "Off");
    printf("Log Level: %s | Format: %s\n", cfg->log_level, cfg->log_output_format);
    printf("Secure Mode: %s\n", cfg->enable_secure_mode ? "On" : "Off");
    printf("Ternary Mode: %s\n", cfg->ternary_logic_mode);
    printf("Memory: %d MB | GPU: %d MB\n", cfg->memory_allocation, cfg->gpu_allocation);
    printf("CPU Affinity: %s\n", cfg->cpu_affinity);
    printf("=====================================\n");
}

// Example entry point for standalone testing
int main() {
    HanoiVMConfig cfg = default_config();
    if (cfg.enable_runtime_overrides) apply_env_overrides(&cfg);
    if (cfg.enable_debug_mode) print_config(&cfg);
    return 0;
}
