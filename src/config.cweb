@* config.cweb | Centralized Configuration for HanoiVM v0.9.2 *@

This file defines the global configuration settings for the HanoiVM project.
It ensures unified behavior across all symbolic tiers and components,
including Axion AI integration, GPU/PCIe acceleration, dynamic recursion control,
and synergy-aware runtime introspection.

---

@<Hardware Configuration@>=
## Hardware Configuration

#define ENABLE_PCIE_ACCELERATION         true
#define ENABLE_GPU_SUPPORT               true
#define ENABLE_DYNAMIC_RESOURCE_SCALING  true
#define ENABLE_LOOKING_GLASS_STREAM      true   // Enables live ternary stream to Looking Glass UI

---

@<AI Configuration@>=
## AI Configuration

#define AI_OPTIMIZATION_MODE             "Advanced"
#define ENABLE_ANOMALY_DETECTION         true
#define ENABLE_AI_LOG_FEEDBACK           true
#define AXION_MEMORY_POLICY              "Protective"  // Options: "Protective", "Aggressive"

---

@<Logging Configuration@>=
## Logging Configuration

#define LOG_LEVEL                        "INFO"
#define LOG_OUTPUT_FORMAT                "TEXT"
#define ENABLE_SECURE_MODE               true
#define ENABLE_ENTROPY_TRACE             true   // Enables entropy-delta output per instruction
#define ENABLE_SYNERGY_TRACE             true   // Logs tier cross-calls and symbolic disassembly decisions

---

@<Resource Management@>=
## Resource Management

#define MEMORY_ALLOCATION                4096
#define CPU_AFFINITY                     "0,1,2,3"
#define GPU_ALLOCATION                   4096
#define ENABLE_RUNTIME_OVERRIDES         true

---

@<Environment Detection@>=
## Environment Detection

#define DETECT_GPU                       true
#define DETECT_PCIE_ACCELERATOR          true

---

@<Global Settings@>=
## Global Settings

#define TERNARY_LOGIC_MODE               "T81"
#define ENABLE_ADAPTIVE_MODE_SWITCHING  true
#define ENABLE_DEBUG_MODE                true
#define ENABLE_SYMBOLIC_STACK_COLLAPSE  true  // Enables Axion-guided tail-recursive collapse

---

@<Runtime Configuration Parser@>=
## Runtime Configuration Parser

@c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

typedef struct {
    bool enable_pcie_acceleration;
    bool enable_gpu_support;
    bool enable_dynamic_resource_scaling;
    bool enable_looking_glass_stream;

    char ai_optimization_mode[16];
    bool enable_anomaly_detection;
    bool enable_ai_log_feedback;
    char axion_memory_policy[16];

    char log_level[8];
    char log_output_format[8];
    bool enable_secure_mode;
    bool enable_entropy_trace;
    bool enable_synergy_trace;

    int memory_allocation;
    char cpu_affinity[32];
    int gpu_allocation;
    bool enable_runtime_overrides;

    bool detect_gpu;
    bool detect_pcie_accelerator;

    char ternary_logic_mode[8];
    bool enable_adaptive_mode_switching;
    bool enable_debug_mode;
    bool enable_symbolic_stack_collapse;
} HanoiVMConfig;

HanoiVMConfig default_config() {
    HanoiVMConfig cfg = {
        .enable_pcie_acceleration = ENABLE_PCIE_ACCELERATION,
        .enable_gpu_support = ENABLE_GPU_SUPPORT,
        .enable_dynamic_resource_scaling = ENABLE_DYNAMIC_RESOURCE_SCALING,
        .enable_looking_glass_stream = ENABLE_LOOKING_GLASS_STREAM,

        .ai_optimization_mode = AI_OPTIMIZATION_MODE,
        .enable_anomaly_detection = ENABLE_ANOMALY_DETECTION,
        .enable_ai_log_feedback = ENABLE_AI_LOG_FEEDBACK,
        .axion_memory_policy = AXION_MEMORY_POLICY,

        .log_level = LOG_LEVEL,
        .log_output_format = LOG_OUTPUT_FORMAT,
        .enable_secure_mode = ENABLE_SECURE_MODE,
        .enable_entropy_trace = ENABLE_ENTROPY_TRACE,
        .enable_synergy_trace = ENABLE_SYNERGY_TRACE,

        .memory_allocation = MEMORY_ALLOCATION,
        .cpu_affinity = CPU_AFFINITY,
        .gpu_allocation = GPU_ALLOCATION,
        .enable_runtime_overrides = ENABLE_RUNTIME_OVERRIDES,

        .detect_gpu = DETECT_GPU,
        .detect_pcie_accelerator = DETECT_PCIE_ACCELERATOR,

        .ternary_logic_mode = TERNARY_LOGIC_MODE,
        .enable_adaptive_mode_switching = ENABLE_ADAPTIVE_MODE_SWITCHING,
        .enable_debug_mode = ENABLE_DEBUG_MODE,
        .enable_symbolic_stack_collapse = ENABLE_SYMBOLIC_STACK_COLLAPSE
    };
    return cfg;
}

void apply_env_overrides(HanoiVMConfig* cfg) {
    const char* mode = getenv("HVM_MODE");
    if (mode) strncpy(cfg->ternary_logic_mode, mode, sizeof(cfg->ternary_logic_mode));

    const char* log_level = getenv("HVM_LOG_LEVEL");
    if (log_level) strncpy(cfg->log_level, log_level, sizeof(cfg->log_level));

    const char* affinity = getenv("HVM_CPU_AFFINITY");
    if (affinity) strncpy(cfg->cpu_affinity, affinity, sizeof(cfg->cpu_affinity));
}

void print_config(const HanoiVMConfig* cfg) {
    printf("=== HanoiVM Runtime Configuration ===\n");
    printf("Ternary Logic Mode: %s\n", cfg->ternary_logic_mode);
    printf("Adaptive Mode Switching: %s\n", cfg->enable_adaptive_mode_switching ? "Enabled" : "Disabled");
    printf("GPU Support: %s | PCIe: %s\n", cfg->enable_gpu_support ? "Yes" : "No", cfg->enable_pcie_acceleration ? "Yes" : "No");
    printf("Entropy Trace: %s | Synergy Trace: %s\n", cfg->enable_entropy_trace ? "On" : "Off", cfg->enable_synergy_trace ? "On" : "Off");
    printf("Looking Glass Stream: %s\n", cfg->enable_looking_glass_stream ? "Active" : "Disabled");
    printf("AI Opt Mode: %s | Axion Mem Policy: %s\n", cfg->ai_optimization_mode, cfg->axion_memory_policy);
    printf("Log: %s (%s) | Secure: %s\n", cfg->log_level, cfg->log_output_format, cfg->enable_secure_mode ? "Yes" : "No");
    printf("Memory: %d MB | GPU: %d MB | CPU Affinity: %s\n", cfg->memory_allocation, cfg->gpu_allocation, cfg->cpu_affinity);
    printf("=====================================\n");
}

int main() {
    HanoiVMConfig cfg = default_config();
    if (cfg.enable_runtime_overrides) apply_env_overrides(&cfg);
    if (cfg.enable_debug_mode) print_config(&cfg);
    return 0;
}
