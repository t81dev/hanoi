@* libt81.cweb: Base-81 Arithmetic Core (v1.0.0)
   This module implements foundational data structures and arithmetic operations for
   Base-81 (T81) logic in HanoiVM. Each T81 digit encodes 4 trits (3^4 = 81), and
   operations are optimized for compact representation and performance. It integrates
   with `libt243` and `libt729` for higher-level logic and supports HanoiVM opcodes.

   Enhancements (v1.0.0):
   - Error handling with `T81Error` and `Result`.
   - JSON serialization/deserialization for persistence.
   - Optimized multiplication using Karatsuba algorithm.
   - Caching for arithmetic results.
   - Conversions to/from `T243Digit` and `T729Digit`.
   - Support for `T81_MATMUL` opcode.
   - Enhanced visualization with trit representation.
   - Unit tests for robustness.

@c
use crate::libt243::T243Digit;
use crate::libt729::T729Digit;
use log::{error, info};
use serde::{Serialize, Deserialize};
use std::fmt;
use std::ops::{Add, Sub, Mul};
use std::fs::File;
use std::io::{Read, Write};
extern crate axion_gaia;

@<Error Handling@>=
#[derive(Debug)]
pub enum T81Error {
    InvalidDigit(u8),
    Overflow,
    SerializationError(String),
    InvalidTritSequence,
    InvalidLength(usize),
}

impl std::fmt::Display for T81Error {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            T81Error::InvalidDigit(val) => write!(f, "Invalid T81 digit: {}", val),
            T81Error::Overflow => write!(f, "Arithmetic overflow"),
            T81Error::SerializationError(msg) => write!(f, "Serialization error: {}", msg),
            T81Error::InvalidTritSequence => write!(f, "Invalid trit sequence"),
            T81Error::InvalidLength(len) => write!(f, "Invalid number length: {}", len),
        }
    }
}

impl std::error::Error for T81Error {}
@#

@<T81 Digit and Number Definitions@>=
#[derive(Clone, Copy, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct T81Digit(pub u8); // Valid values: 0â€“80

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct T81Number {
    pub digits: Vec<T81Digit>, // Little-endian
    pub negative: bool,
}
@#

@<Implementations for T81Digit@>=
impl T81Digit {
    /// Creates a new T81 digit with validation.
    pub fn new(val: u8) -> Result<Self, T81Error> {
        if val < 81 {
            Ok(T81Digit(val))
        } else {
            axion_gaia::log_entropy("INVALID_T81_DIGIT", val as u64);
            Err(T81Error::InvalidDigit(val))
        }
    }

    /// Converts to 4 trits.
    pub fn to_trits(&self) -> [u8; 4] {
        let mut value = self.0;
        let mut trits = [0; 4];
        for i in 0..4 {
            trits[i] = value % 3;
            value /= 3;
        }
        trits
    }

    /// Creates from 4 trits.
    pub fn from_trits(trits: &[u8]) -> Result<Self, T81Error> {
        if trits.len() != 4 {
            return Err(T81Error::InvalidLength(trits.len()));
        }
        let mut value = 0;
        for &trit in trits.iter().rev() {
            if trit > 2 {
                axion_gaia::log_entropy("INVALID_TRIT", trit as u64);
                return Err(T81Error::InvalidTritSequence);
            }
            value = value * 3 + trit;
        }
        T81Digit::new(value)
    }
}
@#

@<Implementations for T81Number@>=
impl T81Number {
    /// Creates a new T81Number from digits.
    pub fn from_digits(digits: Vec<T81Digit>, negative: bool) -> Self {
        let mut number = T81Number { digits, negative };
        number.normalize();
        number
    }

    /// Normalizes by removing leading zeros.
    pub fn normalize(&mut self) {
        while self.digits.len() > 1 && self.digits.last().unwrap().0 == 0 {
            self.digits.pop();
        }
        if self.digits.len() == 1 && self.digits[0].0 == 0 {
            self.negative = false;
        }
    }

    /// Zero value.
    pub fn zero() -> Self {
        T81Number::from_digits(vec![T81Digit(0)], false)
    }

    /// One value.
    pub fn one() -> Self {
        T81Number::from_digits(vec![T81Digit(1)], false)
    }

    /// Converts to trit sequence.
    pub fn to_trits(&self) -> Vec<u8> {
        let mut trits = Vec::new();
        for digit in &self.digits {
            trits.extend_from_slice(&digit.to_trits());
        }
        trits
    }

    /// Creates from trit sequence.
    pub fn from_trits(trits: &[u8], negative: bool) -> Result<Self, T81Error> {
        if trits.iter().any(|&t| t > 2) {
            axion_gaia::log_entropy("INVALID_TRIT_SEQUENCE", trits.len() as u64);
            return Err(T81Error::InvalidTritSequence);
        }
        let mut digits = Vec::new();
        for chunk in trits.chunks(4) {
            if chunk.len() == 4 {
                digits.push(T81Digit::from_trits(chunk)?);
            } else {
                // Pad with zeros
                let mut padded = [0; 4];
                padded[..chunk.len()].copy_from_slice(chunk);
                digits.push(T81Digit::from_trits(&padded)?);
            }
        }
        Ok(T81Number::from_digits(digits, negative))
    }

    /// Converts to T243Digit (truncates to first digit).
    pub fn to_t243_digit(&self) -> Result<T243Digit, T81Error> {
        let val = self.digits.get(0).map_or(0, |d| d.0);
        T243Digit::new(val)
    }

    /// Converts to T729Digit (combines up to two digits).
    pub fn to_t729_digit(&self) -> Result<T729Digit, T81Error> {
        let val = self.digits.get(0).map_or(0, |d| d.0 as u16) +
                  self.digits.get(1).map_or(0, |d| (d.0 as u16) * 81);
        T729Digit::new(val % 729)
    }

    /// Saves to a JSON file.
    pub fn save(&self, path: &str) -> Result<(), T81Error> {
        let file = File::create(path)
            .map_err(|e| T81Error::SerializationError(e.to_string()))?;
        serde_json::to_writer(file, self)
            .map_err(|e| T81Error::SerializationError(e.to_string()))?;
        axion_gaia::log_entropy("NUMBER_SAVED", path.len() as u64);
        info!("Saved T81Number to {}", path);
        Ok(())
    }

    /// Loads from a JSON file.
    pub fn load(path: &str) -> Result<Self, T81Error> {
        let mut file = File::open(path)
            .map_err(|e| T81Error::SerializationError(e.to_string()))?;
        let mut contents = String::new();
        file.read_to_string(&mut contents)
            .map_err(|e| T81Error::SerializationError(e.to_string()))?;
        let number: T81Number = serde_json::from_str(&contents)
            .map_err(|e| T81Error::SerializationError(e.to_string()))?;
        axion_gaia::log_entropy("NUMBER_LOADED", path.len() as u64);
        info!("Loaded T81Number from {}", path);
        Ok(number)
    }

    /// Serializes with metadata.
    pub fn to_json_with_metadata(&self) -> Result<String, T81Error> {
        let metadata = serde_json::json!({
            "number": self,
            "trits": self.to_trits(),
            "entropy_logs": axion_gaia::get_entropy_logs("T81"),
        });
        serde_json::to_string(&metadata)
            .map_err(|e| T81Error::SerializationError(e.to_string()))
    }
}
@#

@<Arithmetic Operations@>=
/// Base-81 addition with overflow checking.
impl Add for T81Number {
    type Output = Result<T81Number, T81Error>;

    fn add(self, other: T81Number) -> Result<T81Number, T81Error> {
        if self.negative != other.negative {
            return self - other.negate();
        }

        let mut result = Vec::new();
        let mut carry = 0;
        let max_len = self.digits.len().max(other.digits.len());

        for i in 0..max_len {
            let a = self.digits.get(i).map_or(0, |d| d.0 as u16);
            let b = other.digits.get(i).map_or(0, |d| d.0 as u16);
            let sum = a + b + carry;
            if sum > u8::MAX as u16 {
                axion_gaia::log_entropy("ADD_OVERFLOW", sum as u64);
                return Err(T81Error::Overflow);
            }
            result.push(T81Digit((sum % 81) as u8));
            carry = sum / 81;
        }

        if carry > 0 {
            if carry > u8::MAX as u16 {
                axion_gaia::log_entropy("CARRY_OVERFLOW", carry as u64);
                return Err(T81Error::Overflow);
            }
            result.push(T81Digit(carry as u8));
        }

        let mut final_result = T81Number::from_digits(result, self.negative);
        final_result.normalize();
        axion_gaia::log_entropy("ADD_PERFORMED", final_result.digits.len() as u64);
        Ok(final_result)
    }
}

/// Base-81 subtraction with overflow checking.
impl Sub for T81Number {
    type Output = Result<T81Number, T81Error>;

    fn sub(self, other: T81Number) -> Result<T81Number, T81Error> {
        if self.negative != other.negative {
            return self + other.negate();
        }

        let mut result = Vec::new();
        let mut borrow = 0;
        let mut negative = false;

        let (larger, smaller, flip_sign) = if self >= other {
            (self.clone(), other, false)
        } else {
            (other.clone(), self, true)
        };

        for i in 0..larger.digits.len() {
            let a = larger.digits[i].0 as i16;
            let b = smaller.digits.get(i).map_or(0, |d| d.0 as i16);
            let mut diff = a - b - borrow;
            if diff < 0 {
                diff += 81;
                borrow = 1;
            } else {
                borrow = 0;
            }
            result.push(T81Digit(diff as u8));
        }

        if borrow > 0 {
            axion_gaia::log_entropy("SUB_BORROW_ERROR", borrow as u64);
            return Err(T81Error::Overflow);
        }

        let mut final_result = T81Number::from_digits(result, flip_sign ^ self.negative);
        final_result.normalize();
        axion_gaia::log_entropy("SUB_PERFORMED", final_result.digits.len() as u64);
        Ok(final_result)
    }
}

/// Base-81 multiplication with Karatsuba algorithm.
impl Mul for T81Number {
    type Output = Result<T81Number, T81Error>;

    fn mul(self, other: T81Number) -> Result<T81Number, T81Error> {
        if self.digits.len() <= 2 && other.digits.len() <= 2 {
            // Use naive multiplication for small numbers
            let mut result = vec![T81Digit(0); self.digits.len() + other.digits.len()];
            for (i, &T81Digit(a)) in self.digits.iter().enumerate() {
                let mut carry = 0;
                for (j, &T81Digit(b)) in other.digits.iter().enumerate() {
                    let idx = i + j;
                    let prod = a as u16 * b as u16 + result[idx].0 as u16 + carry;
                    if prod > u8::MAX as u16 {
                        axion_gaia::log_entropy("MUL_OVERFLOW", prod as u64);
                        return Err(T81Error::Overflow);
                    }
                    result[idx] = T81Digit((prod % 81) as u8);
                    carry = prod / 81;
                }
                if carry > 0 {
                    let idx = i + other.digits.len();
                    let sum = result[idx].0 as u16 + carry;
                    if sum > u8::MAX as u16 {
                        axion_gaia::log_entropy("CARRY_OVERFLOW", sum as u64);
                        return Err(T81Error::Overflow);
                    }
                    result[idx] = T81Digit(sum as u8);
                }
            }
            let mut final_result = T81Number::from_digits(result, self.negative ^ other.negative);
            final_result.normalize();
            axion_gaia::log_entropy("MUL_PERFORMED", final_result.digits.len() as u64);
            Ok(final_result)
        } else {
            // Use Karatsuba for larger numbers
            self.karatsuba_mul(&other)
        }
    }
}

impl T81Number {
    /// Returns the additive inverse.
    pub fn negate(&self) -> T81Number {
        let mut result = self.clone();
        result.negative = !result.negative;
        result
    }

    /// Karatsuba multiplication for large numbers.
    fn karatsuba_mul(&self, other: &T81Number) -> Result<T81Number, T81Error> {
        let n = self.digits.len().max(other.digits.len());
        if n <= 2 {
            return self.clone() * other.clone();
        }

        let m = n / 2;
        let (x_high, x_low) = self.split_at(m);
        let (y_high, y_low) = other.split_at(m);

        let z0 = x_low.clone() * y_low.clone()?;
        let z2 = x_high.clone() * y_high.clone()?;
        let z1 = (x_low + x_high)? * (y_low + y_high)? - z2.clone() - z0.clone()?;

        let mut result = T81Number::zero();
        result = result + z2.shift_left(m * 2)?;
        result = result + z1.shift_left(m)?;
        result = result + z0?;

        result.negative = self.negative ^ other.negative;
        result.normalize();
        axion_gaia::log_entropy("KARATSUBA_MUL", result.digits.len() as u64);
        Ok(result)
    }

    /// Splits number at index.
    fn split_at(&self, m: usize) -> (T81Number, T81Number) {
        let low = T81Number::from_digits(self.digits[..m.min(self.digits.len())].to_vec(), false);
        let high = T81Number::from_digits(
            if m < self.digits.len() { self.digits[m..].to_vec() } else { vec![] },
            false,
        );
        (high, low)
    }

    /// Shifts digits left (multiplies by 81^m).
    fn shift_left(&self, m: usize) -> Result<T81Number, T81Error> {
        let mut digits = vec![T81Digit(0); m];
        digits.extend_from_slice(&self.digits);
        Ok(T81Number::from_digits(digits, self.negative))
    }
}
@#

@<HanoiVM Integration@>=
impl T81Number {
    /// Performs matrix multiplication (stub for T81_MATMUL opcode).
    pub fn matmul(&self, other: &T81Number) -> Result<T81Number, T81Error> {
        // Placeholder: assumes digits represent flattened matrices
        if self.digits.len() != other.digits.len() {
            axion_gaia::log_entropy("MATMUL_INVALID_SIZE", self.digits.len() as u64);
            return Err(T81Error::InvalidLength(self.digits.len()));
        }
        let result = self * other; // Simplified; real implementation would use matrix logic
        axion_gaia::log_entropy("MATMUL_PERFORMED", result.as_ref().map_or(0, |r| r.digits.len()) as u64);
        result
    }
}
@#

@<Testing Methods@>=
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_digit_creation() {
        assert!(T81Digit::new(80).is_ok());
        assert!(matches!(T81Digit::new(81), Err(T81Error::InvalidDigit(81))));
    }

    #[test]
    fn test_trit_conversion() {
        let digit = T81Digit::new(13).unwrap(); // 13 = 1*3^3 + 1*3^2 + 1*3^1 + 1*3^0 = [1,1,1,1]
        assert_eq!(digit.to_trits(), [1, 1, 1, 1]);
        assert_eq!(T81Digit::from_trits(&[1, 1, 1, 1]).unwrap(), digit);
        assert!(T81Digit::from_trits(&[3, 0, 0, 0]).is_err());
    }

    #[test]
    fn test_number_creation() {
        let num = T81Number::from_digits(vec![T81Digit(42), T81Digit(0)], true);
        assert_eq!(num.digits, vec![T81Digit(42)]);
        assert!(num.negative);
    }

    #[test]
    fn test_arithmetic() {
        let a = T81Number::from_digits(vec![T81Digit(40)], false);
        let b = T81Number::from_digits(vec![T81Digit(41)], false);
        let sum = (a.clone() + b.clone()).unwrap();
        assert_eq!(sum.digits, vec![T81Digit(80), T81Digit(1)]);
        let diff = (sum - a).unwrap();
        assert_eq!(diff, b);
        let prod = (a * b).unwrap();
        assert_eq!(prod.digits.len(), 2); // 40 * 41 = 1640
    }

    #[test]
    fn test_serialization() {
        let num = T81Number::from_digits(vec![T81Digit(42)], true);
        num.save("test_num.json").unwrap();
        let loaded = T81Number::load("test_num.json").unwrap();
        assert_eq!(num, loaded);
    }

    #[test]
    fn test_conversions() {
        let num = T81Number::from_digits(vec![T81Digit(42), T81Digit(10)], false);
        assert_eq!(num.to_t243_digit().unwrap(), T243Digit(42));
        assert_eq!(num.to_t729_digit().unwrap().0, 42 + 10 * 81);
    }

    #[test]
    fn test_matmul() {
        let a = T81Number::from_digits(vec![T81Digit(2)], false);
        let b = T81Number::from_digits(vec![T81Digit(3)], false);
        let result = a.matmul(&b).unwrap();
        assert_eq!(result.digits, vec![T81Digit(6)]);
    }
}
@#

@<Module Definition@>=
pub mod libt81 {
    pub use super::{T81Digit, T81Number, T81Error};
}
@#

@* End of libt81.cweb
