@* hanoivm_vm.cweb | HanoiVM Execution Core — AI-Aware, Recursive, and Config-Integrated *@

This file defines the main execution loop for HanoiVM:
- Executes T81, T243, and T729 instruction sets
- Applies Axion AI hooks via axion_signal and entropy tracing
- Supports runtime promotion/demotion between ternary levels
- Implements recursion ops (FIB, FACT), tensor ops, and stack-aware promotion
@#

@<Include Dependencies@>=
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "config.h"
#include "t81_stack.h"
#include "hvm_loader.h"
#include "ai_hook.h"
#include "advanced_ops.h"
#include "disassembler.h"
#include "ternary_base.h"
#include "t243bigint.h"
#include "t81recursion.h"
#include "hvm_promotion.h"
@#

@<Extern τ-registers@>=
extern int τ[28];  // τ0–τ26 + τ27 for Axion AI
@#

@<VM Context Definition@>=
typedef struct {
    size_t ip;               // Instruction pointer
    int halted;              // HALT signal
    int recursion_depth;     // Recursion tracking
    int mode;                // Current ternary logic mode
    int mode_flags;          // Promotion flags
    int call_depth;          // Stack promotion metric
} HVMContext;
@#

@<Ternary Operand Loader@>=
uint81_t fetch_operand(const uint8_t* buf) {
    uint81_t out;
    out.a = ((uint32_t)buf[0] << 24) | ((uint32_t)buf[1] << 16) | ((uint32_t)buf[2] << 8) | buf[3];
    out.b = ((uint32_t)buf[4] << 24) | ((uint32_t)buf[5] << 16) | ((uint32_t)buf[6] << 8) | buf[7];
    out.c = buf[8];
    return out;
}
@#

@<Stack Extensions@>=
void push81u(uint81_t val) {
    push81(val.c); push81(val.b); push81(val.a);
}

uint81_t pop81u(void) {
    uint81_t val;
    val.a = pop81(); val.b = pop81(); val.c = pop81();
    return val;
}
@#

@<Opcode Constants@>=
#define OP_T729_DOT       0xE1
#define OP_T729_PRINT     0xE2
#define OP_RECURSE_FACT   0xF1
#define OP_RECURSE_FIB    0xF2
#define OP_PROMOTE_T243   0xF0
#define OP_PROMOTE_T729   0xF3
#define OP_DEMOTE_T243    0xF4
#define OP_DEMOTE_T81     0xF5
@#

@<VM Execution Function@>=
void execute_vm(void) {
    HVMContext ctx = {
        .ip = 0, .halted = 0,
        .recursion_depth = 0,
        .mode = MODE_T81,
        .mode_flags = 0,
        .call_depth = 0
    };

    t81_vm_init();  // One-time opcode extension registration

    while (!ctx.halted && ctx.ip < hvm_code_size) {
        uint8_t opcode = hvm_code[ctx.ip++];
        axion_signal(opcode);  // Hook into Axion AI
        τ[AXION_REGISTER_INDEX] = axion_get_optimization();

        if (ENABLE_DEBUG_MODE) {
            char trace[128];
            snprintf(trace, sizeof(trace), "[TRACE] OP[%s] at IP=%zu", opcode_name(opcode), ctx.ip - 1);
            axion_log(trace);
        }

        TRACE_MODE(&ctx);
        PROMOTE_T243(&ctx);
        PROMOTE_T729(&ctx);
        DEMOTE_STACK(&ctx);

        switch (opcode) {
            case OP_PROMOTE_T243: promote_to_t243(&ctx); break;
            case OP_PROMOTE_T729: promote_to_t729(&ctx); break;
            case OP_DEMOTE_T243:
            case OP_DEMOTE_T81: demote_stack(&ctx); break;

            case OP_T729_DOT: {
                TernaryHandle b = stack_pop();
                TernaryHandle a = stack_pop();
                TernaryHandle r;
                t729tensor_contract(a, b, &r);
                stack_push(r);
                break;
            }

            case OP_T729_PRINT: {
                TernaryHandle a = stack_pop();
                printf("[T729] Tensor @ %p\n", a.data);
                stack_push(a);
                break;
            }

            case OP_RECURSE_FACT: {
                T81BigIntHandle n = stack_pop();
                T81BigIntHandle r;
                if (t81bigint_factorial_recursive(n, &r) == TRIT_OK)
                    stack_push(r);
                else
                    fprintf(stderr, "[VM] RECURSE_FACT error\n");
                t81bigint_free(n);
                break;
            }

            case OP_RECURSE_FIB: {
                T81BigIntHandle n = stack_pop();
                T81BigIntHandle r;
                if (t81bigint_fibonacci_tail(n, &r) == TRIT_OK)
                    stack_push(r);
                else
                    fprintf(stderr, "[VM] RECURSE_FIB error\n");
                t81bigint_free(n);
                break;
            }

            case OP_NOP: break;

            case OP_PUSH: {
                if (ctx.ip + 8 >= hvm_code_size) {
                    fprintf(stderr, "[VM] PUSH operand overflow\n"); return;
                }
                uint81_t val = fetch_operand(&hvm_code[ctx.ip]);
                ctx.ip += 9;
                push81u(val);
                break;
            }

            case OP_ADD: add81(); break;
            case OP_SUB: sub81(); break;
            case OP_MUL: mul81(); break;
            case OP_DIV: div81(); break;
            case OP_MOD: mod81(); break;
            case OP_NEG: neg81(); break;
            case OP_ABS: abs81(); break;
            case OP_CMP3: cmp381(); break;

            case OP_TNN_ACCUM:
            case OP_T81_MATMUL: {
                if (ctx.ip + 17 >= hvm_code_size) {
                    fprintf(stderr, "[VM] AI op operand overflow\n"); return;
                }
                uint81_t a = fetch_operand(&hvm_code[ctx.ip]);
                uint81_t b = fetch_operand(&hvm_code[ctx.ip + 9]);
                ctx.ip += 18;
                uint81_t result = evaluate_opcode(opcode, a, b, &ctx);
                push81u(result);
                break;
            }

            case OP_T243_ADD:
            case OP_T243_MUL: {
                TernaryHandle b = stack_pop();
                TernaryHandle a = stack_pop();
                TernaryHandle r;
                if (opcode == OP_T243_ADD)
                    t243bigint_add(a, b, &r);
                else
                    t243bigint_mul(a, b, &r);
                stack_push(r);
                break;
            }

            case OP_T243_PRINT: {
                TernaryHandle a = stack_pop();
                char* str;
                t243bigint_to_string(a, &str);
                printf("[T243] %s\n", str);
                free(str);
                stack_push(a);
                break;
            }

            case OP_HALT:
                ctx.halted = 1;
                break;

            default:
                fprintf(stderr, "[VM] Unknown opcode 0x%02X @IP=%zu\n", opcode, ctx.ip - 1);
                return;
        }
    }
}
@#

@h VM Public API Header
#ifndef HANOIVM_VM_H
#define HANOIVM_VM_H

#include "t81types.h"

typedef struct {
    size_t ip;
    int halted;
    int recursion_depth;
    int mode;
    int mode_flags;
    int call_depth;
} HVMContext;

void execute_vm(void);
uint81_t fetch_operand(const uint8_t* buf);
void push81u(uint81_t val);
uint81_t pop81u(void);

#endif
@#
