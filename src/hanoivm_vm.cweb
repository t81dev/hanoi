@* hanoivm_vm.cweb | HanoiVM Execution Core — AI-Aware, Recursive, and Config-Integrated

This module implements the HanoiVM execution core, supporting T81, T243, and T729 instruction
sets, Axion AI hooks, runtime promotion/demotion, and recursive/tensor operations. It integrates
with `hanoivm_fsm.v` via PCIe/M.2, `axion-ai.cweb` via ioctls/debugfs, `hanoivm-core.cweb` via
FFI, `hanoivm-runtime.cweb`’s interpreter, and `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Full opcode support: T81 (`advanced_ops.cweb`, `hanoivm-runtime.cweb`), T243/T729 (`advanced_ops_ext.cweb`).
- Modular opcode table for extensibility.
- Entropy logging via `axion-ai.cweb`’s debugfs.
- Session memory integration with `axion-ai.cweb`’s `axion_session_t`.
- FFI interface to `hanoivm-core.cweb` for T243/T729 execution.
- Secure validation for stack, recursion, and tensors.
- JSON visualization for stack, registers, and tensors.
- Support for `.hvm` test bytecode (T81_MATMUL + TNN_ACCUM).
- Optimized for PCIe co-execution with FPGA/GPU acceleration.

@c
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include "config.h"
#include "t81_stack.h"
#include "hvm_loader.h"
#include "ai_hook.h"
#include "advanced_ops.h"
#include "disassembler.h"
#include "ternary_base.h"
#include "t243bigint.h"
#include "t81recursion.h"
#include "hvm_promotion.h"
#include "axion-ai.h"

@<Extern τ-registers@>=
extern int τ[28];

@<VM Context Definition@>=
typedef struct {
    size_t ip;
    int halted;
    int recursion_depth;
    int mode;
    int mode_flags;
    int call_depth;
    char session_id[32];
} HVMContext;

@<Opcode Constants@>=
#define OP_T729_DOT 0xE1
#define OP_T729_PRINT 0xE2
#define OP_RECURSE_FACT 0xF1
#define OP_RECURSE_FIB 0xF2
#define OP_PROMOTE_T243 0xF0
#define OP_PROMOTE_T729 0xF3
#define OP_DEMOTE_T243 0xF4
#define OP_DEMOTE_T81 0xF5
#define TJMP 0x07
#define TLOAD 0x0A
#define T243_STATE_ADV 0x30
#define T729_INTENT 0x31

@<Modular Operation Table@>=
typedef struct {
    uint8_t opcode;
    int (*execute)(HVMContext* ctx, const uint8_t* code, size_t code_size);
    const char* name;
    int requires_t243;
} VMOp;

static int exec_nop(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    axion_log_entropy("NOP", 0);
    return 0;
}

static int exec_push(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    if (ctx->ip + 8 >= code_size) {
        axion_log_entropy("PUSH_OVERFLOW", 0xFF);
        fprintf(stderr, "[VM] PUSH operand overflow\n");
        return -1;
    }
    uint81_t val = fetch_operand(&code[ctx->ip]);
    ctx->ip += 9;
    push81u(val);
    axion_log_entropy("PUSH", val.c & 0xFF);
    return 0;
}

static VMOp operations[] = {
    { OP_NOP, exec_nop, "NOP", 0 },
    { OP_PUSH, exec_push, "PUSH", 0 },
    // More in Part 2
    { 0, NULL, NULL, 0 }
};

@<Operation Implementations@>=
static int exec_add(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    add81();
    axion_log_entropy("ADD", 0);
    return 0;
}

static int exec_tjmp(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    if (ctx->ip + 1 >= code_size) {
        axion_log_entropy("TJMP_INVALID", 0xFF);
        return -1;
    }
    int8_t a = (int8_t)code[ctx->ip++];
    if (a * 3 < code_size) {
        ctx->ip = a * 3;
        axion_log_entropy("TJMP", a & 0xFF);
        return 0;
    }
    axion_log_entropy("TJMP_OUT_OF_BOUNDS", 0xFF);
    return -1;
}

static int exec_tload(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    if (ctx->ip + 1 >= code_size) {
        axion_log_entropy("TLOAD_INVALID", 0xFF);
        return -1;
    }
    int8_t a = (int8_t)code[ctx->ip++];
    int8_t b = (int8_t)code[ctx->ip++];
    if (a >= 0 && a < HANOIVM_MEM_SIZE && b >= 0 && b < 3) {
        τ[b] = hvm_memory[a];
        axion_log_entropy("TLOAD", τ[b] & 0xFF);
        return 0;
    }
    axion_log_entropy("TLOAD_OUT_OF_BOUNDS", 0xFF);
    return -1;
}

static int exec_tnn_accum(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    if (ctx->ip + 17 >= code_size || ctx->mode < MODE_T243) {
        axion_log_entropy("TNN_ACCUM_INVALID", 0xFF);
        return -1;
    }
    uint81_t a = fetch_operand(&code[ctx->ip]);
    uint81_t b = fetch_operand(&code[ctx->ip + 9]);
    ctx->ip += 18;
    uint81_t result = evaluate_opcode(OP_TNN_ACCUM, a, b, ctx);
    push81u(result);
    axion_log_entropy("TNN_ACCUM", result.c & 0xFF);
    return 0;
}

static int exec_t81_matmul(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    if (ctx->ip + 17 >= code_size || ctx->mode < MODE_T243) {
        axion_log_entropy("T81_MATMUL_INVALID", 0xFF);
        return -1;
    }
    uint81_t a = fetch_operand(&code[ctx->ip]);
    uint81_t b = fetch_operand(&code[ctx->ip + 9]);
    ctx->ip += 18;
    uint81_t result = evaluate_opcode(OP_T81_MATMUL, a, b, ctx);
    push81u(result);
    axion_log_entropy("T81_MATMUL", result.c & 0xFF);
    return 0;
}

static int exec_t243_state_adv(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    extern int rust_t243_state_advance(int8_t signal);
    int8_t signal = (int8_t)code[ctx->ip++];
    int result = rust_t243_state_advance(signal);
    τ[0] = result;
    axion_log_entropy("T243_STATE_ADV", result & 0xFF);
    return 0;
}

static int exec_t729_intent(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    extern int rust_t729_intent_dispatch(int8_t opcode);
    int8_t opcode = (int8_t)code[ctx->ip++];
    int result = rust_t729_intent_dispatch(opcode);
    τ[0] = result ? 1 : 0;
    axion_log_entropy("T729_INTENT", τ[0] & 0xFF);
    return result ? 0 : -1;
}

static VMOp operations[] = {
    { OP_NOP, exec_nop, "NOP", 0 },
    { OP_PUSH, exec_push, "PUSH", 0 },
    { OP_ADD, exec_add, "ADD", 0 },
    { TJMP, exec_tjmp, "TJMP", 0 },
    { TLOAD, exec_tload, "TLOAD", 0 },
    { OP_TNN_ACCUM, exec_tnn_accum, "TNN_ACCUM", 1 },
    { OP_T81_MATMUL, exec_t81_matmul, "T81_MATMUL", 1 },
    { T243_STATE_ADV, exec_t243_state_adv, "T243_STATE_ADV", 1 },
    { T729_INTENT, exec_t729_intent, "T729_INTENT", 1 },
    // More in Part 3
    { 0, NULL, NULL, 0 }
};

@<Operation Implementations Continued@>=
static int exec_t729_dot(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    if (ctx->mode < MODE_T729) {
        axion_log_entropy("T729_DOT_INVALID", 0xFF);
        return -1;
    }
    TernaryHandle b = stack_pop();
    TernaryHandle a = stack_pop();
    TernaryHandle r;
    t729tensor_contract(a, b, &r);
    stack_push(r);
    axion_log_entropy("T729_DOT", 0);
    return 0;
}

static int exec_recurse_fact(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    T81BigIntHandle n = stack_pop();
    T81BigIntHandle r;
    if (t81bigint_factorial_recursive(n, &r) == TRIT_OK) {
        stack_push(r);
        axion_log_entropy("RECURSE_FACT", 0);
    } else {
        axion_log_entropy("RECURSE_FACT_ERROR", 0xFF);
        fprintf(stderr, "[VM] RECURSE_FACT error\n");
        return -1;
    }
    t81bigint_free(n);
    return 0;
}

static int exec_halt(HVMContext* ctx, const uint8_t* code, size_t code_size) {
    ctx->halted = 1;
    axion_log_entropy("HALT", 0);
    return 0;
}

static VMOp operations[] = {
    { OP_NOP, exec_nop, "NOP", 0 },
    { OP_PUSH, exec_push, "PUSH", 0 },
    { OP_ADD, exec_add, "ADD", 0 },
    { OP_SUB, NULL, "SUB", 0 },
    { OP_MUL, NULL, "MUL", 0 },
    { OP_DIV, NULL, "DIV", 0 },
    { OP_MOD, NULL, "MOD", 0 },
    { OP_NEG, NULL, "NEG", 0 },
    { OP_ABS, NULL, "ABS", 0 },
    { OP_CMP3, NULL, "CMP3", 0 },
    { TJMP, exec_tjmp, "TJMP", 0 },
    { TLOAD, exec_tload, "TLOAD", 0 },
    { OP_TNN_ACCUM, exec_tnn_accum, "TNN_ACCUM", 1 },
    { OP_T81_MATMUL, exec_t81_matmul, "T81_MATMUL", 1 },
    { OP_T729_DOT, exec_t729_dot, "T729_DOT", 1 },
    { OP_T729_PRINT, NULL, "T729_PRINT", 1 },
    { OP_RECURSE_FACT, exec_recurse_fact, "RECURSE_FACT", 0 },
    { OP_RECURSE_FIB, NULL, "RECURSE_FIB", 0 },
    { OP_PROMOTE_T243, NULL, "PROMOTE_T243", 0 },
    { OP_PROMOTE_T729, NULL, "PROMOTE_T729", 0 },
    { OP_DEMOTE_T243, NULL, "DEMOTE_T243", 0 },
    { OP_DEMOTE_T81, NULL, "DEMOTE_T81", 0 },
    { OP_T243_ADD, NULL, "T243_ADD", 1 },
    { OP_T243_MUL, NULL, "T243_MUL", 1 },
    { OP_T243_PRINT, NULL, "T243_PRINT", 1 },
    { T243_STATE_ADV, exec_t243_state_adv, "T243_STATE_ADV", 1 },
    { T729_INTENT, exec_t729_intent, "T729_INTENT", 1 },
    { OP_HALT, exec_halt, "HALT", 0 },
    { 0, NULL, NULL, 0 }
};

@<Visualization Hook@>=
int hvm_visualize(HVMContext* ctx, char* out_json, size_t max_len) {
    size_t len = snprintf(out_json, max_len,
        "{\"ip\": %zu, \"mode\": %d, \"recursion_depth\": %d, \"stack\": [",
        ctx->ip, ctx->mode, ctx->recursion_depth);
    int sp = t81_stack_pointer();
    for (int i = 0; i < sp && len < max_len; i++) {
        len += snprintf(out_json + len, max_len - len, "%d%s",
                        t81_stack_peek(i), i < sp - 1 ? "," : "");
    }
    len += snprintf(out_json + len, max_len - len, "], \"tau\": [");
    for (int i = 0; i < 28 && len < max_len; i++) {
        len += snprintf(out_json + len, max_len - len, "%d%s",
                        τ[i], i < 27 ? "," : "");
    }
    len += snprintf(out_json + len, max_len - len, "]}");
    axion_log_entropy("VISUALIZE", len & 0xFF);
    return len < max_len ? 0 : -1;
}

@<VM Execution Function@>=
void execute_vm(void) {
    HVMContext ctx = {
        .ip = 0, .halted = 0, .recursion_depth = 0,
        .mode = MODE_T81, .mode_flags = 0, .call_depth = 0
    };
    snprintf(ctx.session_id, sizeof(ctx.session_id), "S-%016lx", (uint64_t)&ctx);
    axion_register_session(ctx.session_id);

    t81_vm_init();
    while (!ctx.halted && ctx.ip < hvm_code_size) {
        uint8_t opcode = hvm_code[ctx.ip++];
        axion_signal(opcode);
        τ[AXION_REGISTER_INDEX] = axion_get_optimization();

        if (ENABLE_DEBUG_MODE) {
            char trace[128];
            snprintf(trace, sizeof(trace), "[TRACE] OP[%s] at IP=%zu", opcode_name(opcode), ctx.ip - 1);
            axion_log(trace);
        }

        TRACE_MODE(&ctx);
        PROMOTE_T243(&ctx);
        PROMOTE_T729(&ctx);
        DEMOTE_STACK(&ctx);

        int result = -1;
        for (int i = 0; operations[i].execute; i++) {
            if (operations[i].opcode == opcode) {
                if (operations[i].requires_t243 && ctx.mode < MODE_T243) {
                    axion_log_entropy("MODE_ERROR", opcode);
                    fprintf(stderr, "[ERROR] %s requires T243 mode\n", operations[i].name);
                    return;
                }
                result = operations[i].execute(&ctx, hvm_code, hvm_code_size);
                break;
            }
        }
        if (result < 0) {
            axion_log_entropy("UNKNOWN_OP", opcode);
            fprintf(stderr, "[VM] Unknown opcode 0x%02X @IP=%zu\n", opcode, ctx.ip - 1);
            return;
        }
    }
}

