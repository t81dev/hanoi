@* hanoivm-runtime.cweb: HanoiVM Runtime Execution Engine for Ternary PCIe Accelerator

This module implements the HanoiVM interpreter for the Axion PCIe logic accelerator,
executing T729 macros from T243 logic trees in ternary binary format (TBIN). It integrates
with `hanoivm_fsm.v` via PCIe/M.2, `axion-ai.cweb` via ioctls/debugfs, `hanoivm-core.cweb`
via FFI, and supports `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Full opcode support: T81 (0x01–0x0E), `advanced_ops.cweb` (0x00–0x21), `advanced_ops_ext.cweb` (0x30–0x39).
- Modular opcode table for extensibility.
- Entropy logging via `axion-ai.cweb`’s debugfs.
- Session memory integration with `axion-ai.cweb`’s `axion_session_t`.
- FFI interface to `hanoivm-core.cweb` for T243/T729 execution.
- Secure validation for stack, memory, and jumps.
- JSON visualization for stack and registers.
- Support for `.hvm` test bytecode (T81_MATMUL + TNN_ACCUM).
- Optimized for PCIe co-execution with FPGA/GPU acceleration.

@c
#include <stdint.h>
#include <stddef.h>
#include <string.h>
#include <stdio.h>
#include "axion-ai.h" // For axion_log_entropy, axion_register_session

#define HANOIVM_MAX_STACK 64
#define HANOIVM_MEM_SIZE  81
#define TADD 0x01
#define TSUB 0x02
#define TMUL 0x03
#define TAND 0x04
#define TOR  0x05
#define TNOT 0x06
#define TJMP 0x07
#define TJZ  0x08
#define TJNZ 0x09
#define TLOAD 0x0A
#define TSTORE 0x0B
#define THLT 0x0C
#define TSPUSH 0x0D
#define TSPOP 0x0E
#define TNN_ACCUM 0x20
#define T81_MATMUL 0x21
#define T243_STATE_ADV 0x30
#define T729_INTENT 0x31

typedef struct {
    int8_t reg[3];
    int8_t mem[HANOIVM_MEM_SIZE];
    uint8_t* code;
    size_t code_len;
    uint32_t ip;
    int8_t stack[HANOIVM_MAX_STACK];
    int sp;
    int running;
    char session_id[32];
} hanoivm_state;

typedef struct {
    uint8_t opcode;
    int (*execute)(hanoivm_state* vm, int8_t a, int8_t b);
    const char* name;
    int requires_t243;
} HanoiOp;

int8_t clamp_trit(int value) {
    if (value > 1) return 1;
    if (value < -1) return -1;
    return (int8_t)value;
}

static int exec_tadd(hanoivm_state* vm, int8_t a, int8_t b) {
    vm->reg[0] = clamp_trit(vm->reg[0] + a);
    axion_log_entropy("TADD", vm->reg[0] & 0xFF);
    return 0;
}

static int exec_tspush(hanoivm_state* vm, int8_t a, int8_t b) {
    if (vm->sp >= HANOIVM_MAX_STACK - 1) {
        axion_log_entropy("TSPUSH_OVERFLOW", 0xFF);
        fprintf(stderr, "Stack overflow at IP %u\n", vm->ip);
        return -3;
    }
    vm->stack[++vm->sp] = vm->reg[0];
    axion_log_entropy("TSPUSH", vm->reg[0] & 0xFF);
    return 0;
}

static HanoiOp operations[] = {
    { TADD, exec_tadd, "TADD", 0 },
    { TSPUSH, exec_tspush, "TSPUSH", 0 },
    // More in Part 2
    { 0, NULL, NULL, 0 }
};

@<Operation Implementations@>=
static int exec_tsub(hanoivm_state* vm, int8_t a, int8_t b) {
    vm->reg[0] = clamp_trit(vm->reg[0] - a);
    axion_log_entropy("TSUB", vm->reg[0] & 0xFF);
    return 0;
}

static int exec_tmul(hanoivm_state* vm, int8_t a, int8_t b) {
    vm->reg[0] = clamp_trit(vm->reg[0] * a);
    axion_log_entropy("TMUL", vm->reg[0] & 0xFF);
    return 0;
}

static int exec_tand(hanoivm_state* vm, int8_t a, int8_t b) {
    vm->reg[0] = (vm->reg[0] < a) ? vm->reg[0] : a;
    axion_log_entropy("TAND", vm->reg[0] & 0xFF);
    return 0;
}

static int exec_tor(hanoivm_state* vm, int8_t a, int8_t b) {
    vm->reg[0] = (vm->reg[0] > a) ? vm->reg[0] : a;
    axion_log_entropy("TOR", vm->reg[0] & 0xFF);
    return 0;
}

static int exec_tnot(hanoivm_state* vm, int8_t a, int8_t b) {
    vm->reg[0] = -a;
    axion_log_entropy("TNOT", vm->reg[0] & 0xFF);
    return 0;
}

static int exec_tjmp(hanoivm_state* vm, int8_t a, int8_t b) {
    if (a * 3 < vm->code_len) {
        vm->ip = a * 3;
        axion_log_entropy("TJMP", a & 0xFF);
        return 1; // Skip IP increment
    }
    axion_log_entropy("TJMP_INVALID", 0xFF);
    return -1;
}

static int exec_tjz(hanoivm_state* vm, int8_t a, int8_t b) {
    if (b == 0 && a * 3 < vm->code_len) {
        vm->ip = a * 3;
        axion_log_entropy("TJZ", a & 0xFF);
        return 1;
    }
    axion_log_entropy("TJZ_NOOP", b & 0xFF);
    return 0;
}

static int exec_tnn_accum(hanoivm_state* vm, int8_t a, int8_t b) {
    if (vm->sp < 0 || a >= 243) {
        axion_log_entropy("TNN_ACCUM_INVALID", 0xFF);
        return -1;
    }
    vm->reg[0] = clamp_trit(vm->reg[0] + a);
    axion_log_entropy("TNN_ACCUM", vm->reg[0] & 0xFF);
    return 0;
}

static int exec_t81_matmul(hanoivm_state* vm, int8_t a, int8_t b) {
    if (vm->sp < 0 || a >= 243) {
        axion_log_entropy("T81_MATMUL_INVALID", 0xFF);
        return -1;
    }
    vm->reg[0] = clamp_trit(vm->reg[0] * a);
    axion_log_entropy("T81_MATMUL", vm->reg[0] & 0xFF);
    return 0;
}

static HanoiOp operations[] = {
    { TADD, exec_tadd, "TADD", 0 },
    { TSUB, exec_tsub, "TSUB", 0 },
    { TMUL, exec_tmul, "TMUL", 0 },
    { TAND, exec_tand, "TAND", 0 },
    { TOR, exec_tor, "TOR", 0 },
    { TNOT, exec_tnot, "TNOT", 0 },
    { TJMP, exec_tjmp, "TJMP", 0 },
    { TJZ, exec_tjz, "TJZ", 0 },
    { TJNZ, NULL, "TJNZ", 0 },
    { TLOAD, NULL, "TLOAD", 0 },
    { TSTORE, NULL, "TSTORE", 0 },
    { THLT, NULL, "THLT", 0 },
    { TSPUSH, exec_tspush, "TSPUSH", 0 },
    { TSPOP, NULL, "TSPOP", 0 },
    { TNN_ACCUM, exec_tnn_accum, "TNN_ACCUM", 1 },
    { T81_MATMUL, exec_t81_matmul, "T81_MATMUL", 1 },
    { T243_STATE_ADV, NULL, "T243_STATE_ADV", 1 },
    { T729_INTENT, NULL, "T729_INTENT", 1 },
    { 0, NULL, NULL, 0 }
};

@<Operation Implementations Continued@>=
static int exec_tjnz(hanoivm_state* vm, int8_t a, int8_t b) {
    if (b != 0 && a * 3 < vm->code_len) {
        vm->ip = a * 3;
        axion_log_entropy("TJNZ", a & 0xFF);
        return 1;
    }
    axion_log_entropy("TJNZ_NOOP", b & 0xFF);
    return 0;
}

static int exec_tload(hanoivm_state* vm, int8_t a, int8_t b) {
    if (a >= 0 && a < HANOIVM_MEM_SIZE && b >= 0 && b < 3) {
        vm->reg[b] = vm->mem[a];
        axion_log_entropy("TLOAD", vm->reg[b] & 0xFF);
        return 0;
    }
    axion_log_entropy("TLOAD_INVALID", 0xFF);
    return -1;
}

static int exec_tstore(hanoivm_state* vm, int8_t a, int8_t b) {
    if (a >= 0 && a < HANOIVM_MEM_SIZE && b >= 0 && b < 3) {
        vm->mem[a] = vm->reg[b];
        axion_log_entropy("TSTORE", vm->reg[b] & 0xFF);
        return 0;
    }
    axion_log_entropy("TSTORE_INVALID", 0xFF);
    return -1;
}

static int exec_thlt(hanoivm_state* vm, int8_t a, int8_t b) {
    vm->running = 0;
    axion_log_entropy("THLT", 0);
    return 0;
}

static int exec_tspop(hanoivm_state* vm, int8_t a, int8_t b) {
    if (vm->sp >= 0) {
        vm->reg[0] = vm->stack[vm->sp--];
        axion_log_entropy("TSPOP", vm->reg[0] & 0xFF);
        return 0;
    }
    axion_log_entropy("TSPOP_UNDERFLOW", 0xFF);
    fprintf(stderr, "Stack underflow at IP %u\n", vm->ip);
    return -4;
}

static int exec_t243_state_adv(hanoivm_state* vm, int8_t a, int8_t b) {
    extern int rust_t243_state_advance(int8_t signal); // FFI to hanoivm-core.cweb
    vm->reg[0] = rust_t243_state_advance(a);
    axion_log_entropy("T243_STATE_ADV", vm->reg[0] & 0xFF);
    return 0;
}

static int exec_t729_intent(hanoivm_state* vm, int8_t a, int8_t b) {
    extern int rust_t729_intent_dispatch(int8_t opcode); // FFI to hanoivm-core.cweb
    int result = rust_t729_intent_dispatch(a);
    vm->reg[0] = result ? 1 : 0;
    axion_log_entropy("T729_INTENT", vm->reg[0] & 0xFF);
    return result ? 0 : -1;
}

static HanoiOp operations[] = {
    { TADD, exec_tadd, "TADD", 0 },
    { TSUB, exec_tsub, "TSUB", 0 },
    { TMUL, exec_tmul, "TMUL", 0 },
    { TAND, exec_tand, "TAND", 0 },
    { TOR, exec_tor, "TOR", 0 },
    { TNOT, exec_tnot, "TNOT", 0 },
    { TJMP, exec_tjmp, "TJMP", 0 },
    { TJZ, exec_tjz, "TJZ", 0 },
    { TJNZ, exec_tjnz, "TJNZ", 0 },
    { TLOAD, exec_tload, "TLOAD", 0 },
    { TSTORE, exec_tstore, "TSTORE", 0 },
    { THLT, exec_thlt, "THLT", 0 },
    { TSPUSH, exec_tspush, "TSPUSH", 0 },
    { TSPOP, exec_tspop, "TSPOP", 0 },
    { TNN_ACCUM, exec_tnn_accum, "TNN_ACCUM", 1 },
    { T81_MATMUL, exec_t81_matmul, "T81_MATMUL", 1 },
    { T243_STATE_ADV, exec_t243_state_adv, "T243_STATE_ADV", 1 },
    { T729_INTENT, exec_t729_intent, "T729_INTENT", 1 },
    { 0, NULL, NULL, 0 }
};

@<Visualization Hook@>=
int hanoivm_visualize(hanoivm_state* vm, char* out_json, size_t max_len) {
    size_t len = snprintf(out_json, max_len,
        "{\"ip\": %u, \"reg\": [%d, %d, %d], \"sp\": %d, \"stack\": [",
        vm->ip, vm->reg[0], vm->reg[1], vm->reg[2], vm->sp);
    for (int i = 0; i <= vm->sp && len < max_len; i++) {
        len += snprintf(out_json + len, max_len - len, "%d%s",
                        vm->stack[i], i < vm->sp ? "," : "");
    }
    len += snprintf(out_json + len, max_len - len, "]}");
    axion_log_entropy("VISUALIZE", len & 0xFF);
    return len < max_len ? 0 : -1;
}

@<Interpreter@>=
void hanoivm_reset(hanoivm_state* vm) {
    memset(vm->reg, 0, sizeof(vm->reg));
    memset(vm->mem, 0, sizeof(vm->mem));
    memset(vm->stack, 0, sizeof(vm->stack));
    vm->ip = 0;
    vm->sp = -1;
    vm->running = 1;
    snprintf(vm->session_id, sizeof(vm->session_id), "S-%016lx", (uint64_t)vm);
    axion_register_session(vm->session_id);
}

int hanoivm_exec(hanoivm_state* vm) {
    if (!vm || !vm->code || vm->code_len < 3) return -1;
    while (vm->running && vm->ip + 2 < vm->code_len) {
        uint8_t opcode = vm->code[vm->ip];
        int8_t a = (int8_t)vm->code[vm->ip + 1];
        int8_t b = (int8_t)vm->code[vm->ip + 2];
        int skip_ip = 0;
        for (int i = 0; operations[i].execute; i++) {
            if (operations[i].opcode == opcode) {
                if (operations[i].requires_t243 && vm->reg[0] >= 243) {
                    axion_log_entropy("MODE_ERROR", opcode);
                    fprintf(stderr, "[ERROR] %s requires T243 mode\n", operations[i].name);
                    return -5;
                }
                int result = operations[i].execute(vm, a, b);
                if (result < 0) return result;
                skip_ip = result;
                break;
            }
        }
        if (!skip_ip) vm->ip += 3;
#ifdef DEBUG_HANOIVM
        printf("IP: %u | Reg: [%d, %d, %d] | SP: %d\n",
               vm->ip, vm->reg[0], vm->reg[1], vm->reg[2], vm->sp);
#endif
    }
    return 0;
}
