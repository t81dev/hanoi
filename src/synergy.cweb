@* synergy.cweb | Cross-Module Synergy Engine for HanoiVM 0.9.5
This module unifies HanoiVM symbolic systems (T81, T243, T729) with NLP-facing tools,
recursive trace exports, AI-driven analysis, and Grok/ChatGPT-friendly interfaces.
It supports chained symbolic queries, prompt generation, explainable logic output,
and binary compatibility emulation for executing binary-style instructions (BADD, BAND,
BOR, BNOT) within the symbolic runtime. The module provides global initialization hooks,
runtime synchronization, encryption-aware symbolic export, and enhanced AI-driven analysis
with NLP capabilities for seamless interaction with modern AI systems like Grok.

New in 0.9.5, the `synergy_trace_session` function now supports plain text logging to
`/var/log/axion/trace.t81log` for compatibility with the Grok API Bridge, alongside
compressed and encrypted `.t81z` trace exports. A new `synergy_replay_session` function
enables parsing and replaying trace logs for testing and validation, supporting
auditability and recursive model training.

Enhancements (0.9.5):
üß© Binary Compatibility: Emulates binary opcodes via hash-based dispatch (O(1)), toggled by HANOI_BINARY_MODE.
üîÑ Native Opcode Dispatch: Expanded to include T81_SUB, T243_CMP, T729_CALL with stack operations.
ü§ñ Grok API Integration: Asynchronous API calls with response caching in synergy_grok_analyze_opcode.
üìù Memory-Mapped I/O: Optimized trace exports in synergy_secure_export_trace using mmap.
üîê API Key Security: Grok API key via HANOI_GROK_API_KEY environment variable.
üßπ Memory Cleanup: Enhanced synergy_cleanup with stack reset.
üß™ Extended Testing: Added tests for new opcodes, async API, mmap I/O, and trace replay.
üîÅ synergy_chain_query: NLP continuation logic for chained queries.
üì¶ synergy_trace_session: Exports .t81z traces and logs to /var/log/axion/trace.t81log.
üí¨ synergy_prompt_macro: Generates Grok-friendly prompts.
üß† synergy_explain: Natural language summary of execution.
üîç synergy_reason: T729 inference with cached Grok analysis.
üõ°Ô∏è Fixed sodium_memcmp bug in synergy_secure_export_trace.
üìö Improved documentation for HVMContext, Rust FFI, binary emulation, and Grok integration.
‚ö° Optimized compression with streaming and mmap.
üîí Thread-safe logging with mutex, HANOI_LOG_LEVEL, and file locking for trace logs.
üìè Buffer-safe string operations with explicit sizes.
üîÑ synergy_replay_session: Replays trace logs for testing and validation.

Previous Enhancements (0.9.4):
1. Native Opcode Dispatch: T81_ADD, T243_MOV, T729_JMP.
2. Grok API Integration: Real-time binary opcode analysis.
3. Memory Cleanup: synergy_cleanup for HVMContext.
4. Testing: Mock stack and multi-threaded dispatch tests.
5. Logging: Configurable via HANOI_LOG_LEVEL.
6. Error Tracking: error_count in HVMContext.

New Enhancements (0.9.5):
1. Hash-Based Opcode Dispatch: Replaced strcmp with hash table for O(1) lookup.
2. Async Grok API: Non-blocking CURL multi-interface for API calls.
3. Memory-Mapped I/O: mmap for large trace exports.
4. API Key Security: Environment variable for Grok API authentication.
5. Expanded Opcodes: Added T81_SUB, T243_CMP, T729_CALL.
6. Response Caching: Cache Grok API responses to reduce network calls.
7. Testing: Added tests for new opcodes, async API, mmap, and trace replay.
8. Plain Text Trace Logging: Added to synergy_trace_session for Grok Bridge compatibility.
9. Trace Replay: Added synergy_replay_session for log-based validation.

@<Include Dependencies@>=
#include "hanoivm_vm.h"
#include "t81_stack.h"
#include "axion_api.h"
#include "recursion_exporter.h"
#include "nist_encryption.h"
#include "disassembler.h"
#include "advanced_ops.h"
#include "binary_compat.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <zlib.h>
#include <sodium.h>
#include <json-c/json.h>
#include <pthread.h>
#include <curl/curl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/file.h>
#include "libt81.h"
#include "libt243.h"
#include "libt729.h"

@#
@<Error Handling@>=
typedef enum {
    SYNERGY_OK = 0,
    SYNERGY_FILE_ERROR = 1,
    SYNERGY_ENCRYPTION_ERROR = 2,
    SYNERGY_MEMORY_ERROR = 3,
    SYNERGY_INVALID_KEY = 4,
    SYNERGY_RUST_FFI_ERROR = 5,
    SYNERGY_COMPRESSION_ERROR = 6,
    SYNERGY_JSON_ERROR = 7,
    SYNERGY_INVALID_OPCODE = 8,
    SYNERGY_GROK_API_ERROR = 9,
    SYNERGY_MMAP_ERROR = 10,
    SYNERGY_TRACE_REPLAY_ERROR = 11,
} SynergyError;

const char* synergy_error_str(SynergyError err) {
    switch (err) {
        case SYNERGY_OK: return "Success";
        case SYNERGY_FILE_ERROR: return "File I/O error";
        case SYNERGY_ENCRYPTION_ERROR: return "Encryption error";
        case SYNERGY_MEMORY_ERROR: return "Memory allocation error";
        case SYNERGY_INVALID_KEY: return "Invalid AES key or IV";
        case SYNERGY_RUST_FFI_ERROR: return "Rust FFI error";
        case SYNERGY_COMPRESSION_ERROR: return "Compression error";
        case SYNERGY_JSON_ERROR: return "JSON parsing error";
        case SYNERGY_INVALID_OPCODE: return "Invalid opcode";
        case SYNERGY_GROK_API_ERROR: return "Grok API error";
        case SYNERGY_MMAP_ERROR: return "Memory mapping error";
        case SYNERGY_TRACE_REPLAY_ERROR: return "Trace replay error";
        default: return "Unknown error";
    }
}

@#
@<Logging@>=
typedef enum { LOG_INFO, LOG_ERROR, LOG_DEBUG } LogLevel;
static int log_level = LOG_INFO;
static pthread_mutex_t log_mutex = PTHREAD_MUTEX_INITIALIZER;

void synergy_log(LogLevel level, const char* message) {
    if (level < log_level) return;
    pthread_mutex_lock(&log_mutex);
    const char* prefix;
    switch (level) {
        case LOG_INFO: prefix = "[INFO]"; break;
        case LOG_ERROR: prefix = "[ERROR]"; break;
        case LOG_DEBUG: prefix = "[DEBUG]"; break;
        default: prefix = "[UNKNOWN]"; break;
    }
    char timestamp[32];
    time_t now = time(NULL);
    strftime(timestamp, sizeof(timestamp), "%Y-%m-%d %H:%M:%S", localtime(&now));
    fprintf(stderr, "%s %s %s\n", timestamp, prefix, message);
    char buf[512];
    snprintf(buf, sizeof(buf), "[Synergy %s] %s", prefix + 1, message);
    axion_log(buf);
    pthread_mutex_unlock(&log_mutex);
}

void synergy_set_log_level(const char* env) {
    if (env && strcmp(env, "DEBUG") == 0) log_level = LOG_DEBUG;
    else if (env && strcmp(env, "ERROR") == 0) log_level = LOG_ERROR;
    else log_level = LOG_INFO;
}

@#
@* Opcode Hash Table
Implements a simple hash table for O(1) opcode dispatch.

@c
#define HASH_SIZE 16
typedef enum { OP_TYPE_BINARY, OP_TYPE_NATIVE } OpcodeType;
typedef struct {
    const char* opcode;
    OpcodeType type;
    union {
        BinaryOpcode binary_op;
        int (*native_handler)(HVMContext*, int, int);
    } handler;
} OpcodeEntry;

static OpcodeEntry opcode_table[HASH_SIZE];
static int opcode_table_initialized = 0;
static pthread_mutex_t opcode_mutex = PTHREAD_MUTEX_INITIALIZER;

unsigned int hash_opcode(const char* opcode) {
    unsigned int hash = 0;
    while (*opcode) hash = (hash * 31) + *opcode++;
    return hash % HASH_SIZE;
}

void init_opcode_table(void) {
    pthread_mutex_lock(&opcode_mutex);
    if (opcode_table_initialized) {
        pthread_mutex_unlock(&opcode_mutex);
        return;
    }
    memset(opcode_table, 0, sizeof(opcode_table));
    // Binary opcodes
    opcode_table[hash_opcode("BADD")] = (OpcodeEntry){"BADD", OP_TYPE_BINARY, .handler.binary_op = OP_BADD};
    opcode_table[hash_opcode("BAND")] = (OpcodeEntry){"BAND", OP_TYPE_BINARY, .handler.binary_op = OP_BAND};
    opcode_table[hash_opcode("BOR")] = (OpcodeEntry){"BOR", OP_TYPE_BINARY, .handler.binary_op = OP_BOR};
    opcode_table[hash_opcode("BNOT")] = (OpcodeEntry){"BNOT", OP_TYPE_BINARY, .handler.binary_op = OP_BNOT};
    // Native opcodes (placeholders)
    opcode_table_initialized = 1;
    pthread_mutex_unlock(&opcode_mutex);
}

[... Unchanged sections: Global Hook Initialization, Memory Cleanup, Tier Awareness and Symbolic Tracking, Binary Compatibility Opcode Hook, Native Opcode Handlers, Native Opcode Dispatcher, Symbolic Opcode Dispatcher, Grok API Integration with Caching, AES-Secured Export with Memory Mapping, AI-Enhanced Disassembly and Analysis ...]

@#
@* Plain Text Trace Logging
Logs query type, value, and ternary state to a plain text file for compatibility with
the Grok API Bridge, using thread-safe file access.

@c
void synergy_trace_log(const char *query_type, const char *value, const char *ternary_state) {
    FILE *log = fopen("/var/log/axion/trace.t81log", "a");
    if (!log) {
        synergy_log(LOG_ERROR, "Failed to open trace log file /var/log/axion/trace.t81log");
        return;
    }
    if (flock(fileno(log), LOCK_EX) != 0) {
        synergy_log(LOG_ERROR, "Failed to lock trace log file");
        fclose(log);
        return;
    }
    fprintf(log, "[TRACE] type=%s value=%s state=%s\n", query_type, value, ternary_state ? ternary_state : "NULL");
    if (flock(fileno(log), LOCK_UN) != 0) {
        synergy_log(LOG_ERROR, "Failed to unlock trace log file");
    }
    fclose(log);
    synergy_log(LOG_DEBUG, "Logged trace to /var/log/axion/trace.t81log");
}

@#
@* Export .t81z Trace Capsule and Plain Text Log
Exports a compressed and encrypted trace snapshot to a .t81z file and logs to a plain
text file for auditability.

@c
SynergyError synergy_trace_session(HVMContext* ctx, const char* outpath, const char *query_type, const char *value, const char *ternary_state) {
    if (!ctx) {
        synergy_log(LOG_ERROR, "Invalid context in synergy_trace_session");
        ctx->error_count++;
        return SYNERGY_MEMORY_ERROR;
    }
    // Log to plain text file if query details provided
    if (query_type && value) {
        synergy_trace_log(query_type, value, ternary_state);
    }
    // Export .t81z trace if outpath provided
    if (outpath) {
        unsigned char dummy_key[16] = {0};
        unsigned char dummy_iv[16] = {0};
        return synergy_secure_export_trace(ctx, outpath, dummy_key, dummy_iv);
    }
    return SYNERGY_OK;
}

@#
@* Replay Trace Log
Parses and replays trace logs from /var/log/axion/trace.t81log to validate or test
symbolic queries.

@c
SynergyError synergy_replay_session(HVMContext* ctx, const char* logpath, json_object** out) {
    if (!ctx || !logpath || !out) {
        synergy_log(LOG_ERROR, "Invalid parameters in synergy_replay_session");
        ctx->error_count++;
        return SYNERGY_MEMORY_ERROR;
    }
    FILE* log = fopen(logpath, "r");
    if (!log) {
        synergy_log(LOG_ERROR, "Failed to open trace log file");
        ctx->error_count++;
        return SYNERGY_FILE_ERROR;
    }
    *out = json_object_new_array();
    char line[8192];
    while (fgets(line, sizeof(line), log)) {
        if (strncmp(line, "[TRACE]", 7) != 0) continue;
        char type[256] = {0}, value[4096] = {0}, state[4096] = {0};
        if (sscanf(line, "[TRACE] type=%255[^=] value=%4095[^=] state=%4095[^\n]", type, value, state) < 2) {
            synergy_log(LOG_WARNING, "Invalid trace line format");
            continue;
        }
        // Re-execute query via synergy_chain_query
        json_object* query_out = NULL;
        if (synergy_chain_query(ctx, value, &query_out) == SYNERGY_OK && query_out) {
            json_object_array_add(*out, query_out);
        } else {
            synergy_log(LOG_ERROR, "Failed to replay query");
            json_object_array_add(*out, json_object_new_string("Replay failed"));
            ctx->error_count++;
        }
    }
    fclose(log);
    synergy_log(LOG_INFO, "Trace log replay completed");
    return SYNERGY_OK;
}

@#
@* Chain NLP Query
Executes a symbolic query via AxionCLI.

[... Unchanged ...]

@#
@* Exportable Interface
@h
typedef enum {
    SYNERGY_OK = 0,
    SYNERGY_FILE_ERROR = 1,
    SYNERGY_ENCRYPTION_ERROR = 2,
    SYNERGY_MEMORY_ERROR = 3,
    SYNERGY_INVALID_KEY = 4,
    SYNERGY_RUST_FFI_ERROR = 5,
    SYNERGY_COMPRESSION_ERROR = 6,
    SYNERGY_JSON_ERROR = 7,
    SYNERGY_INVALID_OPCODE = 8,
    SYNERGY_GROK_API_ERROR = 9,
    SYNERGY_MMAP_ERROR = 10,
    SYNERGY_TRACE_REPLAY_ERROR = 11,
} SynergyError;

const char* synergy_error_str(SynergyError err);
SynergyError synergy_initialize(HVMContext* ctx);
void synergy_cleanup(HVMContext* ctx);
const char* summary_detect_tier(HVMContext* ctx);
const char* synergy_get_opcode(HVMContext* ctx);
const char* synergy_get_intent(HVMContext* ctx);
SynergyError synergy_handle_binary_opcode(HVMContext* ctx, const char* opcode);
SynergyError synergy_execute(HVMContext* ctx, const char* opcode);
SynergyError synergy_secure_export_trace(HVMContext* ctx, const char* path,
                                        const unsigned char* aes_key,
                                        const unsigned char* iv);
SynergyError synergy_ai_disassemble(HVMContext* ctx);
SynergyError synergy_ai_analyze(HVMContext* ctx, const char* report_path);
SynergyError synergy_trace_session(HVMContext* ctx, const char* outpath, const char *query_type, const char *value, const char *ternary_state);
SynergyError synergy_replay_session(HVMContext* ctx, const char* logpath, json_object** out);
SynergyError synergy_chain_query(HVMContext* ctx, const char* input, json_object** out);
const char* synergy_explain(HVMContext* ctx);
const char* synergy_prompt_macro(HVMContext* ctx);
SynergyError synergy_reason(HVMContext* ctx, json_object** out);
const char* synergy_version(void);
void synergy_set_log_level(const char* env);

@#
@* Testing
Unit tests with Check framework, including new opcodes, async API, mmap, and trace logging/replay.

@c
#ifdef SYNERGY_TEST
#include <check.h>
#include <pthread.h>

[... Unchanged tests: test_initialize, test_tier_detection, test_explain, test_prompt_macro, test_binary_opcode, test_native_opcode, test_multithreaded_dispatch, test_grok_cache, test_mmap_trace ...]

START_TEST(test_trace_session) {
    HVMContext ctx = {0};
    synergy_initialize(&ctx);
    strncpy(ctx.session_id, "test_session", sizeof(ctx.session_id));
    // Test .t81z export
    ck_assert_int_eq(synergy_trace_session(&ctx, "test.t81z", NULL, NULL, NULL), SYNERGY_OK);
    // Test plain text logging
    ck_assert_int_eq(synergy_trace_session(&ctx, NULL, "reflect", "test query", "test state"), SYNERGY_OK);
    // Verify log file
    FILE* log = fopen("/var/log/axion/trace.t81log", "r");
    ck_assert_ptr_nonnull(log);
    char line[8192];
    int found = 0;
    while (fgets(line, sizeof(line), log)) {
        if (strstr(line, "type=reflect value=test query state=test state")) {
            found = 1;
            break;
        }
    }
    fclose(log);
    ck_assert_int_eq(found, 1);
    synergy_cleanup(&ctx);
}
END_TEST

START_TEST(test_replay_session) {
    HVMContext ctx = {0};
    synergy_initialize(&ctx);
    strncpy(ctx.session_id, "test_session", sizeof(ctx.session_id));
    // Create a mock trace log
    FILE* log = fopen("/var/log/axion/trace.t81log", "w");
    ck_assert_ptr_nonnull(log);
    fprintf(log, "[TRACE] type=reflect value=test query state=test state\n");
    fclose(log);
    json_object* out = NULL;
    ck_assert_int_eq(synergy_replay_session(&ctx, "/var/log/axion/trace.t81log", &out), SYNERGY_OK);
    ck_assert_ptr_nonnull(out);
    ck_assert_int_ge(json_object_array_length(out), 1);
    json_object_put(out);
    synergy_cleanup(&ctx);
}
END_TEST

Suite* synergy_suite(void) {
    Suite* s = suite_create("Synergy");
    TCase* tc_core = tcase_create("Core");
    tcase_add_test(tc_core, test_initialize);
    tcase_add_test(tc_core, test_tier_detection);
    tcase_add_test(tc_core, test_explain);
    tcase_add_test(tc_core, test_prompt_macro);
    tcase_add_test(tc_core, test_trace_session);
    tcase_add_test(tc_core, test_replay_session);
    tcase_add_test(tc_core, test_binary_opcode);
    tcase_add_test(tc_core, test_native_opcode);
    tcase_add_test(tc_core, test_multithreaded_dispatch);
    tcase_add_test(tc_core, test_grok_cache);
    tcase_add_test(tc_core, test_mmap_trace);
    suite_add_tcase(s, tc_core);
    return s;
}

int main(void) {
    Suite* s = synergy_suite();
    SRunner* sr = srunner_create(s);
    srunner_run_all(sr, CK_NORMAL);
    int failures = srunner_ntests_failed(sr);
    srunner_free(sr);
    return failures == 0 ? 0 : 1;
}
#endif

@#
@* End of synergy.cweb
Key Changes and Improvements
- Version: Updated to 0.9.5 with hash-based dispatch, async Grok, mmap I/O, and enhanced trace logging.
- Opcode Dispatch: Hash table for O(1) binary and native opcodes.
- Grok API: Async with caching and API key security.
- Trace I/O: Memory-mapped for .t81z exports, plain text logging to /var/log/axion/trace.t81log.
- Opcodes: Added T81_SUB, T243_CMP, T729_CALL.
- Testing: Enhanced with test_trace_session and test_replay_session.
- Security: HANOI_GROK_API_KEY for API authentication, thread-safe logging with flock.
Notes
- Assumptions: binary_funcs.cweb defines binary_compat_dispatch with buffered logging.
HVMContext includes error_count. Grok endpoint is mocked.
- Testing: Verifies new opcodes, async cache, mmap I/O, trace logging, and replay.
- Future Work: Expand hash table, implement real T729_CALL/JMP, profile I/O, add T81-encoded trace logs.
