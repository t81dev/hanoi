@* HanoiVM | Ternary Virtual Machine with CLI Interface and Enhanced Runtime Execution
This module provides a command-line interface for executing HanoiVM programs.
It supports different VM modes (T81, T243, T729), file execution, debugging, tracing, and benchmarking.
@c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "hvm_context.h"
#include "hvm_promotion.h"
@#

@<Define VM modes@>=
typedef enum {
    MODE_T81,
    MODE_T243,
    MODE_T729
} VMMode;

@<Define configuration structure@>=
typedef struct {
    VMMode mode;
    const char* exec_file;
    int debug;
    int trace;
    int benchmark;
} VMConfig;

@<Initialize default configuration@>=
VMConfig vm_config = {
    .mode = MODE_T81,
    .exec_file = NULL,
    .debug = 0,
    .trace = 0,
    .benchmark = 0
};

@<Print CLI usage@>=
void print_usage(const char* prog) {
    printf("Usage: %s [options]\n", prog);
    printf("Options:\n");
    printf("  --mode=t81|t243|t729     Set VM mode (default: t81)\n");
    printf("  --exec <file.hvm>        Execute HVM program file\n");
    printf("  --debug                  Enable debug output\n");
    printf("  --trace                  Enable opcode trace\n");
    printf("  --benchmark              Benchmark execution time\n");
    printf("  --help                   Show this help message\n");
}

@<Parse command-line arguments@>=
void parse_args(int argc, char* argv[]) {
    for (int i = 1; i < argc; i++) {
        if (strncmp(argv[i], "--mode=", 7) == 0) {
            const char* mode = argv[i] + 7;
            if (strcmp(mode, "t81") == 0) vm_config.mode = MODE_T81;
            else if (strcmp(mode, "t243") == 0) vm_config.mode = MODE_T243;
            else if (strcmp(mode, "t729") == 0) vm_config.mode = MODE_T729;
            else {
                fprintf(stderr, "Unknown mode: %s\n", mode);
                exit(1);
            }
        } else if (strcmp(argv[i], "--exec") == 0 && i + 1 < argc) {
            vm_config.exec_file = argv[++i];
        } else if (strcmp(argv[i], "--debug") == 0) {
            vm_config.debug = 1;
        } else if (strcmp(argv[i], "--trace") == 0) {
            vm_config.trace = 1;
        } else if (strcmp(argv[i], "--benchmark") == 0) {
            vm_config.benchmark = 1;
        } else if (strcmp(argv[i], "--help") == 0) {
            print_usage(argv[0]);
            exit(0);
        } else {
            fprintf(stderr, "Unknown argument: %s\n", argv[i]);
            print_usage(argv[0]);
            exit(1);
        }
    }
}

@<Load program from file@>=
char* load_program(const char* filename, size_t* size) {
    FILE* fp = fopen(filename, "rb");
    if (!fp) {
        perror("Error opening exec file");
        exit(1);
    }
    fseek(fp, 0, SEEK_END);
    long fsize = ftell(fp);
    rewind(fp);
    char* buffer = (char*)malloc(fsize + 1);
    if (!buffer) {
        fprintf(stderr, "Memory allocation failed for program file\n");
        exit(1);
    }
    fread(buffer, 1, fsize, fp);
    fclose(fp);
    buffer[fsize] = '\0';
    if (size) *size = fsize;
    return buffer;
}

@<Define ternary register bank@>=
#define TERNARY_REGISTERS 28
int τ[TERNARY_REGISTERS];

@<Define T81 stack structure@>=
#define STACK_SIZE 2187
int T81Stack[STACK_SIZE];
int sp = -1;

@<Initialize VM@>=
void initialize_vm() {
    printf("[HanoiVM] Initializing VM...\n");
    for (int i = 0; i < TERNARY_REGISTERS; i++) τ[i] = 0;
    for (int i = 0; i < STACK_SIZE; i++) T81Stack[i] = 0;
    sp = -1;
}

@<Dispatch T81 instruction set@>=
void dispatch_t81() {
    printf("[T81] >> PUSH81 1\n");
    T81Stack[++sp] = 1;
    printf("[T81] >> PUSH81 2\n");
    T81Stack[++sp] = 2;
    printf("[T81] >> ADD81\n");
    int a = T81Stack[sp--];
    int b = T81Stack[sp--];
    T81Stack[++sp] = a + b;
    printf("[T81] >> Result: %d\n", T81Stack[sp]);
}

@<Run VM Core Loop@>=
void run_vm() {
    printf("[HanoiVM] Executing core loop...\n");
    HVMContext ctx = { .ip = 0, .halted = 0, .mode = vm_config.mode, .mode_flags = 0, .call_depth = 0 };

    if (vm_config.trace) {
        TRACE_MODE(&ctx);
    }
    // Apply mode promotions if applicable.
    PROMOTE_T243(&ctx);
    PROMOTE_T729(&ctx);
    DEMOTE_STACK(&ctx);

    switch (ctx.mode) {
        case MODE_T81:
            printf("[HanoiVM] Executing in T81 mode...\n");
            dispatch_t81();
            break;
        case MODE_T243:
            printf("[HanoiVM] Executing in T243 mode...\n");
            // Insert T243 dispatch logic here.
            break;
        case MODE_T729:
            printf("[HanoiVM] Executing in T729 mode...\n");
            // Insert T729 dispatch logic here.
            break;
        default:
            fprintf(stderr, "Unknown VM mode.\n");
            exit(1);
    }
}

@<Benchmark wrapper@>=
void benchmark_vm() {
    clock_t start = clock();
    run_vm();
    clock_t end = clock();
    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;
    printf("[Benchmark] Execution time: %.3f seconds\n", elapsed);
}

@<Main function@>=
int main(int argc, char* argv[]) {
    parse_args(argc, argv);

    printf("[HanoiVM] Starting...\n");
    printf("Mode        : %s\n", vm_config.mode == MODE_T81 ? "T81" :
                                     vm_config.mode == MODE_T243 ? "T243" : "T729");
    if (vm_config.exec_file)
        printf("Exec File   : %s\n", vm_config.exec_file);
    if (vm_config.debug)
        printf("Debug Mode  : ON\n");
    if (vm_config.trace)
        printf("Trace Mode  : ON\n");
    if (vm_config.benchmark)
        printf("Benchmark   : ON\n");

    initialize_vm();

    // If an execution file is provided, load the program.
    if (vm_config.exec_file) {
        size_t prog_size = 0;
        char* program = load_program(vm_config.exec_file, &prog_size);
        printf("[HanoiVM] Loaded program of size %zu bytes\n", prog_size);
        // Integration point: Parse and load program instructions into the VM context.
        free(program);
    }

    if (vm_config.benchmark) {
        benchmark_vm();
    } else {
        run_vm();
    }

    return 0;
}
@#
