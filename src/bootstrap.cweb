@* bootstrap.cweb | HanoiVM Bootstrap Loader and Preflight Checks

This module defines the bootstrap sequence for HanoiVM, validating system readiness and
launching the ternary execution runtime. It integrates with `hanoivm_fsm.v` via PCIe/M.2,
`axion-ai.cweb` via ioctls/debugfs, `hanoivm-core.cweb` and `hanoivm-runtime.cweb` via FFI,
`hanoivm_vm.cweb`’s execution core, `hanoivm_firmware.cweb`’s firmware,
`axion-gaia-interface.cweb`’s GPU dispatch, `axion_api.cweb`’s recursion optimization,
`axion_gpu_serializer.cweb`’s GPU serialization, and `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Comprehensive preflight checks for hardware, GPU, and Rust runtime.
- Modular initialization table for extensibility.
- Entropy logging via `axion-ai.cweb`’s debugfs.
- Session memory integration with `axion-ai.cweb`’s `axion_session_t`.
- FFI interface to `hanoivm-core.cweb` (Rust) and `hanoivm-runtime.cweb` (C).
- Secure validation for configuration, stack, and module states.
- JSON visualization for config and diagnostics.
- Support for `.hvm` test bytecode (`T81_MATMUL` + `TNN_ACCUM`).
- Optimized for ternary runtime initialization.

@c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "config.h"
#include "init.h"
#include "axion_api.h"
#include "t81_stack.h"
#include "hanoivm_vm.h"
#include "axion-ai.h"
#include "hanoivm_core.h"
#include "hanoivm_runtime.h"
#include "axion-gaia-interface.h"
#include "axion_gpu_serializer.h"

#define MAX_LOG_MSG 128
#define BOOT_SESSION_ID "BOOT-%016lx"

@<Initialization Strategy Table@>=
typedef struct {
    const char* name;
    int (*init)(HanoiVMConfig* config);
    const char* description;
} BootInitStrategy;

static int init_stack(HanoiVMConfig* config) {
    if (!initialize_stack_state()) {
        axion_log_entropy("INIT_STACK_FAIL", 0xFF);
        return 1;
    }
    axion_log_entropy("INIT_STACK_SUCCESS", 0);
    return 0;
}

static int init_axion(HanoiVMConfig* config) {
    if (!axion_init()) {
        axion_log_entropy("INIT_AXION_FAIL", 0xFF);
        return 2;
    }
    axion_log_entropy("INIT_AXION_SUCCESS", 0);
    return 0;
}

static BootInitStrategy init_strategies[] = {
    { "stack", init_stack, "Initialize T81 stack state" },
    { "axion", init_axion, "Ping Axion AI kernel" },
    // More in Part 2
    { NULL, NULL, NULL }
};
