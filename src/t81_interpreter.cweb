@* t81lang_interpreter.cweb | T81Lang HVM Interpreter with Stack Safety, AI Integration, and Recursive Handling (v0.9.3)

This module interprets HanoiVM bytecode for T81Lang, supporting advanced T81/T243/T729 opcodes,
type-aware operands, label resolution, session-aware entropy logging, and GPU-based execution.
It integrates with `hanoivm_fsm.v` via PCIe/M.2, `axion-ai.cweb` via ioctls/debugfs,
`hanoivm-core.cweb` and `hanoivm-runtime.cweb` via FFI, `hanoivm_vm.cweb’`s execution core,
`hanoivm_firmware.cweb’`s firmware, `axion-gaia-interface.cweb’`s GPU dispatch,
`axion_api.cweb’`s recursion optimization, `axion_gpu_serializer.cweb’`s GPU serialization,
`bootstrap.cweb’`s bootstrap sequence, `config.cweb’`s configuration, `cuda_handle_request.cweb’`s CUDA backend,
`gaia_handle_request.cweb’`s ROCm backend, `disasm_hvm.cweb’`s type-aware disassembly,
`disassembler.cweb’`s advanced disassembly, `emit_hvm.cweb’`s bytecode emission,
`entropy_monitor.cweb’`s entropy monitoring, `ghidra_hvm_plugin.cweb’`s Ghidra integration,
`hanoivm-test.cweb’`s unit testing, `hanoivm.cweb’`s CLI execution,
`hvm_assembler.cweb’`s bytecode assembly, and `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Support for recursive opcodes (`RECURSE_FACT`) and T729 intents (`T81_MATMUL`).
- Type-aware operands (`T81_TAG_VECTOR`, `T81_TAG_TENSOR`).
- Dynamic label resolution.
- Modular opcode dispatch table.
- Entropy logging via `axion-ai.cweb’`s debugfs and `entropy_monitor.cweb`.
- Session memory integration with `axion-ai.cweb’`s `axion_session_t`.
- FFI interface to `hanoivm-core.cweb` (Rust) and `hanoivm-runtime.cweb` (C).
- Secure validation for bytecode, opcodes, and operands.
- JSON visualization for execution traces.
- Support for `.hvm` test bytecode (`T81_MATMUL` + `TNN_ACCUM`).
- Optimized for user-space interpretation.

@c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include "config.h"
#include "ai_hook.h"
#include "t81_stack.h"
#include "log_trace.h"
#include "t81types.h"
#include "hvm_loader.h"
#include "axion-ai.h"
#include "hanoivm_core.h"
#include "hanoivm_runtime.h"
#include "axion-gaia-interface.h"
#include "disasm_hvm.h"

#define MAX_REGS 256
#define MAX_LABELS 128
#define MAX_RECURSION_DEPTH 100
#define T81_STACK_SIZE 2187
#define T81_TAG_BIGINT 0x01
#define T81_TAG_MATRIX 0x04
#define T81_TAG_VECTOR 0x05

@<Structures and Globals@>=
typedef struct {
    char name[64];
    uint81_t value;
} Register;

typedef struct {
    char label[64];
    size_t addr;
} Label;

typedef struct {
    size_t ip;
    int halted;
    int recursion_depth;
    int mode;
    int mode_flags;
    int call_depth;
    uint8_t* code;
    size_t code_size;
    int stack[T81_STACK_SIZE];
    int sp;
    Register registers[MAX_REGS];
    int reg_count;
    Label labels[MAX_LABELS];
    int label_count;
} HVMContext;

static HVMContext ctx;
static char session_id[32];

@<Opcode Dispatch Table@>=
typedef struct {
    uint8_t opcode;
    const char* name;
    void (*exec_func)(HVMContext*);
} OpcodeInfo;

static void exec_push(HVMContext* ctx) {
    uint8_t tag = ctx->code[ctx->ip++];
    uint32_t value = *(uint32_t*)(ctx->code + ctx->ip);
    ctx->ip += 4;
    if (ctx->sp >= T81_STACK_SIZE - 1) {
        axion_log_entropy("STACK_OVERFLOW", ctx->sp);
        exit(1);
    }
    ctx->stack[++ctx->sp] = value;
    axion_log_entropy("EXEC_PUSH", tag);
}

static void exec_matmul(HVMContext* ctx) {
    int a = ctx->stack[ctx->sp--];
    int b = ctx->stack[ctx->sp--];
    GaiaRequest req = { .tbin = (uint8_t*)&b, .tbin_len = sizeof(int), .intent = GAIA_T729_DOT };
    GaiaResponse res = gaia_handle_request(req);
    ctx->stack[++ctx->sp] = res.updated_macro[0];
    axion_log_entropy("EXEC_T81_MATMUL", res.entropy_delta);
}

static OpcodeInfo opcodes[] = {
    { 0x01, "PUSH", exec_push },
    { 0x03, "ADD", NULL },
    { 0x21, "T81_MATMUL", exec_matmul },
    { 0x30, "RECURSE_FACT", NULL },
    { 0xFF, "HALT", NULL },
    { 0x00, NULL, NULL }
};

@<Stack Operations@>=
void push81(HVMContext* ctx, int value) {
    if (ctx->sp >= T81_STACK_SIZE - 1) {
        fprintf(stderr, "[T81] Stack overflow!\n");
        axion_log_entropy("STACK_OVERFLOW", ctx->sp);
        exit(1);
    }
    ctx->stack[++ctx->sp] = value;
    axion_log_entropy("STACK_PUSH", value & 0xFF);
}

int pop81(HVMContext* ctx) {
    if (ctx->sp < 0) {
        fprintf(stderr, "[T81] Stack underflow!\n");
        axion_log_entropy("STACK_UNDERFLOW", ctx->sp);
        exit(1);
    }
    int value = ctx->stack[ctx->sp--];
    axion_log_entropy("STACK_POP", value & 0xFF);
    return value;
}

int peek81(HVMContext* ctx) {
    if (ctx->sp < 0) {
        fprintf(stderr, "[T81] Stack empty (peek)\n");
        axion_log_entropy("STACK_EMPTY_PEEK", ctx->sp);
        exit(1);
    }
    return ctx->stack[ctx->sp];
}

void dup81(HVMContext* ctx) {
    int val = peek81(ctx);
    push81(ctx, val);
    axion_log_entropy("STACK_DUP", val & 0xFF);
}

void swap81(HVMContext* ctx) {
    if (ctx->sp < 1) {
        fprintf(stderr, "[T81] swap81: Not enough elements\n");
        axion_log_entropy("STACK_SWAP_FAIL", ctx->sp);
        exit(1);
    }
    int a = pop81(ctx);
    int b = pop81(ctx);
    push81(ctx, a);
    push81(ctx, b);
    axion_log_entropy("STACK_SWAP", ctx->sp);
}

void drop81(HVMContext* ctx) {
    if (ctx->sp < 0) {
        fprintf(stderr, "[T81] drop81: Stack empty\n");
        axion_log_entropy("STACK_DROP_FAIL", ctx->sp);
        exit(1);
    }
    pop81(ctx);
    axion_log_entropy("STACK_DROP", ctx->sp);
}

@<Recursive Execution@>=
void execute_recursive_fact(HVMContext* ctx) {
    if (ctx->recursion_depth > MAX_RECURSION_DEPTH) {
        fprintf(stderr, "[VM] Recursion depth exceeded\n");
        axion_log_entropy("RECURSION_DEPTH_EXCEEDED", ctx->recursion_depth);
        exit(1);
    }
    ctx->recursion_depth++;
    extern int rust_factorial(int n);
    int num = pop81(ctx);
    int result = rust_factorial(num);
    push81(ctx, result);
    ctx->recursion_depth--;
    axion_log_entropy("EXEC_RECURSE_FACT", result & 0xFF);
}

@<Label Handling@>=
static void add_label(HVMContext* ctx, const char* name, size_t addr) {
    if (ctx->label_count >= MAX_LABELS) {
        fprintf(stderr, "[T81] Label table overflow\n");
        axion_log_entropy("LABEL_OVERFLOW", ctx->label_count);
        exit(1);
    }
    strncpy(ctx->labels[ctx->label_count].label, name, sizeof(ctx->labels[ctx->label_count].label)-1);
    ctx->labels[ctx->label_count].addr = addr;
    ctx->label_count++;
    axion_log_entropy("LABEL_ADD", addr & 0xFF);
}

@<Interpret HVM@>=
void interpret_hvm(const char* hvm_file) {
    size_t size;
    ctx.code = (uint8_t*)load_hvm(hvm_file, &size);
    ctx.code_size = size;
    ctx.ip = 0;
    ctx.halted = 0;
    ctx.sp = -1;
    ctx.recursion_depth = 0;
    ctx.reg_count = 0;
    ctx.label_count = 0;
    axion_register_session(session_id);

    while (!ctx.halted && ctx.ip < ctx.code_size) {
        uint8_t opcode = ctx.code[ctx.ip++];
        extern int rust_execute_opcode(uint8_t opcode, HVMContext* ctx);
        for (int i = 0; opcodes[i].exec_func; i++) {
            if (opcodes[i].opcode == opcode) {
                opcodes[i].exec_func(&ctx);
                axion_log_entropy("EXEC_OPCODE", opcode);
                goto next;
            }
        }
        if (rust_execute_opcode(opcode, &ctx)) {
            axion_log_entropy("RUST_EXEC_OPCODE", opcode);
            goto next;
        }
        fprintf(stderr, "[ERROR] Unknown opcode: 0x%02X at IP=%zu\n", opcode, ctx.ip-1);
        axion_log_entropy("UNKNOWN_OPCODE", opcode);
        ctx.halted = 1;
next:
        continue;
    }

    if (ctx.code) free(ctx.code);
    axion_log_entropy("INTERPRET_COMPLETE", ctx.ip & 0xFF);
}

@<Visualization Hook@>=
void visualize_execution(HVMContext* ctx, char* out_json, size_t max_len) {
    size_t len = snprintf(out_json, max_len,
        "{\"session\": \"%s\", \"ip\": %zu, \"stack\": [", session_id, ctx->ip);
    for (int i = 0; i <= ctx->sp && len < max_len; i++) {
        len += snprintf(out_json + len, max_len - len, "%d%s",
                        ctx->stack[i], i < ctx->sp ? "," : "");
    }
    len += snprintf(out_json + len, max_len - len, "], \"labels\": [");
    for (int i = 0; i < ctx->label_count && len < max_len; i++) {
        len += snprintf(out_json + len, max_len - len, "{\"name\": \"%s\", \"addr\": %zu}%s",
                        ctx->labels[i].label, ctx->labels[i].addr, i < ctx->label_count-1 ? "," : "");
    }
    len += snprintf(out_json + len, max_len - len, "]}");
    axion_log_entropy("VISUALIZE_EXEC", len & 0xFF);
}

@<Main Function@>=
int main(int argc, char* argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <input.hvm>\n", argv[0]);
        exit(1);
    }
    snprintf(session_id, sizeof(session_id), "T81-%016lx", (uint64_t)argv[1]);
    axion_register_session(session_id);
    interpret_hvm(argv[1]);
    char json[512];
    visualize_execution(&ctx, json, sizeof(json));
    GaiaRequest req = { .tbin = (uint8_t*)json, .tbin_len = strlen(json), .intent = GAIA_T729_DOT };
    GaiaResponse res = gaia_handle_request(req);
    axion_log_entropy("MAIN_INTEGRATE_GAIA", res.symbolic_status);
    return 0;
}

