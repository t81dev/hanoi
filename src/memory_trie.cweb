@* memory_trie.cweb | Symbolic Memory Trie for Axion AI
This module implements a ternary trie for symbolic memory entries with episodic
encoding, supporting temporal and contextual metadata, entropy scoring, and replay.
Entries are sourced from `/var/log/axion/trace.t81log` or `dreams.t81sym` and
exposed via `/sys/kernel/debug/axion-ai/memory`. Integrates with `synergy.cweb`,
`planner.cweb`, `ethics.cweb`, and `axionctl.cweb`.

Enhancements:
üå≥ Ternary Trie: Stores entries with ternary state keys.
üìÖ Episodic Encoding: Adds timestamps, context, and goal IDs.
üìä Entropy Scoring: Weights entries by state entropy.
üè∑Ô∏è Semantic Labels: Supports efficient querying.
üîÑ Replay Support: Validates entries with `synergy_replay_session`.
üõ°Ô∏è Ethical Vetting: Filters entries using `ethics.cweb`.
üîí Thread-Safety: Uses mutexes for concurrent access.
üß™ Testing: Verifies episodic encoding and querying.

@s json_t int
@s FILE int
@s TrieNode struct

@*1 Dependencies.
Adds time.h for timestamps.
@c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <math.h>
#include <time.h>
#include <json-c/json.h>
#include "synergy.h"
#include "planner.h"
#include "ethics.h"

@*1 TrieNode Structure.
Adds timestamp, context, and goal_id for episodic encoding.
@c
typedef struct TrieNode {
    char state[128];
    char label[256];
    double score;
    char session[64];
    double entropy;
    time_t timestamp;
    char context[256]; // Parent event or chain
    char goal_id[64];  // Associated goal
    struct TrieNode *children[3];
    pthread_mutex_t mutex;
} TrieNode;

TrieNode *trie_create_node(const char *state, const char *label, double score, const char *session,
                          const char *context, const char *goal_id) {
    TrieNode *node = calloc(1, sizeof(TrieNode));
    if (node) {
        strncpy(node->state, state, sizeof(node->state) - 1);
        strncpy(node->label, label, sizeof(node->label) - 1);
        node->score = score;
        strncpy(node->session, session, sizeof(node->session) - 1);
        strncpy(node->context, context ? context : "", sizeof(node->context) - 1);
        strncpy(node->goal_id, goal_id ? goal_id : "", sizeof(node->goal_id) - 1);
        node->entropy = 0.0;
        node->timestamp = time(NULL);
        pthread_mutex_init(&node->mutex, NULL);
    }
    return node;
}

@*1 Entropy Calculation.
Unchanged from original.
@c
double calculate_entropy(const char *state) {
    int counts[256] = {0};
    int len = strlen(state);
    if (len == 0) return 0.0;
    for (int i = 0; i < len; ++i) {
        counts[(unsigned char)state[i]]++;
    }
    double entropy = 0.0;
    for (int i = 0; i < 256; ++i) {
        if (counts[i] > 0) {
            double p = (double)counts[i] / len;
            entropy -= p * log2(p);
        }
    }
    return entropy;
}

@*1 Trie Insertion.
Adds context and goal_id, updates timestamp.
@c
void trie_insert(TrieNode *root, const char *state, const char *label, double score, const char *session,
                const char *context, const char *goal_id) {
    if (!root) return;
    pthread_mutex_lock(&root->mutex);
    PlanNode *node = plan_node_create("memory", label, 0);
    node->score = score;
    strncpy(node->state, state, sizeof(node->state) - 1);
    ConstraintSet *ethics_set = load_constraints("/etc/axion/ethics.json");
    if (ethics_set) {
        ethics_vet_plan(node, ethics_set);
        constraint_free(ethics_set);
    }
    if (node->score <= -9999.0) {
        plan_free(node);
        pthread_mutex_unlock(&root->mutex);
        return;
    }
    score = node->score;
    plan_free(node);

    for (int i = 0; i < 3; ++i) {
        if (!root->children[i]) {
            root->children[i] = trie_create_node(state, label, score, session, context, goal_id);
            root->children[i]->entropy = calculate_entropy(state);
            pthread_mutex_unlock(&root->mutex);
            return;
        }
        if (strcmp(root->children[i]->state, state) == 0 && strcmp(root->children[i]->session, session) == 0) {
            root->children[i]->score = (root->children[i]->score + score) / 2.0;
            root->children[i]->entropy = calculate_entropy(state);
            root->children[i]->timestamp = time(NULL);
            strncpy(root->children[i]->context, context ? context : "", sizeof(root->children[i]->context) - 1);
            strncpy(root->children[i]->goal_id, goal_id ? goal_id : "", sizeof(root->children[i]->goal_id) - 1);
            pthread_mutex_unlock(&root->mutex);
            return;
        }
    }
    for (int i = 0; i < 3; ++i) {
        if (strcmp(root->children[i]->session, session) == 0) {
            trie_insert(root->children[i], state, label, score, session, context, goal_id);
            break;
        }
    }
    pthread_mutex_unlock(&root->mutex);
}

@*1 Episodic Query.
Filters entries by time range, context, or goal ID.
@c
json_object *trie_query_episodic(TrieNode *node, time_t start_time, time_t end_time,
                                const char *context_filter, const char *goal_id_filter) {
    json_object *matches = json_object_new_array();
    if (!node) return matches;
    pthread_mutex_lock(&node->mutex);
    if (strcmp(node->state, "ROOT") != 0 &&
        node->timestamp >= start_time && node->timestamp <= end_time &&
        (!context_filter || strstr(node->context, context_filter)) &&
        (!goal_id_filter || strcmp(node->goal_id, goal_id_filter) == 0)) {
        json_object *obj = json_object_new_object();
        json_object_object_add(obj, "state", json_object_new_string(node->state));
        json_object_object_add(obj, "label", json_object_new_string(node->label));
        json_object_object_add(obj, "score", json_object_new_double(node->score));
        json_object_object_add(obj, "session", json_object_new_string(node->session));
        json_object_object_add(obj, "entropy", json_object_new_double(node->entropy));
        json_object_object_add(obj, "timestamp", json_object_new_int64(node->timestamp));
        json_object_object_add(obj, "context", json_object_new_string(node->context));
        json_object_object_add(obj, "goal_id", json_object_new_string(node->goal_id));
        json_object_array_add(matches, obj);
    }
    for (int i = 0; i < 3; ++i) {
        json_object *child_matches = trie_query_episodic(node->children[i], start_time, end_time,
                                                        context_filter, goal_id_filter);
        for (size_t j = 0; j < json_object_array_length(child_matches); j++) {
            json_object_array_add(matches, json_object_array_get(child_matches, j));
        }
        json_object_put(child_matches);
    }
    pthread_mutex_unlock(&node->mutex);
    return matches;
}

@*1 Trie Serialization.
Includes episodic metadata.
@c
void trie_serialize(TrieNode *node, json_object *array) {
    if (!node) return;
    pthread_mutex_lock(&node->mutex);
    json_object *obj = json_object_new_object();
    json_object_object_add(obj, "state", json_object_new_string(node->state));
    json_object_object_add(obj, "label", json_object_new_string(node->label));
    json_object_object_add(obj, "score", json_object_new_double(node->score));
    json_object_object_add(obj, "session", json_object_new_string(node->session));
    json_object_object_add(obj, "entropy", json_object_new_double(node->entropy));
    json_object_object_add(obj, "timestamp", json_object_new_int64(node->timestamp));
    json_object_object_add(obj, "context", json_object_new_string(node->context));
    json_object_object_add(obj, "goal_id", json_object_new_string(node->goal_id));
    json_object_array_add(array, obj);
    for (int i = 0; i < 3; ++i) {
        trie_serialize(node->children[i], array);
    }
    pthread_mutex_unlock(&node->mutex);
}

void trie_write(TrieNode *root, const char *output_file) {
    json_object *array = json_object_new_array();
    trie_serialize(root, array);
    json_object *root_obj = json_object_new_object();
    json_object_object_add(root_obj, "memory", array);
    FILE *out = fopen(output_file, "w");
    if (out) {
        const char *json_str = json_object_to_json_string_ext(root_obj, JSON_C_TO_STRING_PRETTY);
        fprintf(out, "%s\n", json_str);
        fclose(out);
        synergy_log(LOG_INFO, "Memory trie saved to %s", output_file);
    } else {
        synergy_log(LOG_ERROR, "Failed to write memory trie");
    }
    json_object_put(root_obj);
}

@*1 Trie Population.
Parses episodic metadata from trace logs.
@c
void trie_populate(TrieNode *root, const char *trace_file) {
    FILE *fp = fopen(trace_file, "r");
    if (!fp) {
        synergy_log(LOG_ERROR, "Failed to open trace file");
        return;
    }
    char line[8192];
    while (fgets(line, sizeof(line), fp)) {
        char type[32], value[4096], state[128], session[64] = "default", context[256] = "", goal_id[64] = "";
        double score = 0.0;
        int matched = sscanf(line, "[TRACE] type=%31s value=%4095[^ ] state=%127s score=%lf session=%63s context=%255[^ ] goal_id=%63s",
                             type, value, state, &score, session, context, goal_id);
        if (matched < 3) continue;
        if (strcmp(type, "plan") == 0 || strcmp(type, "simulate") == 0 || strcmp(type, "execute") == 0 || strcmp(type, "score") == 0) {
            char label[256];
            snprintf(label, sizeof(label), "%s_%s", type, value);
            trie_insert(root, state, label, score, session, context, goal_id);
        }
    }
    fclose(fp);
    trie_write(root, "/sys/kernel/debug/axion-ai/memory");
    synergy_log(LOG_INFO, "Trie populated from trace");
}

@*1 Testing.
Adds tests for episodic encoding and querying.
@c
#ifdef MEMORY_TRIE_TEST
#include <check.h>

START_TEST(test_episodic_insert) {
    TrieNode *root = trie_create_node("ROOT", "root", 0.0, "default", "", "");
    trie_insert(root, "goal", "plan_optimize", 1.5, "123456", "parent_event", "goal_001");
    ck_assert_ptr_nonnull(root->children[0]);
    ck_assert_str_eq(root->children[0]->context, "parent_event");
    ck_assert_str_eq(root->children[0]->goal_id, "goal_001");
    trie_free(root);
}
END_TEST

START_TEST(test_episodic_query) {
    TrieNode *root = trie_create_node("ROOT", "root", 0.0, "default", "", "");
    trie_insert(root, "goal", "plan_optimize", 1.5, "123456", "parent_event", "goal_001");
    time_t now = time(NULL);
    json_object *matches = trie_query_episodic(root, now - 3600, now + 3600, "parent_event", "goal_001");
    ck_assert_int_eq(json_object_array_length(matches), 1);
    json_object *match = json_object_array_get(matches, 0);
    ck_assert_str_eq(json_object_get_string(json_object_object_get(match, "label")), "plan_optimize");
    json_object_put(matches);
    trie_free(root);
}
END_TEST

Suite *memory_trie_suite(void) {
    Suite *s = suite_create("MemoryTrie");
    TCase *tc = tcase_create("Core");
    tcase_add_test(tc, test_trie_insert);
    tcase_add_test(tc, test_entropy_calculation);
    tcase_add_test(tc, test_trie_populate);
    tcase_add_test(tc, test_episodic_insert);
    tcase_add_test(tc, test_episodic_query);
    suite_add_tcase(s, tc);
    return s;
}
#endif

@* End of memory_trie.cweb
