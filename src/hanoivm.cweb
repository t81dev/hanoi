@* hanoivm.cweb | Ternary Virtual Machine with CLI Interface and Enhanced Runtime Execution (v0.9.3)

This module provides a command-line interface for executing HanoiVM programs, supporting
T81/T243/T729 modes, recursive opcodes, GPU execution, and session-aware entropy logging.
It integrates with `hanoivm_fsm.v` via PCIe/M.2, `axion-ai.cweb` via ioctls/debugfs,
`hanoivm-core.cweb` and `hanoivm-runtime.cweb` via FFI, `hanoivm_vm.cweb`’s execution core,
`hanoivm_firmware.cweb`’s firmware, `axion-gaia-interface.cweb`’s GPU dispatch,
`axion_api.cweb`’s recursion optimization, `axion_gpu_serializer.cweb`’s GPU serialization,
`bootstrap.cweb’`s bootstrap sequence, `config.cweb’`s configuration, `cuda_handle_request.cweb’`s CUDA backend,
`gaia_handle_request.cweb’`s ROCm backend, `disasm_hvm.cweb’`s type-aware disassembly,
`disassembler.cweb’`s advanced disassembly, `emit_hvm.cweb’`s bytecode emission,
`entropy_monitor.cweb’`s entropy monitoring, `ghidra_hvm_plugin.cweb’`s Ghidra integration,
`hanoivm-test.cweb’`s unit testing, and `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Support for recursive opcodes (`RECURSE_FACT`) and T729 intents (`T81_MATMUL`).
- Type-aware operands (`T81_TAG_VECTOR`, `T81_TAG_TENSOR`).
- Modular opcode dispatch table.
- Entropy logging via `axion-ai.cweb`’s debugfs and `entropy_monitor.cweb`.
- Session memory integration with `axion-ai.cweb’`s `axion_session_t`.
- FFI interface to `hanoivm-core.cweb` (Rust) and `hanoivm-runtime.cweb` (C).
- Secure validation for bytecode, opcodes, and operands.
- JSON visualization for execution traces.
- CLI options for GPU execution, disassembly, and session management.
- Support for `.hvm` test bytecode (`T81_MATMUL` + `TNN_ACCUM`).
- Optimized for user-space execution.

@c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdint.h>
#include "hvm_context.h"
#include "hvm_promotion.h"
#include "axion-ai.h"
#include "hanoivm_core.h"
#include "hanoivm_runtime.h"
#include "axion-gaia-interface.h"
#include "disasm_hvm.h"

#define TERNARY_REGISTERS 28
#define STACK_SIZE 2187
#define MAX_LOG_MSG 128
#define T81_TAG_BIGINT 0x01
#define T81_TAG_MATRIX 0x04
#define T81_TAG_VECTOR 0x05

@<Define VM Modes and Configuration@>=
typedef enum { MODE_T81, MODE_T243, MODE_T729 } VMMode;
typedef struct {
    VMMode mode;
    const char* exec_file;
    int debug;
    int trace;
    int benchmark;
    int gpu;
    int disasm;
    char* session_id;
} VMConfig;

static VMConfig vm_config = {
    .mode = MODE_T81,
    .exec_file = NULL,
    .debug = 0,
    .trace = 0,
    .benchmark = 0,
    .gpu = 0,
    .disasm = 0,
    .session_id = NULL
};

@<Print CLI Usage@>=
void print_usage(const char* prog) {
    printf("Usage: %s [options]\n", prog);
    printf("Options:\n");
    printf("  --mode=t81|t243|t729     Set VM mode (default: t81)\n");
    printf("  --exec <file.hvm>        Execute HVM program file\n");
    printf("  --debug                  Enable debug output\n");
    printf("  --trace                  Enable opcode trace\n");
    printf("  --benchmark              Benchmark execution time\n");
    printf("  --gpu                    Enable GPU execution\n");
    printf("  --disasm                 Enable disassembly output\n");
    printf("  --session <id>           Set session ID\n");
    printf("  --help                   Show this help message\n");
}

@<Parse Command-Line Arguments@>=
void parse_args(int argc, char* argv[]) {
    for (int i = 1; i < argc; i++) {
        if (strncmp(argv[i], "--mode=", 7) == 0) {
            const char* mode = argv[i] + 7;
            if (strcmp(mode, "t81") == 0) vm_config.mode = MODE_T81;
            else if (strcmp(mode, "t243") == 0) vm_config.mode = MODE_T243;
            else if (strcmp(mode, "t729") == 0) vm_config.mode = MODE_T729;
            else { fprintf(stderr, "Unknown mode: %s\n", mode); exit(1); }
        } else if (strcmp(argv[i], "--exec") == 0 && i + 1 < argc) {
            vm_config.exec_file = argv[++i];
        } else if (strncmp(argv[i], "--session=", 10) == 0) {
            vm_config.session_id = strdup(argv[i] + 10);
        } else if (strcmp(argv[i], "--debug") == 0) {
            vm_config.debug = 1;
        } else if (strcmp(argv[i], "--trace") == 0) {
            vm_config.trace = 1;
        } else if (strcmp(argv[i], "--benchmark") == 0) {
            vm_config.benchmark = 1;
        } else if (strcmp(argv[i], "--gpu") == 0) {
            vm_config.gpu = 1;
        } else if (strcmp(argv[i], "--disasm") == 0) {
            vm_config.disasm = 1;
        } else if (strcmp(argv[i], "--help") == 0) {
            print_usage(argv[0]);
            exit(0);
        } else {
            fprintf(stderr, "Unknown argument: %s\n", argv[i]);
            print_usage(argv[0]);
            exit(1);
        }
    }
}

@<Opcode Dispatch Table@>=
typedef struct {
    uint8_t opcode;
    const char* name;
    void (*exec_func)(HVMContext*, int*, int*);
} OpcodeInfo;

static void exec_push(HVMContext* ctx, int* stack, int* sp) {
    uint8_t tag = ctx->code[ctx->ip++];
    stack[++(*sp)] = ctx->code[ctx->ip];
    ctx->ip += 9; // Skip operand
    axion_log_entropy("EXEC_PUSH", tag);
}

static void exec_matmul(HVMContext* ctx, int* stack, int* sp) {
    int a = stack[(*sp)--];
    int b = stack[(*sp)--];
    GaiaRequest req = { .tbin = (uint8_t*)&b, .tbin_len = sizeof(int), .intent = GAIA_T729_DOT };
    GaiaResponse res = gaia_handle_request(req);
    stack[++(*sp)] = res.updated_macro[0];
    axion_log_entropy("EXEC_T81_MATMUL", res.entropy_delta);
}

static OpcodeInfo opcodes[] = {
    { 0x01, "PUSH", exec_push },
    { 0x21, "T81_MATMUL", exec_matmul },
    { 0x30, "RECURSE_FACT", NULL }, // Handled in Rust
    { 0xFF, "HALT", NULL },
    { 0x00, NULL, NULL }
};

@<Dispatch Instruction@>=
void dispatch_instruction(HVMContext* ctx, int* stack, int* sp) {
    uint8_t op = ctx->code[ctx->ip++];
    extern int rust_execute_opcode(uint8_t op, HVMContext* ctx);
    for (int i = 0; opcodes[i].exec_func; i++) {
        if (opcodes[i].opcode == op) {
            if (vm_config.trace) printf("[TRACE] %s @ IP=%d\n", opcodes[i].name, ctx->ip-1);
            opcodes[i].exec_func(ctx, stack, sp);
            axion_log_entropy("DISPATCH", op);
            return;
        }
    }
    if (rust_execute_opcode(op, ctx)) return;
    fprintf(stderr, "Unknown opcode: 0x%02X\n", op);
    ctx->halted = 1;
    axion_log_entropy("UNKNOWN_OPCODE", op);
}

@<Initialize VM@>=
void initialize_vm(HVMContext* ctx) {
    printf("[HanoiVM] Initializing VM...\n");
    for (int i = 0; i < TERNARY_REGISTERS; i++) ctx->registers[i] = 0;
    for (int i = 0; i < STACK_SIZE; i++) ctx->stack[i] = 0;
    ctx->sp = -1;
    ctx->ip = 0;
    ctx->halted = 0;
    ctx->mode = vm_config.mode;
    if (vm_config.session_id) axion_register_session(vm_config.session_id);
    axion_log_entropy("VM_INIT", ctx->mode);
}

@<Run VM Core Loop@>=
void run_vm(HVMContext* ctx) {
    printf("[HanoiVM] Executing core loop...\n");
    if (vm_config.trace) TRACE_MODE(ctx);
    PROMOTE_T243(ctx);
    PROMOTE_T729(ctx);
    DEMOTE_STACK(ctx);
    if (vm_config.disasm) {
        GhidraContext gctx = { .base_addr = 0x1000 };
        FILE* f = fopen("/tmp/temp.hvm", "wb");
        fwrite(ctx->code, ctx->code_size, 1, f);
        fclose(f);
        disassemble_hvm_binary("/tmp/temp.hvm", &gctx);
    }
    while (!ctx->halted && ctx->ip < ctx->code_size) {
        dispatch_instruction(ctx, ctx->stack, &ctx->sp);
    }
    axion_log_entropy("VM_EXEC_COMPLETE", ctx->ip);
}

@<Benchmark Wrapper@>=
void benchmark_vm(HVMContext* ctx) {
    clock_t start = clock();
    run_vm(ctx);
    clock_t end = clock();
    double elapsed = (double)(end - start) / CLOCKS_PER_SEC;
    printf("[Benchmark] Execution time: %.3f seconds\n", elapsed);
    axion_log_entropy("BENCHMARK", (int)(elapsed * 1000));
}

@<Visualization Hook@>=
void visualize_execution(HVMContext* ctx, char* out_json, size_t max_len) {
    size_t len = snprintf(out_json, max_len,
        "{\"session\": \"%s\", \"mode\": %d, \"ip\": %d, \"stack\": [",
        vm_config.session_id ? vm_config.session_id : "HVM_DEFAULT", ctx->mode, ctx->ip);
    for (int i = 0; i <= ctx->sp && len < max_len; i++) {
        len += snprintf(out_json + len, max_len - len, "%d%s",
                        ctx->stack[i], i < ctx->sp ? "," : "");
    }
    len += snprintf(out_json + len, max_len - len, "]}");
    axion_log_entropy("VISUALIZE_EXEC", len & 0xFF);
}

@<Main Function@>=
int main(int argc, char* argv[]) {
    parse_args(argc, argv);
    printf("[HanoiVM] Starting...\n");
    printf("Mode        : %s\n", vm_config.mode == MODE_T81 ? "T81" :
                                     vm_config.mode == MODE_T243 ? "T243" : "T729");
    if (vm_config.exec_file) printf("Exec File   : %s\n", vm_config.exec_file);
    if (vm_config.debug) printf("Debug Mode  : ON\n");
    if (vm_config.trace) printf("Trace Mode  : ON\n");
    if (vm_config.benchmark) printf("Benchmark   : ON\n");
    if (vm_config.gpu) printf("GPU Mode    : ON\n");
    if (vm_config.disasm) printf("Disasm Mode : ON\n");
    if (vm_config.session_id) printf("Session ID  : %s\n", vm_config.session_id);

    HVMContext ctx = {0};
    initialize_vm(&ctx);

    if (vm_config.exec_file) {
        ctx.code = (uint8_t*)load_program(vm_config.exec_file, &ctx.code_size);
        printf("[HanoiVM] Loaded program of size %zu bytes\n", ctx.code_size);
    }

    if (vm_config.benchmark) {
        benchmark_vm(&ctx);
    } else {
        run_vm(&ctx);
    }

    char json[512];
    visualize_execution(&ctx, json, sizeof(json));
    GaiaRequest req = { .tbin = (uint8_t*)json, .tbin_len = strlen(json), .intent = GAIA_T729_DOT };
    GaiaResponse res = gaia_handle_request(req);
    axion_log_entropy("MAIN_INTEGRATE_GAIA", res.symbolic_status);

    if (ctx.code) free(ctx.code);
    if (vm_config.session_id) free(vm_config.session_id);
    return 0;
}

