@* ghidra_hvm_plugin.cweb | Ghidra Plugin for HanoiVM — Disassembler & Type-Aware Processor Integration (v0.9.3)

This module integrates HanoiVM disassembly into Ghidra, providing type-aware processing of T81 operands,
recursive opcodes, and session-aware entropy logging. It integrates with `hanoivm_fsm.v` via PCIe/M.2,
`axion-ai.cweb` via ioctls/debugfs, `hanoivm-core.cweb` and `hanoivm-runtime.cweb` via FFI,
`hanoivm_vm.cweb`’s execution core, `hanoivm_firmware.cweb`’s firmware, `axion-gaia-interface.cweb`’s
GPU dispatch, `axion_api.cweb`’s recursion optimization, `axion_gpu_serializer.cweb`’s GPU serialization,
`bootstrap.cweb`’s bootstrap sequence, `config.cweb`’s configuration, `cuda_handle_request.cweb`’s CUDA backend,
`gaia_handle_request.cweb`’s ROCm backend, `disasm_hvm.cweb`’s type-aware disassembly,
`disassembler.cweb`’s advanced disassembly, `emit_hvm.cweb`’s bytecode emission,
`entropy_monitor.cweb`’s entropy monitoring, and `advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Support for recursive opcodes (`RECURSE_FACT`) and T729 intents (`T81_MATMUL`).
- Extended type support (`T81_TAG_VECTOR`, `T81_TAG_TENSOR`, `T81_TAG_POLYNOMIAL`).
- Modular opcode and type decoding tables.
- Entropy logging via `axion-ai.cweb`’s debugfs and `entropy_monitor.cweb`.
- Session memory integration with `axion-ai.cweb`’s `axion_session_t`.
- FFI interface to `hanoivm-core.cweb` (Rust) and `hanoivm-runtime.cweb` (C).
- Secure validation for bytecode, opcodes, and operands.
- JSON visualization for disassembly outputs.
- Support for `.hvm` test bytecode (`T81_MATMUL` + `TNN_ACCUM`).
- Optimized for Ghidra integration.

@c
#include <ghidra/ghidra_plugin.h>
#include <ghidra/program.h>
#include <ghidra/disassembler.h>
#include "disasm_hvm.h"
#include "axion-ai.h"
#include "hanoivm_core.h"
#include "hanoivm_runtime.h"
#include "axion-gaia-interface.h"
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>

#define T81_TAG_BIGINT     0x01
#define T81_TAG_FRACTION   0x02
#define T81_TAG_FLOAT      0x03
#define T81_TAG_MATRIX     0x04
#define T81_TAG_VECTOR     0x05
#define T81_TAG_TENSOR     0x06
#define T81_TAG_POLYNOMIAL 0x07
#define T81_TAG_GRAPH      0x08
#define T81_TAG_QUATERNION 0x09
#define T81_TAG_OPCODE     0x0A
#define VERBOSE_GHIDRA 1
#define MAX_LOG_MSG 128
#ifndef GHIDRA_OUT
#define GHIDRA_OUT stdout
#endif
#ifdef VERBOSE_GHIDRA
#define VERBOSE_PRINT(fmt, ...) fprintf(GHIDRA_OUT, fmt, ##__VA_ARGS__)
#else
#define VERBOSE_PRINT(fmt, ...)
#endif

@<Opcode Decoding Table@>=
typedef struct {
    uint8_t opcode;
    const char* name;
    int operand_count;
    size_t operand_size;
} OpcodeInfo;

static OpcodeInfo opcodes[] = {
    { 0x01, "PUSH", 2, 18 },
    { 0x20, "TNN_ACCUM", 2, 18 },
    { 0x21, "T81_MATMUL", 2, 18 },
    { 0x30, "RECURSE_FACT", 1, 4 },
    { 0x31, "RECURSE_FIB", 1, 4 },
    { 0xF0, "PROMOTE_T243", 1, 4 },
    { 0xF1, "PROMOTE_T729", 1, 4 },
    { 0xFF, "HALT", 0, 0 },
    { 0x00, NULL, 0, 0 }
};

@<Type Decoding Table@>=
typedef struct {
    uint8_t tag;
    const char* name;
    void (*disasm_func)(FILE*, GhidraContext*, uint64_t);
} TypeInfo;

static TypeInfo types[] = {
    { T81_TAG_BIGINT, "BIGINT", disasm_bigint },
    { T81_TAG_FRACTION, "FRACTION", disasm_fraction },
    { T81_TAG_FLOAT, "FLOAT", disasm_float },
    { T81_TAG_MATRIX, "MATRIX", disasm_matrix },
    { T81_TAG_VECTOR, "VECTOR", disasm_vector },
    { T81_TAG_TENSOR, "TENSOR", disasm_tensor },
    { T81_TAG_POLYNOMIAL, "POLYNOMIAL", disasm_polynomial },
    { T81_TAG_GRAPH, "GRAPH", disasm_graph },
    { T81_TAG_QUATERNION, "QUATERNION", disasm_quaternion },
    { T81_TAG_OPCODE, "OPCODE", disasm_opcode },
    { 0x00, NULL, NULL }
};

@<Disassembler Operand Functions@>=
void disasm_bigint(FILE* in, GhidraContext* ctx, uint64_t addr) {
    uint8_t len;
    if (fread(&len, 1, 1, in) != 1) {
        fprintf(GHIDRA_OUT, "[ERROR] Failed to read BIGINT length\n");
        axion_log_entropy("GHIDRA_BIGINT_READ_FAIL", addr);
        return;
    }
    char buf[64] = {0};
    if (fread(buf, 1, len, in) != len) {
        fprintf(GHIDRA_OUT, "[ERROR] Failed to read BIGINT value\n");
        axion_log_entropy("GHIDRA_BIGINT_VALUE_FAIL", addr);
        return;
    }
    char comment[128];
    snprintf(comment, sizeof(comment), "BIGINT(%s)", buf);
    ghidra_add_comment(ctx, addr, comment);
    VERBOSE_PRINT("%s\n", comment);
}

void disasm_fraction(FILE* in, GhidraContext* ctx, uint64_t addr) {
    char comment[128] = "T81Fraction { numerator: ";
    ghidra_add_comment(ctx, addr, comment);
    disasm_bigint(in, ctx, addr);
    strcat(comment, ", denominator: ");
    ghidra_add_comment(ctx, addr, comment);
    disasm_bigint(in, ctx, addr);
    strcat(comment, " }");
    ghidra_add_comment(ctx, addr, comment);
    VERBOSE_PRINT("%s\n", comment);
}

void disasm_float(FILE* in, GhidraContext* ctx, uint64_t addr) {
    char comment[128] = "T81Float { mantissa: ";
    ghidra_add_comment(ctx, addr, comment);
    disasm_bigint(in, ctx, addr);
    int8_t exponent;
    if (fread(&exponent, 1, 1, in) != 1) {
        fprintf(GHIDRA_OUT, "[ERROR] Failed to read FLOAT exponent\n");
        axion_log_entropy("GHIDRA_FLOAT_EXP_FAIL", addr);
        return;
    }
    snprintf(comment, sizeof(comment), ", exponent: %d }", exponent);
    ghidra_add_comment(ctx, addr, comment);
    VERBOSE_PRINT("%s\n", comment);
}

void disasm_vector(FILE* in, GhidraContext* ctx, uint64_t addr) {
    uint8_t dim;
    if (fread(&dim, 1, 1, in) != 1) {
        fprintf(GHIDRA_OUT, "[ERROR] Failed to read VECTOR dimension\n");
        axion_log_entropy("GHIDRA_VECTOR_DIM_FAIL", addr);
        return;
    }
    char comment[128];
    snprintf(comment, sizeof(comment), "T81Vector { dim: %d, elements: [", dim);
    ghidra_add_comment(ctx, addr, comment);
    for (uint8_t i = 0; i < dim; i++) {
        disasm_float(in, ctx, addr);
        if (i < dim - 1) strcat(comment, ", ");
    }
    strcat(comment, "] }");
    ghidra_add_comment(ctx, addr, comment);
    VERBOSE_PRINT("%s\n", comment);
}

void disasm_operand_by_tag(FILE* in, uint8_t tag, GhidraContext* ctx, uint64_t addr) {
    for (int i = 0; types[i].disasm_func; i++) {
        if (types[i].tag == tag) {
            types[i].disasm_func(in, ctx, addr);
            axion_log_entropy("GHIDRA_DISASM_TYPE", tag);
            return;
        }
    }
    char comment[128];
    snprintf(comment, sizeof(comment), "UNKNOWN TYPE TAG 0x%02X", tag);
    ghidra_add_comment(ctx, addr, comment);
    axion_log_entropy("GHIDRA_UNKNOWN_TYPE", tag);
}

@<Opcode Map Hook@>=
static const char* decode_opcode(uint8_t op) {
    for (int i = 0; opcodes[i].name; i++) {
        if (opcodes[i].opcode == op) return opcodes[i].name;
    }
    extern int rust_validate_opcode(uint8_t op);
    if (rust_validate_opcode(op)) {
        axion_log_entropy("GHIDRA_UNKNOWN_VALID", op);
        return "VALID_UNKNOWN";
    }
    axion_log_entropy("GHIDRA_INVALID_OPCODE", op);
    return "INVALID";
}

@<Disassembler Core Hook@>=
int disassemble_hvm_binary(const char* path, GhidraContext* ctx) {
    FILE* f = fopen(path, "rb");
    if (!f) {
        fprintf(GHIDRA_OUT, "[ERROR] Failed to open file: %s\n", path);
        axion_log_entropy("GHIDRA_FILE_OPEN_FAIL", 0);
        return -1;
    }
    char session_id[32];
    snprintf(session_id, sizeof(session_id), "GHIDRA-%016lx", (uint64_t)path);
    axion_register_session(session_id);
    uint64_t addr = ctx->base_addr;
    uint8_t op;
    while (fread(&op, 1, 1, f) == 1) {
        const char* opname = decode_opcode(op);
        ghidra_create_instruction(ctx, addr, opname);
        VERBOSE_PRINT("[DEBUG] At 0x%llX, opcode: 0x%02X (%s)\n", addr, op, opname);
        if (strstr(opname, "RECURSE_") || strcmp(opname, "T81_MATMUL") == 0) {
            ghidra_create_label(ctx, addr, opname);
        }
        for (int i = 0; opcodes[i].name; i++) {
            if (opcodes[i].opcode == op && opcodes[i].operand_count > 0) {
                uint8_t tag;
                if (fread(&tag, 1, 1, f) != 1) {
                    axion_log_entropy("GHIDRA_TAG_READ_FAIL", addr);
                    break;
                }
                char comment[128];
                snprintf(comment, sizeof(comment), "T81 Typed Operand (Tag: 0x%02X)", tag);
                ghidra_add_comment(ctx, addr, comment);
                disasm_operand_by_tag(f, tag, ctx, addr);
                addr += 1 + opcodes[i].operand_size;
                fseek(f, opcodes[i].operand_size - 1, SEEK_CUR);
                break;
            }
        }
        addr += 1;
        axion_log_entropy("GHIDRA_INSTRUCTION", op);
    }
    fclose(f);
    return 0;
}

@<Visualization Hook@>=
void ghidra_visualize(const char* path, GhidraContext* ctx, char* out_json, size_t max_len) {
    FILE* f = fopen(path, "rb");
    if (!f) return;
    size_t len = snprintf(out_json, max_len, "{\"session\": \"GHIDRA\", \"instructions\": [");
    uint64_t addr = ctx->base_addr;
    uint8_t op;
    int count = 0;
    while (fread(&op, 1, 1, f) == 1 && len < max_len) {
        if (count++ > 0) len += snprintf(out_json + len, max_len - len, ",");
        len += snprintf(out_json + len, max_len - len, "{\"addr\": %llu, \"opcode\": \"%s\"}",
                        addr, decode_opcode(op));
        addr += 1;
    }
    len += snprintf(out_json + len, max_len - len, "]}");
    fclose(f);
    axion_log_entropy("GHIDRA_VISUALIZE", len & 0xFF);
}

@<Integration Hook@>=
void ghidra_integrate(const char* path, GhidraContext* ctx) {
    disassemble_hvm_binary(path, ctx);
    char json[512];
    ghidra_visualize(path, ctx, json, sizeof(json));
    GaiaRequest req = { .tbin = (uint8_t*)json, .tbin_len = strlen(json), .intent = GAIA_T729_DOT };
    GaiaResponse res = gaia_handle_request(req);
    axion_log_entropy("GHIDRA_INTEGRATE_GAIA", res.symbolic_status);
}

@<Plugin Entry Point@>=
int ghidra_plugin_main(const char* input_path, GhidraContext* ctx) {
    return ghidra_integrate(input_path, ctx);
}

@<Plugin Metadata@>=
GHIDRA_PLUGIN("HanoiVM Disassembler", "AI-native ternary instruction format disassembler")
