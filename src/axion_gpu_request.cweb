@* Axion GPU Dispatch Serializer with Context-Aware Promotion (/sys/axion_debug/gpu_request)
   This module serializes a GaiaRequest for GPU dispatch. It reads a TBIN file, sets up
   a GaiaRequest with intent, confidence, and TBIN macro data, and writes it to a sysfs entry.
   Enhancements:
   - Verbose logging (via VERBOSE_GPU_REQ flag)
   - Error checking on write operations.
   - Optional reading of a GPU response from sysfs (stub for future integration).
   - Hooks for JSON/CBOR parsing and audit logging.
@#

@<Include Dependencies@>=
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

#include "axion-gaia-interface.h"
#include "hvm_context.h"
#include "hvm_promotion.h"
@#

@<Define Constants and Verbose Flag@>=
#define GPU_REQUEST_PATH "/sys/axion_debug/gpu_request"
#define GPU_RESPONSE_PATH "/sys/axion_debug/gpu_result"  /* Future use */
#ifndef VERBOSE_GPU_REQ
  #define VERBOSE_GPU_REQ 0
#endif
#if VERBOSE_GPU_REQ
  #define GPU_DEBUG(fmt, ...) fprintf(stderr, "[GPU_REQ DEBUG] " fmt, ##__VA_ARGS__)
#else
  #define GPU_DEBUG(fmt, ...) 
#endif
@#

@<External API Declaration@>=
/* Unified interface from axion-gaia-interface.cweb */
extern void axion_dispatch_to_gpu(const uint8_t* logic_blob, size_t len, int use_cuda);
@#

@<write_gpu_request_to_sysfs Function@>=
int write_gpu_request_to_sysfs(const GaiaRequest* request, const char* backend, HVMContext* ctx) {
    if (ctx && ctx->mode < MODE_T729) {
        fprintf(stderr, "[Axion GPU Request] Promoting context to T729 for GPU macro dispatch.\n");
        promote_to_t729(ctx);
    }

    FILE* f = fopen(GPU_REQUEST_PATH, "wb");
    if (!f) {
        perror("Failed to open " GPU_REQUEST_PATH);
        return -1;
    }
    GPU_DEBUG("Opened sysfs entry for writing\n");

    /* Write intent */
    if (fwrite(&request->intent, sizeof(uint8_t), 1, f) != 1) {
        perror("Error writing intent");
        fclose(f);
        return -1;
    }
    GPU_DEBUG("Wrote intent: %d\n", request->intent);

    /* Write confidence */
    if (fwrite(&request->confidence, sizeof(uint8_t), 1, f) != 1) {
        perror("Error writing confidence");
        fclose(f);
        return -1;
    }
    GPU_DEBUG("Wrote confidence: %d\n", request->confidence);

    /* Write TBIN length */
    if (fwrite(&request->tbin_len, sizeof(size_t), 1, f) != 1) {
        perror("Error writing TBIN length");
        fclose(f);
        return -1;
    }
    GPU_DEBUG("Wrote TBIN length: %zu\n", request->tbin_len);

    /* Write TBIN macro */
    if (fwrite(request->tbin, sizeof(uint8_t), request->tbin_len, f) != request->tbin_len) {
        perror("Error writing TBIN data");
        fclose(f);
        return -1;
    }
    GPU_DEBUG("Wrote TBIN data\n");

    /* Write backend flag (1 = CUDA, 0 = GAIA) */
    uint8_t backend_flag = (strcmp(backend, "cuda") == 0) ? 1 : 0;
    if (fwrite(&backend_flag, sizeof(uint8_t), 1, f) != 1) {
        perror("Error writing backend flag");
        fclose(f);
        return -1;
    }
    GPU_DEBUG("Wrote backend flag: %d\n", backend_flag);

    fclose(f);
    GPU_DEBUG("Finished writing GPU request\n");
    return 0;
}
@#

@<Optional: Read GPU Response (Stub)@>=
/* Future enhancement: Read and parse the GPU response from sysfs.
   Currently, this function is a stub that returns success.
*/
int read_gpu_response_from_sysfs() {
    FILE* f = fopen(GPU_RESPONSE_PATH, "rb");
    if (!f) {
        perror("Failed to open " GPU_RESPONSE_PATH);
        return -1;
    }
    // For now, simply read and print the raw response.
    char buffer[256];
    size_t n = fread(buffer, 1, sizeof(buffer)-1, f);
    buffer[n] = '\0';
    printf("[GPU Response] %s\n", buffer);
    fclose(f);
    return 0;
}
@#

@<Main Function@>=
int main(int argc, char** argv) {
    if (argc < 3) {
        fprintf(stderr, "Usage: %s <tbin_file> <cuda|gaia>\n", argv[0]);
        return 1;
    }

    const char* tbin_path = argv[1];
    const char* backend = argv[2];

    FILE* tf = fopen(tbin_path, "rb");
    if (!tf) {
        perror("Failed to open TBIN input file");
        return 1;
    }
    fseek(tf, 0, SEEK_END);
    size_t len = ftell(tf);
    fseek(tf, 0, SEEK_SET);

    uint8_t* tbin = (uint8_t*)malloc(len);
    if (!tbin) {
        perror("Memory allocation failed for TBIN");
        fclose(tf);
        return 1;
    }
    if (fread(tbin, 1, len, tf) != len) {
        perror("Error reading TBIN file");
        free(tbin);
        fclose(tf);
        return 1;
    }
    fclose(tf);
    GPU_DEBUG("Loaded TBIN file of %zu bytes\n", len);

    GaiaRequest req = {
        .tbin = tbin,
        .tbin_len = len,
        .confidence = 87,
        .intent = GAIA_TRANSFORM
    };

    HVMContext ctx = { .mode = MODE_T243, .call_depth = 3, .mode_flags = 0, .halted = 0, .ip = 0 };

    int ret = write_gpu_request_to_sysfs(&req, backend, &ctx);
    if (ret == 0 && VERBOSE_GPU_REQ) {
        GPU_DEBUG("GPU request written successfully. Optionally reading response...\n");
        read_gpu_response_from_sysfs();
    }
    free(tbin);

    return ret;
}
@#

@* Integration Notes:
   This module assumes the Axion kernel module has mounted a writable sysfs entry at:
       /sys/axion_debug/gpu_request
   and (optionally) a response entry at:
       /sys/axion_debug/gpu_result

   The pseudo-file is read by the kernel module, parsed as a GaiaRequest, and relayed
   to the appropriate GPU backend (via CUDA or ROCm) using the logic in the backend handlers.
   Future enhancements include JSON/CBOR parsing and integration with audit and AI refinement logic.
@*

