@* hanoivm_firmware.cweb | HanoiVM Firmware Entry Point (PCIe Accelerator)

This module implements the firmware entry point for the HanoiVM PCIe accelerator, polling
commands from the host and executing T81, T243, and T729 opcodes. It integrates with
`hanoivm_fsm.v` via PCIe/M.2, `axion-ai.cweb` via ioctls/debugfs, `hanoivm-core.cweb` and
`hanoivm-runtime.cweb` via FFI, `hanoivm_vm.cweb`’s execution core, and supports
`advanced_ops.cweb`/`advanced_ops_ext.cweb` opcodes.

Enhancements:
- Full opcode support: T81 (`hanoivm-runtime.cweb`, `advanced_ops.cweb`), T243/T729 (`hanoivm_vm.cweb`, `advanced_ops_ext.cweb`).
- Modular opcode table for extensibility.
- Entropy logging via `axion-ai.cweb`’s debugfs.
- Session memory integration with `axion-ai.cweb`’s `axion_session_t`.
- FFI interface to `hanoivm-core.cweb` (Rust) and `hanoivm-runtime.cweb` (C).
- Secure validation for opcodes, operands, and memory.
- JSON visualization for results and registers.
- Support for `.hvm` test bytecode (T81_MATMUL + TNN_ACCUM).
- Optimized for PCIe co-execution with FPGA/GPU acceleration.

@c
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include "hanoivm_core.h"
#include "hanoivm_runtime.h"
#include "axion-ai.h"

#define HVM_OPCODE_BUFFER  ((volatile uint8_t*)  0x80000000)
#define HVM_OPERAND_BUFFER ((volatile uint81_t*) 0x80001000)
#define HVM_RESULT_BUFFER  ((volatile uint81_t*) 0x80002000)
#define HVM_CONTROL_REG    ((volatile uint8_t*)  0x80003000)
#define HVM_STATUS_REG     ((volatile uint8_t*)  0x80003001)
#define HANOIVM_MAX_STACK  64
#define HANOIVM_MEM_SIZE   81

@* Emulated 81-bit ternary word represented as 3 x 27-bit blocks. *@
@c
typedef struct {
    uint32_t a, b, c;
} uint81_t;

@* Firmware state for tracking execution context. *@
@c
typedef struct {
    int8_t reg[3];
    int8_t mem[HANOIVM_MEM_SIZE];
    int8_t stack[HANOIVM_MAX_STACK];
    int sp;
    int mode;
    char session_id[32];
} HVMFirmwareState;

@* Modular operation table for opcode execution. *@
@c
typedef struct {
    uint8_t opcode;
    void (*execute)(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result);
    const char* name;
    int requires_t243;
} FirmwareOp;

static void exec_tadd(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    state->reg[0] = clamp_trit(state->reg[0] + operand.c);
    result->a = result->b = 0;
    result->c = state->reg[0];
    axion_log_entropy("TADD", result->c & 0xFF);
}

static void exec_tspush(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    if (state->sp >= HANOIVM_MAX_STACK - 1) {
        axion_log_entropy("TSPUSH_OVERFLOW", 0xFF);
        result->a = result->b = result->c = 0;
        return;
    }
    state->stack[++state->sp] = state->reg[0];
    result->a = result->b = 0;
    result->c = state->reg[0];
    axion_log_entropy("TSPUSH", result->c & 0xFF);
}

static FirmwareOp operations[] = {
    { TADD, exec_tadd, "TADD", 0 },
    { TSPUSH, exec_tspush, "TSPUSH", 0 },
    // More in Part 2
    { 0, NULL, NULL, 0 }
};

@<Operation Implementations@>=
static void exec_tnn_accum(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    if (state->sp < 0 || operand.c >= 243 || state->mode < MODE_T243) {
        axion_log_entropy("TNN_ACCUM_INVALID", 0xFF);
        result->a = result->b = result->c = 0;
        return;
    }
    state->reg[0] = clamp_trit(state->reg[0] + operand.c);
    result->a = result->b = 0;
    result->c = state->reg[0];
    axion_log_entropy("TNN_ACCUM", result->c & 0xFF);
}

static void exec_t81_matmul(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    if (state->sp < 0 || operand.c >= 243 || state->mode < MODE_T243) {
        axion_log_entropy("T81_MATMUL_INVALID", 0xFF);
        result->a = result->b = result->c = 0;
        return;
    }
    state->reg[0] = clamp_trit(state->reg[0] * operand.c);
    result->a = result->b = 0;
    result->c = state->reg[0];
    axion_log_entropy("T81_MATMUL", result->c & 0xFF);
}

static void exec_t243_state_adv(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    extern int rust_t243_state_advance(int8_t signal);
    state->reg[0] = rust_t243_state_advance(operand.c);
    result->a = result->b = 0;
    result->c = state->reg[0];
    axion_log_entropy("T243_STATE_ADV", result->c & 0xFF);
}

static void exec_t729_intent(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    extern int rust_t729_intent_dispatch(int8_t opcode);
    int success = rust_t729_intent_dispatch(operand.c);
    state->reg[0] = success ? 1 : 0;
    result->a = result->b = 0;
    result->c = state->reg[0];
    axion_log_entropy("T729_INTENT", result->c & 0xFF);
}

static void exec_t729_dot(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    extern void rust_t729_tensor_contract(int8_t a, int8_t b, int8_t* r);
    if (state->sp < 1 || state->mode < MODE_T729) {
        axion_log_entropy("T729_DOT_INVALID", 0xFF);
        result->a = result->b = result->c = 0;
        return;
    }
    int8_t a = state->stack[state->sp--];
    int8_t b = state->stack[state->sp--];
    int8_t r;
    rust_t729_tensor_contract(a, b, &r);
    state->stack[++state->sp] = r;
    result->a = result->b = 0;
    result->c = r;
    axion_log_entropy("T729_DOT", r & 0xFF);
}

static FirmwareOp operations[] = {
    { TADD, exec_tadd, "TADD", 0 },
    { TSUB, NULL, "TSUB", 0 },
    { TMUL, NULL, "TMUL", 0 },
    { TAND, NULL, "TAND", 0 },
    { TOR, NULL, "TOR", 0 },
    { TNOT, NULL, "TNOT", 0 },
    { TJMP, NULL, "TJMP", 0 },
    { TJZ, NULL, "TJZ", 0 },
    { TJNZ, NULL, "TJNZ", 0 },
    { TLOAD, NULL, "TLOAD", 0 },
    { TSTORE, NULL, "TSTORE", 0 },
    { THLT, NULL, "THLT", 0 },
    { TSPUSH, exec_tspush, "TSPUSH", 0 },
    { TSPOP, NULL, "TSPOP", 0 },
    { OP_TNN_ACCUM, exec_tnn_accum, "TNN_ACCUM", 1 },
    { OP_T81_MATMUL, exec_t81_matmul, "T81_MATMUL", 1 },
    { T243_STATE_ADV, exec_t243_state_adv, "T243_STATE_ADV", 1 },
    { T729_INTENT, exec_t729_intent, "T729_INTENT", 1 },
    { OP_T729_DOT, exec_t729_dot, "T729_DOT", 1 },
    // More in Part 3
    { 0, NULL, NULL, 0 }
};

@<Operation Implementations Continued@>=
static void exec_tspop(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    if (state->sp < 0) {
        axion_log_entropy("TSPOP_UNDERFLOW", 0xFF);
        result->a = result->b = result->c = 0;
        return;
    }
    state->reg[0] = state->stack[state->sp--];
    result->a = result->b = 0;
    result->c = state->reg[0];
    axion_log_entropy("TSPOP", result->c & 0xFF);
}

static void exec_recurse_fact(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    extern int rust_factorial_recursive(int8_t n, int8_t* r);
    int8_t n = state->stack[state->sp--];
    int8_t r;
    if (rust_factorial_recursive(n, &r)) {
        state->stack[++state->sp] = r;
        result->a = result->b = 0;
        result->c = r;
        axion_log_entropy("RECURSE_FACT", r & 0xFF);
    } else {
        axion_log_entropy("RECURSE_FACT_ERROR", 0xFF);
        result->a = result->b = result->c = 0;
    }
}

static void exec_halt(HVMFirmwareState* state, uint8_t opcode, uint81_t operand, uint81_t* result) {
    state->mode = 0;
    result->a = result->b = result->c = 0;
    axion_log_entropy("HALT", 0);
}

static FirmwareOp operations[] = {
    { TADD, exec_tadd, "TADD", 0 },
    { TSUB, NULL, "TSUB", 0 },
    { TMUL, NULL, "TMUL", 0 },
    { TAND, NULL, "TAND", 0 },
    { TOR, NULL, "TOR", 0 },
    { TNOT, NULL, "TNOT", 0 },
    { TJMP, NULL, "TJMP", 0 },
    { TJZ, NULL, "TJZ", 0 },
    { TJNZ, NULL, "TJNZ", 0 },
    { TLOAD, NULL, "TLOAD", 0 },
    { TSTORE, NULL, "TSTORE", 0 },
    { THLT, NULL, "THLT", 0 },
    { TSPUSH, exec_tspush, "TSPUSH", 0 },
    { TSPOP, exec_tspop, "TSPOP", 0 },
    { OP_TNN_ACCUM, exec_tnn_accum, "TNN_ACCUM", 1 },
    { OP_T81_MATMUL, exec_t81_matmul, "T81_MATMUL", 1 },
    { OP_T729_DOT, exec_t729_dot, "T729_DOT", 1 },
    { OP_T729_PRINT, NULL, "T729_PRINT", 1 },
    { OP_RECURSE_FACT, exec_recurse_fact, "RECURSE_FACT", 0 },
    { OP_RECURSE_FIB, NULL, "RECURSE_FIB", 0 },
    { OP_PROMOTE_T243, NULL, "PROMOTE_T243", 0 },
    { OP_PROMOTE_T729, NULL, "PROMOTE_T729", 0 },
    { OP_DEMOTE_T243, NULL, "DEMOTE_T243", 0 },
    { OP_DEMOTE_T81, NULL, "DEMOTE_T81", 0 },
    { OP_T243_ADD, NULL, "T243_ADD", 1 },
    { OP_T243_MUL, NULL, "T243_MUL", 1 },
    { OP_T243_PRINT, NULL, "T243_PRINT", 1 },
    { T243_STATE_ADV, exec_t243_state_adv, "T243_STATE_ADV", 1 },
    { T729_INTENT, exec_t729_intent, "T729_INTENT", 1 },
    { OP_HALT, exec_halt, "HALT", 0 },
    { 0, NULL, NULL, 0 }
};

@<Visualization Hook@>=
void hvm_firmware_visualize(HVMFirmwareState* state, char* out_json, size_t max_len) {
    size_t len = snprintf(out_json, max_len,
        "{\"reg\": [%d, %d, %d], \"sp\": %d, \"stack\": [",
        state->reg[0], state->reg[1], state->reg[2], state->sp);
    for (int i = 0; i <= state->sp && len < max_len; i++) {
        len += snprintf(out_json + len, max_len - len, "%d%s",
                        state->stack[i], i < state->sp ? "," : "");
    }
    len += snprintf(out_json + len, max_len - len, "], \"mode\": %d}", state->mode);
    axion_log_entropy("VISUALIZE", len & 0xFF);
}

@<Firmware Main Loop@>=
void hvm_mainloop() {
    HVMFirmwareState state = {
        .reg = {0}, .mem = {0}, .stack = {0}, .sp = -1, .mode = MODE_T81
    };
    snprintf(state.session_id, sizeof(state.session_id), "S-%016lx", (uint64_t)&state);
    axion_register_session(state.session_id);

    while (1) {
        if (*HVM_CONTROL_REG == 1) {
            uint8_t opcode = *HVM_OPCODE_BUFFER;
            uint81_t operand = *HVM_OPERAND_BUFFER;
            uint81_t result = {0};

            for (int i = 0; operations[i].execute; i++) {
                if (operations[i].opcode == opcode) {
                    if (operations[i].requires_t243 && state.mode < MODE_T243) {
                        axion_log_entropy("MODE_ERROR", opcode);
                        result.a = result.b = result.c = 0;
                        break;
                    }
                    operations[i].execute(&state, opcode, operand, &result);
                    break;
                }
            }

            *HVM_RESULT_BUFFER = result;
            *HVM_STATUS_REG = 1;
            *HVM_CONTROL_REG = 0;

            char json[256];
            hvm_firmware_visualize(&state, json, sizeof(json));
        }
    }
}

@* External entry point from HanoiVM FSM. *@
@c
void hanoi_vm_execute(uint8_t opcode, uint81_t operand, uint81_t* result) {
    static HVMFirmwareState state = {
        .reg = {0}, .mem = {0}, .stack = {0}, .sp = -1, .mode = MODE_T81
    };
    for (int i = 0; operations[i].execute; i++) {
        if (operations[i].opcode == opcode) {
            if (operations[i].requires_t243 && state.mode < MODE_T243) {
                axion_log_entropy("MODE_ERROR", opcode);
                *result = (uint81_t){0};
                return;
            }
            operations[i].execute(&state, opcode, operand, result);
            return;
        }
    }
    axion_log_entropy("UNKNOWN_OP", opcode);
    *result = (uint81_t){0};
}

