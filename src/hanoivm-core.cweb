@* hanoivm-core.cweb | Recursive HanoiVM Runtime with Extended AI Integration

This Rust-based HanoiVM runtime supports T81, T243, and T729 ternary logic, integrating
with Axion AI and synchronizing with C via FFI. It interfaces with `hanoivm_fsm.v` via
PCIe/M.2 and `axion-ai.cweb` via ioctls/debugfs, supporting the T81 Mining Pipeline.

Enhancements:
- Full opcode support from `advanced_ops.cweb` (0x00–0x21) and `advanced_ops_ext.cweb` (0x30–0x39).
- Modular operation table for T81/T243/T729 opcodes.
- Entropy logging via `axion-ai.cweb`’s debugfs.
- Session memory integration with `axion-ai.cweb`’s `axion_session_t`.
- Extended FFI for T243/T729 execution.
- Secure input validation for macro and logic tree operations.
- JSON visualization for stack and AI outputs.
- Support for `.hvm` test bytecode (T81_MATMUL + TNN_ACCUM).
- Compatible with `hanoivm_fsm.v`’s dynamic opcodes and `advanced_ops_ext.cweb`’s T243/T729.

@<Use Statements@>=
use crate::libt81::{T81Digit, T81Number};
use crate::libt243::{T243Digit, T243LogicTree, T243Node};
use crate::libt729::{T729Digit, T729MacroEngine};
use crate::axion_ai::{axion_parse_command, axion_tbin_execute, axion_register_session, axion_log_entropy};
use crate::config::HanoiVMConfig;
use std::ffi::{CStr, CString};
use std::os::raw::{c_char, c_int};
use uuid::Uuid;
use chrono::Local;
use md5;

@<Struct HanoiVMCoreState@>=
#[repr(C)]
pub struct HanoiVMCoreState {
    pub reg: [i8; 3],
    pub mem: [i8; 81],
    pub ip: u32,
    pub sp: i32,
    pub stack: [i8; 64],
}

@<Struct HanoiVM@>=
pub struct HanoiVM {
    pub config: HanoiVMConfig,
    pub macro_engine: T729MacroEngine,
    pub frame_stack: Vec<T243LogicTree>,
    pub output_log: Vec<T81Number>,
    pub ai_enabled: bool,
    pub session_id: String,
}

@<HanoiVMConfig@>=
#[derive(Clone, Default)]
#[repr(C)]
pub struct HanoiVMConfig {
    pub enable_pcie_acceleration: bool,
    pub enable_gpu_support: bool,
    pub enable_dynamic_resource_scaling: bool,
    pub ai_optimization_mode: String,
    pub enable_anomaly_detection: bool,
    pub enable_ai_log_feedback: bool,
    pub log_level: String,
    pub log_output_format: String,
    pub enable_secure_mode: bool,
    pub memory_allocation: u32,
    pub cpu_affinity: String,
    pub gpu_allocation: u32,
    pub enable_runtime_overrides: bool,
    pub detect_gpu: bool,
    pub detect_pcie_accelerator: bool,
    pub ternary_logic_mode: String,
    pub enable_adaptive_mode_switching: bool,
    pub enable_debug_mode: bool,
}

@<Operation Trait@>=
pub trait HanoiOp {
    fn execute(&self, state: &mut HanoiVMCoreState, a: i8, b: i8) -> i8;
    fn name(&self) -> &str;
    fn requires_t243(&self) -> bool;
}

struct T81Op {
    opcode: u8,
    name: &'static str,
    requires_t243: bool,
}

impl HanoiOp for T81Op {
    fn execute(&self, state: &mut HanoiVMCoreState, a: i8, b: i8) -> i8 {
        let result = match self.opcode {
            0x01 => clamp_trit(state.reg[0] as i32 + a as i32), // TADD
            0x02 => clamp_trit(state.reg[0] as i32 - a as i32), // TSUB
            0x03 => clamp_trit(state.reg[0] as i32 * a as i32), // TMUL
            _ => 0,
        };
        axion_log_entropy(&format!("OP_{}", self.name), result as u8);
        result
    }
    fn name(&self) -> &str { self.name }
    fn requires_t243(&self) -> bool { self.requires_t243 }
}

@<LowLevel Adapter@>=
impl HanoiVMCoreState {
    pub fn from_raw_ptr(ptr: *const HanoiVMCoreState) -> Option<Self> {
        if ptr.is_null() { None } else { unsafe { Some(*ptr) } }
    }

    pub fn debug_dump(&self) {
        println!("[CORE STATE] IP: {}, SP: {} | R0: {}, R1: {}, R2: {}",
                 self.ip, self.sp, self.reg[0], self.reg[1], self.reg[2]);
    }
}

impl From<&HanoiVM> for HanoiVMCoreState {
    fn from(vm: &HanoiVM) -> Self {
        let mut mem = [0i8; 81];
        let mut stack = [0i8; 64];
        for (i, val) in vm.output_log.iter().enumerate().take(81) {
            mem[i] = val.0.get(0).copied().unwrap_or(0);
        }
        HanoiVMCoreState { reg: [0; 3], mem, ip: 0, sp: -1, stack }
    }
}

impl From<&HanoiVMCoreState> for HanoiVM {
    fn from(core: &HanoiVMCoreState) -> Self {
        let config = HanoiVMConfig {
            enable_pcie_acceleration: true,
            enable_debug_mode: true,
            ..Default::default()
        };
        let mut output_log = Vec::new();
        for chunk in core.mem.chunks(3).take(27) {
            let mut digits = [0i8; 3];
            digits[..chunk.len()].copy_from_slice(chunk);
            output_log.push(T81Number(digits));
        }
        let session_id = format!("S-{}", Uuid::new_v4());
        HanoiVM {
            config,
            macro_engine: T729MacroEngine::new(),
            frame_stack: Vec::new(),
            output_log,
            ai_enabled: true,
            session_id,
        }
    }
}

pub fn vm_roundtrip_test() {
    let mut vm = HanoiVM::new(HanoiVMConfig {
        enable_debug_mode: true,
        ..Default::default()
    });
    vm.output_log.push(T81Number([-1, 0, 1]));
    vm.output_log.push(T81Number([0, 1, -1]));
    println!("[ROUNDTRIP] Original HanoiVM:");
    let timestamp = Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
    let session_hash = format!("S{:x}", md5::compute(timestamp.as_bytes()));
    println!("[ROUNDTRIP] Timestamp: {} | Session: {}", timestamp, session_hash);
    vm.trace();
    if let Ok(mut file) = std::fs::OpenOptions::new().append(true).create(true).open("trace.log") {
        use std::io::Write;
        writeln!(file, "[ROUNDTRIP] Timestamp: {} | Session: {}", timestamp, session_hash).ok();
        for (i, out) in vm.output_log.iter().enumerate() {
            writeln!(file, "Step {}: {}", i, out).ok();
        }
    }
    let core_state = HanoiVMCoreState::from(&vm);
    core_state.debug_dump();
    let new_vm = HanoiVM::from(&core_state);
    println!("[ROUNDTRIP] Reconstructed HanoiVM:");
    new_vm.trace();
}

@<Operation Implementations@>=
impl HanoiOp for T81Op {
    fn execute(&self, state: &mut HanoiVMCoreState, a: i8, b: i8) -> i8 {
        let result = match self.opcode {
            0x01 => clamp_trit(state.reg[0] as i32 + a as i32), // TADD
            0x02 => clamp_trit(state.reg[0] as i32 - a as i32), // TSUB
            0x03 => clamp_trit(state.reg[0] as i32 * a as i32), // TMUL
            0x04 => state.reg[0].min(a),                        // TAND
            0x05 => state.reg[0].max(a),                        // TOR
            0x06 => -a,                                         // TNOT
            0x0D => { // TSPUSH
                if state.sp < 63 {
                    state.sp += 1;
                    state.stack[state.sp as usize] = state.reg[0];
                    state.reg[0]
                } else {
                    axion_log_entropy("TSPUSH_OVERFLOW", 0xFF);
                    0
                }
            }
            0x0E => { // TSPOP
                if state.sp >= 0 {
                    state.reg[0] = state.stack[state.sp as usize];
                    state.sp -= 1;
                    state.reg[0]
                } else {
                    axion_log_entropy("TSPOP_UNDERFLOW", 0xFF);
                    0
                }
            }
            0x20 => { // TNN_ACCUM
                if state.sp < 0 || state.reg[0] >= 243 {
                    axion_log_entropy("TNN_ACCUM_INVALID", 0xFF);
                    0
                } else {
                    clamp_trit(state.reg[0] as i32 + a as i32)
                }
            }
            0x21 => { // T81_MATMUL
                if state.sp < 0 || state.reg[0] >= 243 {
                    axion_log_entropy("T81_MATMUL_INVALID", 0xFF);
                    0
                } else {
                    clamp_trit(state.reg[0] as i32 * a as i32)
                }
            }
            _ => 0,
        };
        axion_log_entropy(&format!("OP_{}", self.name), result as u8);
        result
    }
    fn name(&self) -> &str { self.name }
    fn requires_t243(&self) -> bool { self.requires_t243 }
}

static OPERATIONS: &[T81Op] = &[
    T81Op { opcode: 0x01, name: "TADD", requires_t243: false },
    T81Op { opcode: 0x02, name: "TSUB", requires_t243: false },
    T81Op { opcode: 0x03, name: "TMUL", requires_t243: false },
    T81Op { opcode: 0x04, name: "TAND", requires_t243: false },
    T81Op { opcode: 0x05, name: "TOR", requires_t243: false },
    T81Op { opcode: 0x06, name: "TNOT", requires_t243: false },
    T81Op { opcode: 0x0D, name: "TSPUSH", requires_t243: false },
    T81Op { opcode: 0x0E, name: "TSPOP", requires_t243: false },
    T81Op { opcode: 0x20, name: "TNN_ACCUM", requires_t243: true },
    T81Op { opcode: 0x21, name: "T81_MATMUL", requires_t243: true },
];

@<Impl HanoiVM@>=
#[no_mangle]
pub extern "C" fn execute_vm_from_c(config_ptr: *const HanoiVMConfig) -> c_int {
    if config_ptr.is_null() {
        eprintln!("[ERROR] Null configuration pointer");
        return -1;
    }
    let config = unsafe { *config_ptr };
    let mut vm = HanoiVM::new(config);
    let c_session_id = CString::new(vm.session_id.clone()).unwrap();
    unsafe { axion_register_session(c_session_id.as_ptr()); }
    if config.enable_debug_mode {
        vm_roundtrip_test();
    }
    let dummy_frame = T243LogicTree::default();
    vm.push_frame(dummy_frame);
    vm.run();
    if let Some(out) = vm.final_output() {
        println!("[RESULT] Final output: {}", out);
        0
    } else {
        eprintln!("[ERROR] No output generated");
        1
    }
}

impl HanoiVM {
    pub fn new(config: HanoiVMConfig) -> Self {
        let session_id = format!("S-{}", Uuid::new_v4());
        HanoiVM {
            config,
            macro_engine: T729MacroEngine::new(),
            frame_stack: Vec::new(),
            output_log: Vec::new(),
            ai_enabled: config.enable_anomaly_detection || config.enable_adaptive_mode_switching,
            session_id,
        }
    }

    pub fn push_frame(&mut self, tree: T243LogicTree) {
        self.frame_stack.push(tree);
        axion_log_entropy("PUSH_FRAME", self.frame_stack.len() as u8);
    }

    pub fn step(&mut self) -> Option<T81Number> {
        if let Some(frame) = self.frame_stack.pop() {
            if self.config.enable_debug_mode {
                println!("[TRACE] Executing step frame");
            }
            let result = frame.evaluate();
            let optimized = if self.ai_enabled {
                axion_tbin_execute(result.clone())
            } else {
                result.clone()
            };
            self.output_log.push(optimized.clone());
            axion_log_entropy("STEP", optimized.0.get(0).copied().unwrap_or(0) as u8);
            Some(optimized)
        } else {
            None
        }
    }

    pub fn run(&mut self) {
        while let Some(frame) = self.frame_stack.pop() {
            let result = frame.evaluate();
            let optimized = if self.ai_enabled {
                axion_tbin_execute(result.clone())
            } else {
                result.clone()
            };
            self.output_log.push(optimized);
            axion_log_entropy("RUN", optimized.0.get(0).copied().unwrap_or(0) as u8);
        }
    }

    pub fn exec_macro(&mut self, digit: T729Digit, inputs: Vec<T81Number>) {
        if let Some(result) = self.macro_engine.execute(digit, inputs) {
            self.output_log.push(result);
            axion_log_entropy("EXEC_MACRO", digit.0 as u8);
        } else {
            eprintln!("[WARN] Undefined T729 macro: {}", digit.0);
            axion_log_entropy("MACRO_FAIL", digit.0 as u8);
        }
    }

    pub fn reset(&mut self) {
        self.frame_stack.clear();
        self.output_log.clear();
        self.macro_engine = T729MacroEngine::new();
        axion_log_entropy("RESET", 0);
        println!("HanoiVM runtime reset.");
    }

    pub fn final_output(&self) -> Option<&T81Number> {
        self.output_log.last()
    }

    pub fn trace(&self) {
        println!("== HanoiVM Execution Trace ==");
        for (i, out) in self.output_log.iter().enumerate() {
            println!("Step {}: {}", i, out);
        }
    }

    pub fn interact_with_ai(&mut self, cmd: &str) {
        let c_cmd = CString::new(cmd).unwrap();
        println!("[Axion AI] [{}] >>> {}", self.session_id, cmd);
        unsafe { axion_parse_command(c_cmd.as_ptr()); }
    }

    pub fn visualize(&self) -> String {
        let mut json = String::new();
        json.push_str("{\"stack\": [");
        for (i, frame) in self.frame_stack.iter().enumerate() {
            json.push_str(&format!("{},", frame.evaluate().0[0]));
            if i < self.frame_stack.len() - 1 { json.push(','); }
        }
        json.push_str("], \"output_log\": [");
        for (i, out) in self.output_log.iter().enumerate() {
            json.push_str(&format!("{}", out.0[0]));
            if i < self.output_log.len() - 1 { json.push(','); }
        }
        json.push_str("]}");
        axion_log_entropy("VISUALIZE", json.len() as u8);
        json
    }
}
