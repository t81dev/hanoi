@* telemetry-calc.cweb | CLI for Advanced Ternary Calculations and Introspection
   This tool is a command-line interface for performing secure, AI-aware ternary math
   using Axion's T81BigInt data types. It builds upon HanoiVM telemetry infrastructure
   and provides scientific, logical, and scripting-based operations from the terminal.
   
   Supported Commands:
   - raw:        Print raw JSON telemetry (pretty printed)
   - json:       Print compact JSON telemetry
   - get key:    Fetch nested key from telemetry JSON using dot notation
   - add A B:    Add two base-3 numbers
   - mul A B:    Multiply two base-3 numbers
   - sqrt A:     Square root of a ternary number
   - lua code:   Run inline Lua snippet
   - lua -f file.lua: Run Lua file
   - help:       Show this help text
@#

@<Includes and Defines@>=
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <jansson.h>  // Requires libjansson-dev
#include <math.h>
#include <unistd.h>
#include <fcntl.h>
#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>

/* Telemetry file path, override with TELEMETRY_PATH env variable if set */
#define DEFAULT_TELEMETRY_PATH "/sys/kernel/debug/telemetry-view"
static char TELEMETRY_PATH[256];

@#

@<Usage Help Function@>=
void usage(const char *prog) {
    printf("Usage: %s [command] [args]\n", prog);
    printf("Commands:\n");
    printf("  raw                  Print pretty-printed JSON telemetry\n");
    printf("  json                 Print compact JSON telemetry\n");
    printf("  get key              Fetch nested key (dot-separated) from telemetry JSON\n");
    printf("  add A B              Add two base-3 numbers\n");
    printf("  mul A B              Multiply two base-3 numbers\n");
    printf("  sqrt A               Square root of ternary number\n");
    printf("  lua code             Run inline Lua snippet\n");
    printf("  lua -f file.lua      Run Lua file\n");
    printf("  help                 Show this help text\n");
}
@#

@<Helper: Read Telemetry File@>=
char* read_telemetry_file(const char *path, long *out_size) {
    FILE *fp = fopen(path, "r");
    if (!fp) {
        perror("open telemetry file");
        return NULL;
    }
    fseek(fp, 0, SEEK_END);
    long size = ftell(fp);
    rewind(fp);
    char *buf = calloc(1, size + 1);
    if (!buf) {
        perror("calloc telemetry buffer");
        fclose(fp);
        return NULL;
    }
    if (fread(buf, 1, size, fp) != (size_t)size) {
        perror("fread telemetry file");
        free(buf);
        fclose(fp);
        return NULL;
    }
    fclose(fp);
    if (out_size) *out_size = size;
    return buf;
}
@#

@<Nested JSON Lookup@>=
json_t *json_nested_lookup(json_t *root, const char *path) {
    char *mutable = strdup(path);
    if (!mutable) return NULL;
    char *token = strtok(mutable, ".");
    json_t *val = root;
    while (token && val) {
        val = json_object_get(val, token);
        token = strtok(NULL, ".");
    }
    free(mutable);
    return val;
}
@#

@<Mock TritJS Arithmetic@>=
long base3_to_long(const char *s) {
    long n = 0;
    while (*s) n = n * 3 + (*s++ - '0');
    return n;
}

void long_to_base3(long n, char *out, size_t len) {
    out[len - 1] = '\0';
    for (int i = len - 2; i >= 0; --i) {
        out[i] = '0' + (n % 3);
        n /= 3;
    }
}
@#

@<Main Function@>=
int main(int argc, char *argv[]) {
    /* Determine telemetry path: use environment variable if set */
    char *env_path = getenv("TELEMETRY_PATH");
    if (env_path) {
        strncpy(TELEMETRY_PATH, env_path, sizeof(TELEMETRY_PATH)-1);
    } else {
        strncpy(TELEMETRY_PATH, DEFAULT_TELEMETRY_PATH, sizeof(TELEMETRY_PATH)-1);
    }

    if (argc < 2) {
        usage(argv[0]);
        return 1;
    }

    if (strcmp(argv[1], "raw") == 0) {
        long size = 0;
        char *buf = read_telemetry_file(TELEMETRY_PATH, &size);
        if (!buf) return 1;

        json_error_t err;
        json_t *root = json_loads(buf, 0, &err);
        free(buf);
        if (!root) {
            fprintf(stderr, "JSON parse error: %s\n", err.text);
            return 1;
        }
        char *out = json_dumps(root, JSON_INDENT(2));
        puts(out);
        free(out);
        json_decref(root);
        return 0;
    } else if (strcmp(argv[1], "json") == 0) {
        long size = 0;
        char *buf = read_telemetry_file(TELEMETRY_PATH, &size);
        if (!buf) return 1;

        json_error_t err;
        json_t *root = json_loads(buf, 0, &err);
        free(buf);
        if (!root) {
            fprintf(stderr, "JSON parse error: %s\n", err.text);
            return 1;
        }
        char *out = json_dumps(root, 0);  // Compact JSON output
        puts(out);
        free(out);
        json_decref(root);
        return 0;
    } else if (strcmp(argv[1], "get") == 0 && argc == 3) {
        long size = 0;
        char *buf = read_telemetry_file(TELEMETRY_PATH, &size);
        if (!buf) return 1;

        json_error_t err;
        json_t *root = json_loads(buf, 0, &err);
        free(buf);
        if (!root) {
            fprintf(stderr, "JSON parse error: %s\n", err.text);
            return 1;
        }
        json_t *val = json_nested_lookup(root, argv[2]);
        if (!val) {
            fprintf(stderr, "Key not found: %s\n", argv[2]);
            json_decref(root);
            return 1;
        }
        char *out = json_dumps(val, JSON_ENCODE_ANY);
        puts(out);
        free(out);
        json_decref(root);
        return 0;
    } else if (strcmp(argv[1], "add") == 0 && argc == 4) {
        long A = base3_to_long(argv[2]);
        long B = base3_to_long(argv[3]);
        char buf[64];
        long_to_base3(A + B, buf, sizeof(buf));
        printf("%s\n", buf);
        return 0;
    } else if (strcmp(argv[1], "mul") == 0 && argc == 4) {
        long A = base3_to_long(argv[2]);
        long B = base3_to_long(argv[3]);
        char buf[64];
        long_to_base3(A * B, buf, sizeof(buf));
        printf("%s\n", buf);
        return 0;
    } else if (strcmp(argv[1], "sqrt") == 0 && argc == 3) {
        long A = base3_to_long(argv[2]);
        double root_val = sqrt((double)A);
        char buf[64];
        long_to_base3((long)root_val, buf, sizeof(buf));
        printf("%s\n", buf);
        return 0;
    } else if (strcmp(argv[1], "lua") == 0 && argc >= 3) {
        lua_State *L = luaL_newstate();
        luaL_openlibs(L);
        if (strcmp(argv[2], "-f") == 0 && argc == 4) {
            if (luaL_dofile(L, argv[3]) != LUA_OK) {
                fprintf(stderr, "Lua file error: %s\n", lua_tostring(L, -1));
                lua_pop(L, 1);
            }
        } else {
            if (luaL_dostring(L, argv[2]) != LUA_OK) {
                fprintf(stderr, "Lua error: %s\n", lua_tostring(L, -1));
                lua_pop(L, 1);
            }
        }
        lua_close(L);
        return 0;
    } else {
        usage(argv[0]);
        return 1;
    }
}
@*

